{"ast":null,"code":"// Copyright 2015 Joyent, Inc.\n\nmodule.exports = SSHBuffer;\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nfunction SSHBuffer(opts) {\n  assert.object(opts, 'options');\n  if (opts.buffer !== undefined) assert.buffer(opts.buffer, 'options.buffer');\n  this._size = opts.buffer ? opts.buffer.length : 1024;\n  this._buffer = opts.buffer || Buffer.alloc(this._size);\n  this._offset = 0;\n}\nSSHBuffer.prototype.toBuffer = function () {\n  return this._buffer.slice(0, this._offset);\n};\nSSHBuffer.prototype.atEnd = function () {\n  return this._offset >= this._buffer.length;\n};\nSSHBuffer.prototype.remainder = function () {\n  return this._buffer.slice(this._offset);\n};\nSSHBuffer.prototype.skip = function (n) {\n  this._offset += n;\n};\nSSHBuffer.prototype.expand = function () {\n  this._size *= 2;\n  var buf = Buffer.alloc(this._size);\n  this._buffer.copy(buf, 0);\n  this._buffer = buf;\n};\nSSHBuffer.prototype.readPart = function () {\n  return {\n    data: this.readBuffer()\n  };\n};\nSSHBuffer.prototype.readBuffer = function () {\n  var len = this._buffer.readUInt32BE(this._offset);\n  this._offset += 4;\n  assert.ok(this._offset + len <= this._buffer.length, 'length out of bounds at +0x' + this._offset.toString(16) + ' (data truncated?)');\n  var buf = this._buffer.slice(this._offset, this._offset + len);\n  this._offset += len;\n  return buf;\n};\nSSHBuffer.prototype.readString = function () {\n  return this.readBuffer().toString();\n};\nSSHBuffer.prototype.readCString = function () {\n  var offset = this._offset;\n  while (offset < this._buffer.length && this._buffer[offset] !== 0x00) offset++;\n  assert.ok(offset < this._buffer.length, 'c string does not terminate');\n  var str = this._buffer.slice(this._offset, offset).toString();\n  this._offset = offset + 1;\n  return str;\n};\nSSHBuffer.prototype.readInt = function () {\n  var v = this._buffer.readUInt32BE(this._offset);\n  this._offset += 4;\n  return v;\n};\nSSHBuffer.prototype.readInt64 = function () {\n  assert.ok(this._offset + 8 < this._buffer.length, 'buffer not long enough to read Int64');\n  var v = this._buffer.slice(this._offset, this._offset + 8);\n  this._offset += 8;\n  return v;\n};\nSSHBuffer.prototype.readChar = function () {\n  var v = this._buffer[this._offset++];\n  return v;\n};\nSSHBuffer.prototype.writeBuffer = function (buf) {\n  while (this._offset + 4 + buf.length > this._size) this.expand();\n  this._buffer.writeUInt32BE(buf.length, this._offset);\n  this._offset += 4;\n  buf.copy(this._buffer, this._offset);\n  this._offset += buf.length;\n};\nSSHBuffer.prototype.writeString = function (str) {\n  this.writeBuffer(Buffer.from(str, 'utf8'));\n};\nSSHBuffer.prototype.writeCString = function (str) {\n  while (this._offset + 1 + str.length > this._size) this.expand();\n  this._buffer.write(str, this._offset);\n  this._offset += str.length;\n  this._buffer[this._offset++] = 0;\n};\nSSHBuffer.prototype.writeInt = function (v) {\n  while (this._offset + 4 > this._size) this.expand();\n  this._buffer.writeUInt32BE(v, this._offset);\n  this._offset += 4;\n};\nSSHBuffer.prototype.writeInt64 = function (v) {\n  assert.buffer(v, 'value');\n  if (v.length > 8) {\n    var lead = v.slice(0, v.length - 8);\n    for (var i = 0; i < lead.length; ++i) {\n      assert.strictEqual(lead[i], 0, 'must fit in 64 bits of precision');\n    }\n    v = v.slice(v.length - 8, v.length);\n  }\n  while (this._offset + 8 > this._size) this.expand();\n  v.copy(this._buffer, this._offset);\n  this._offset += 8;\n};\nSSHBuffer.prototype.writeChar = function (v) {\n  while (this._offset + 1 > this._size) this.expand();\n  this._buffer[this._offset++] = v;\n};\nSSHBuffer.prototype.writePart = function (p) {\n  this.writeBuffer(p.data);\n};\nSSHBuffer.prototype.write = function (buf) {\n  while (this._offset + buf.length > this._size) this.expand();\n  buf.copy(this._buffer, this._offset);\n  this._offset += buf.length;\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}