{"ast":null,"code":"'use strict';\n\nconst packageData = require('../../package.json');\nconst shared = require('../shared');\n\n/**\n * Generates a Transport object to generate JSON output\n *\n * @constructor\n * @param {Object} optional config parameter\n */\nclass JSONTransport {\n  constructor(options) {\n    options = options || {};\n    this.options = options || {};\n    this.name = 'JSONTransport';\n    this.version = packageData.version;\n    this.logger = shared.getLogger(this.options, {\n      component: this.options.component || 'json-transport'\n    });\n  }\n\n  /**\n   * <p>Compiles a mailcomposer message and forwards it to handler that sends it.</p>\n   *\n   * @param {Object} emailMessage MailComposer object\n   * @param {Function} callback Callback function to run when the sending is completed\n   */\n  send(mail, done) {\n    // Sendmail strips this header line by itself\n    mail.message.keepBcc = true;\n    let envelope = mail.data.envelope || mail.message.getEnvelope();\n    let messageId = mail.message.messageId();\n    let recipients = [].concat(envelope.to || []);\n    if (recipients.length > 3) {\n      recipients.push('...and ' + recipients.splice(2).length + ' more');\n    }\n    this.logger.info({\n      tnx: 'send',\n      messageId\n    }, 'Composing JSON structure of %s to <%s>', messageId, recipients.join(', '));\n    setImmediate(() => {\n      mail.normalize((err, data) => {\n        if (err) {\n          this.logger.error({\n            err,\n            tnx: 'send',\n            messageId\n          }, 'Failed building JSON structure for %s. %s', messageId, err.message);\n          return done(err);\n        }\n        delete data.envelope;\n        delete data.normalizedHeaders;\n        return done(null, {\n          envelope,\n          messageId,\n          message: this.options.skipEncoding ? data : JSON.stringify(data)\n        });\n      });\n    });\n  }\n}\nmodule.exports = JSONTransport;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}