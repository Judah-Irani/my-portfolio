{"ast":null,"code":"import { ApolloModule, APOLLO_OPTIONS } from 'apollo-angular';\nimport { setContext } from '@apollo/client/link/context';\nimport { ApolloLink, InMemoryCache } from '@apollo/client/core';\nimport { HttpLink } from 'apollo-angular/http';\nimport { HttpClientModule } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nconst uri = '\"https://api.github.com/repos/user/repo/issues?state=closed&access_token=';\nexport function provideApollo(httpLink) {\n  const basic = setContext((operation, context) => ({\n    headers: {\n      Accept: 'charset=utf-8'\n    }\n  }));\n  const token = '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';\n  const auth = setContext((operation, context) => ({\n    headers: {\n      Authorization: `token ${token}`\n    }\n  }));\n  const link = ApolloLink.from([basic, auth, httpLink.create({\n    uri\n  })]);\n  const cache = new InMemoryCache();\n  return {\n    link,\n    cache\n  };\n}\nlet GraphQLModule = /*#__PURE__*/(() => {\n  var _class;\n  class GraphQLModule {}\n  _class = GraphQLModule;\n  _class.ɵfac = function GraphQLModule_Factory(t) {\n    return new (t || _class)();\n  };\n  _class.ɵmod = i0.ɵɵdefineNgModule({\n    type: _class\n  });\n  _class.ɵinj = i0.ɵɵdefineInjector({\n    providers: [{\n      provide: APOLLO_OPTIONS,\n      useFactory: provideApollo,\n      deps: [HttpLink]\n    }],\n    imports: [ApolloModule, HttpClientModule]\n  });\n  return GraphQLModule;\n})();\nexport { GraphQLModule };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}