{"ast":null,"code":"// Basic Javascript Elliptic Curve implementation\n// Ported loosely from BouncyCastle's Java EC code\n// Only Fp curves implemented for now\n\n// Requires jsbn.js and jsbn2.js\nvar BigInteger = require('jsbn').BigInteger;\nvar Barrett = BigInteger.prototype.Barrett;\n\n// ----------------\n// ECFieldElementFp\n\n// constructor\nfunction ECFieldElementFp(q, x) {\n  this.x = x;\n  // TODO if(x.compareTo(q) >= 0) error\n  this.q = q;\n}\nfunction feFpEquals(other) {\n  if (other == this) return true;\n  return this.q.equals(other.q) && this.x.equals(other.x);\n}\nfunction feFpToBigInteger() {\n  return this.x;\n}\nfunction feFpNegate() {\n  return new ECFieldElementFp(this.q, this.x.negate().mod(this.q));\n}\nfunction feFpAdd(b) {\n  return new ECFieldElementFp(this.q, this.x.add(b.toBigInteger()).mod(this.q));\n}\nfunction feFpSubtract(b) {\n  return new ECFieldElementFp(this.q, this.x.subtract(b.toBigInteger()).mod(this.q));\n}\nfunction feFpMultiply(b) {\n  return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger()).mod(this.q));\n}\nfunction feFpSquare() {\n  return new ECFieldElementFp(this.q, this.x.square().mod(this.q));\n}\nfunction feFpDivide(b) {\n  return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger().modInverse(this.q)).mod(this.q));\n}\nECFieldElementFp.prototype.equals = feFpEquals;\nECFieldElementFp.prototype.toBigInteger = feFpToBigInteger;\nECFieldElementFp.prototype.negate = feFpNegate;\nECFieldElementFp.prototype.add = feFpAdd;\nECFieldElementFp.prototype.subtract = feFpSubtract;\nECFieldElementFp.prototype.multiply = feFpMultiply;\nECFieldElementFp.prototype.square = feFpSquare;\nECFieldElementFp.prototype.divide = feFpDivide;\n\n// ----------------\n// ECPointFp\n\n// constructor\nfunction ECPointFp(curve, x, y, z) {\n  this.curve = curve;\n  this.x = x;\n  this.y = y;\n  // Projective coordinates: either zinv == null or z * zinv == 1\n  // z and zinv are just BigIntegers, not fieldElements\n  if (z == null) {\n    this.z = BigInteger.ONE;\n  } else {\n    this.z = z;\n  }\n  this.zinv = null;\n  //TODO: compression flag\n}\n\nfunction pointFpGetX() {\n  if (this.zinv == null) {\n    this.zinv = this.z.modInverse(this.curve.q);\n  }\n  var r = this.x.toBigInteger().multiply(this.zinv);\n  this.curve.reduce(r);\n  return this.curve.fromBigInteger(r);\n}\nfunction pointFpGetY() {\n  if (this.zinv == null) {\n    this.zinv = this.z.modInverse(this.curve.q);\n  }\n  var r = this.y.toBigInteger().multiply(this.zinv);\n  this.curve.reduce(r);\n  return this.curve.fromBigInteger(r);\n}\nfunction pointFpEquals(other) {\n  if (other == this) return true;\n  if (this.isInfinity()) return other.isInfinity();\n  if (other.isInfinity()) return this.isInfinity();\n  var u, v;\n  // u = Y2 * Z1 - Y1 * Z2\n  u = other.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(other.z)).mod(this.curve.q);\n  if (!u.equals(BigInteger.ZERO)) return false;\n  // v = X2 * Z1 - X1 * Z2\n  v = other.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(other.z)).mod(this.curve.q);\n  return v.equals(BigInteger.ZERO);\n}\nfunction pointFpIsInfinity() {\n  if (this.x == null && this.y == null) return true;\n  return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO);\n}\nfunction pointFpNegate() {\n  return new ECPointFp(this.curve, this.x, this.y.negate(), this.z);\n}\nfunction pointFpAdd(b) {\n  if (this.isInfinity()) return b;\n  if (b.isInfinity()) return this;\n\n  // u = Y2 * Z1 - Y1 * Z2\n  var u = b.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(b.z)).mod(this.curve.q);\n  // v = X2 * Z1 - X1 * Z2\n  var v = b.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(b.z)).mod(this.curve.q);\n  if (BigInteger.ZERO.equals(v)) {\n    if (BigInteger.ZERO.equals(u)) {\n      return this.twice(); // this == b, so double\n    }\n\n    return this.curve.getInfinity(); // this = -b, so infinity\n  }\n\n  var THREE = new BigInteger(\"3\");\n  var x1 = this.x.toBigInteger();\n  var y1 = this.y.toBigInteger();\n  var x2 = b.x.toBigInteger();\n  var y2 = b.y.toBigInteger();\n  var v2 = v.square();\n  var v3 = v2.multiply(v);\n  var x1v2 = x1.multiply(v2);\n  var zu2 = u.square().multiply(this.z);\n\n  // x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)\n  var x3 = zu2.subtract(x1v2.shiftLeft(1)).multiply(b.z).subtract(v3).multiply(v).mod(this.curve.q);\n  // y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3\n  var y3 = x1v2.multiply(THREE).multiply(u).subtract(y1.multiply(v3)).subtract(zu2.multiply(u)).multiply(b.z).add(u.multiply(v3)).mod(this.curve.q);\n  // z3 = v^3 * z1 * z2\n  var z3 = v3.multiply(this.z).multiply(b.z).mod(this.curve.q);\n  return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);\n}\nfunction pointFpTwice() {\n  if (this.isInfinity()) return this;\n  if (this.y.toBigInteger().signum() == 0) return this.curve.getInfinity();\n\n  // TODO: optimized handling of constants\n  var THREE = new BigInteger(\"3\");\n  var x1 = this.x.toBigInteger();\n  var y1 = this.y.toBigInteger();\n  var y1z1 = y1.multiply(this.z);\n  var y1sqz1 = y1z1.multiply(y1).mod(this.curve.q);\n  var a = this.curve.a.toBigInteger();\n\n  // w = 3 * x1^2 + a * z1^2\n  var w = x1.square().multiply(THREE);\n  if (!BigInteger.ZERO.equals(a)) {\n    w = w.add(this.z.square().multiply(a));\n  }\n  w = w.mod(this.curve.q);\n  //this.curve.reduce(w);\n  // x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)\n  var x3 = w.square().subtract(x1.shiftLeft(3).multiply(y1sqz1)).shiftLeft(1).multiply(y1z1).mod(this.curve.q);\n  // y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3\n  var y3 = w.multiply(THREE).multiply(x1).subtract(y1sqz1.shiftLeft(1)).shiftLeft(2).multiply(y1sqz1).subtract(w.square().multiply(w)).mod(this.curve.q);\n  // z3 = 8 * (y1 * z1)^3\n  var z3 = y1z1.square().multiply(y1z1).shiftLeft(3).mod(this.curve.q);\n  return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);\n}\n\n// Simple NAF (Non-Adjacent Form) multiplication algorithm\n// TODO: modularize the multiplication algorithm\nfunction pointFpMultiply(k) {\n  if (this.isInfinity()) return this;\n  if (k.signum() == 0) return this.curve.getInfinity();\n  var e = k;\n  var h = e.multiply(new BigInteger(\"3\"));\n  var neg = this.negate();\n  var R = this;\n  var i;\n  for (i = h.bitLength() - 2; i > 0; --i) {\n    R = R.twice();\n    var hBit = h.testBit(i);\n    var eBit = e.testBit(i);\n    if (hBit != eBit) {\n      R = R.add(hBit ? this : neg);\n    }\n  }\n  return R;\n}\n\n// Compute this*j + x*k (simultaneous multiplication)\nfunction pointFpMultiplyTwo(j, x, k) {\n  var i;\n  if (j.bitLength() > k.bitLength()) i = j.bitLength() - 1;else i = k.bitLength() - 1;\n  var R = this.curve.getInfinity();\n  var both = this.add(x);\n  while (i >= 0) {\n    R = R.twice();\n    if (j.testBit(i)) {\n      if (k.testBit(i)) {\n        R = R.add(both);\n      } else {\n        R = R.add(this);\n      }\n    } else {\n      if (k.testBit(i)) {\n        R = R.add(x);\n      }\n    }\n    --i;\n  }\n  return R;\n}\nECPointFp.prototype.getX = pointFpGetX;\nECPointFp.prototype.getY = pointFpGetY;\nECPointFp.prototype.equals = pointFpEquals;\nECPointFp.prototype.isInfinity = pointFpIsInfinity;\nECPointFp.prototype.negate = pointFpNegate;\nECPointFp.prototype.add = pointFpAdd;\nECPointFp.prototype.twice = pointFpTwice;\nECPointFp.prototype.multiply = pointFpMultiply;\nECPointFp.prototype.multiplyTwo = pointFpMultiplyTwo;\n\n// ----------------\n// ECCurveFp\n\n// constructor\nfunction ECCurveFp(q, a, b) {\n  this.q = q;\n  this.a = this.fromBigInteger(a);\n  this.b = this.fromBigInteger(b);\n  this.infinity = new ECPointFp(this, null, null);\n  this.reducer = new Barrett(this.q);\n}\nfunction curveFpGetQ() {\n  return this.q;\n}\nfunction curveFpGetA() {\n  return this.a;\n}\nfunction curveFpGetB() {\n  return this.b;\n}\nfunction curveFpEquals(other) {\n  if (other == this) return true;\n  return this.q.equals(other.q) && this.a.equals(other.a) && this.b.equals(other.b);\n}\nfunction curveFpGetInfinity() {\n  return this.infinity;\n}\nfunction curveFpFromBigInteger(x) {\n  return new ECFieldElementFp(this.q, x);\n}\nfunction curveReduce(x) {\n  this.reducer.reduce(x);\n}\n\n// for now, work with hex strings because they're easier in JS\nfunction curveFpDecodePointHex(s) {\n  switch (parseInt(s.substr(0, 2), 16)) {\n    // first byte\n    case 0:\n      return this.infinity;\n    case 2:\n    case 3:\n      // point compression not supported yet\n      return null;\n    case 4:\n    case 6:\n    case 7:\n      var len = (s.length - 2) / 2;\n      var xHex = s.substr(2, len);\n      var yHex = s.substr(len + 2, len);\n      return new ECPointFp(this, this.fromBigInteger(new BigInteger(xHex, 16)), this.fromBigInteger(new BigInteger(yHex, 16)));\n    default:\n      // unsupported\n      return null;\n  }\n}\nfunction curveFpEncodePointHex(p) {\n  if (p.isInfinity()) return \"00\";\n  var xHex = p.getX().toBigInteger().toString(16);\n  var yHex = p.getY().toBigInteger().toString(16);\n  var oLen = this.getQ().toString(16).length;\n  if (oLen % 2 != 0) oLen++;\n  while (xHex.length < oLen) {\n    xHex = \"0\" + xHex;\n  }\n  while (yHex.length < oLen) {\n    yHex = \"0\" + yHex;\n  }\n  return \"04\" + xHex + yHex;\n}\nECCurveFp.prototype.getQ = curveFpGetQ;\nECCurveFp.prototype.getA = curveFpGetA;\nECCurveFp.prototype.getB = curveFpGetB;\nECCurveFp.prototype.equals = curveFpEquals;\nECCurveFp.prototype.getInfinity = curveFpGetInfinity;\nECCurveFp.prototype.fromBigInteger = curveFpFromBigInteger;\nECCurveFp.prototype.reduce = curveReduce;\n//ECCurveFp.prototype.decodePointHex = curveFpDecodePointHex;\nECCurveFp.prototype.encodePointHex = curveFpEncodePointHex;\n\n// from: https://github.com/kaielvin/jsbn-ec-point-compression\nECCurveFp.prototype.decodePointHex = function (s) {\n  var yIsEven;\n  switch (parseInt(s.substr(0, 2), 16)) {\n    // first byte\n    case 0:\n      return this.infinity;\n    case 2:\n      yIsEven = false;\n    case 3:\n      if (yIsEven == undefined) yIsEven = true;\n      var len = s.length - 2;\n      var xHex = s.substr(2, len);\n      var x = this.fromBigInteger(new BigInteger(xHex, 16));\n      var alpha = x.multiply(x.square().add(this.getA())).add(this.getB());\n      var beta = alpha.sqrt();\n      if (beta == null) throw \"Invalid point compression\";\n      var betaValue = beta.toBigInteger();\n      if (betaValue.testBit(0) != yIsEven) {\n        // Use the other root\n        beta = this.fromBigInteger(this.getQ().subtract(betaValue));\n      }\n      return new ECPointFp(this, x, beta);\n    case 4:\n    case 6:\n    case 7:\n      var len = (s.length - 2) / 2;\n      var xHex = s.substr(2, len);\n      var yHex = s.substr(len + 2, len);\n      return new ECPointFp(this, this.fromBigInteger(new BigInteger(xHex, 16)), this.fromBigInteger(new BigInteger(yHex, 16)));\n    default:\n      // unsupported\n      return null;\n  }\n};\nECCurveFp.prototype.encodeCompressedPointHex = function (p) {\n  if (p.isInfinity()) return \"00\";\n  var xHex = p.getX().toBigInteger().toString(16);\n  var oLen = this.getQ().toString(16).length;\n  if (oLen % 2 != 0) oLen++;\n  while (xHex.length < oLen) xHex = \"0\" + xHex;\n  var yPrefix;\n  if (p.getY().toBigInteger().isEven()) yPrefix = \"02\";else yPrefix = \"03\";\n  return yPrefix + xHex;\n};\nECFieldElementFp.prototype.getR = function () {\n  if (this.r != undefined) return this.r;\n  this.r = null;\n  var bitLength = this.q.bitLength();\n  if (bitLength > 128) {\n    var firstWord = this.q.shiftRight(bitLength - 64);\n    if (firstWord.intValue() == -1) {\n      this.r = BigInteger.ONE.shiftLeft(bitLength).subtract(this.q);\n    }\n  }\n  return this.r;\n};\nECFieldElementFp.prototype.modMult = function (x1, x2) {\n  return this.modReduce(x1.multiply(x2));\n};\nECFieldElementFp.prototype.modReduce = function (x) {\n  if (this.getR() != null) {\n    var qLen = q.bitLength();\n    while (x.bitLength() > qLen + 1) {\n      var u = x.shiftRight(qLen);\n      var v = x.subtract(u.shiftLeft(qLen));\n      if (!this.getR().equals(BigInteger.ONE)) {\n        u = u.multiply(this.getR());\n      }\n      x = u.add(v);\n    }\n    while (x.compareTo(q) >= 0) {\n      x = x.subtract(q);\n    }\n  } else {\n    x = x.mod(q);\n  }\n  return x;\n};\nECFieldElementFp.prototype.sqrt = function () {\n  if (!this.q.testBit(0)) throw \"unsupported\";\n\n  // p mod 4 == 3\n  if (this.q.testBit(1)) {\n    var z = new ECFieldElementFp(this.q, this.x.modPow(this.q.shiftRight(2).add(BigInteger.ONE), this.q));\n    return z.square().equals(this) ? z : null;\n  }\n\n  // p mod 4 == 1\n  var qMinusOne = this.q.subtract(BigInteger.ONE);\n  var legendreExponent = qMinusOne.shiftRight(1);\n  if (!this.x.modPow(legendreExponent, this.q).equals(BigInteger.ONE)) {\n    return null;\n  }\n  var u = qMinusOne.shiftRight(2);\n  var k = u.shiftLeft(1).add(BigInteger.ONE);\n  var Q = this.x;\n  var fourQ = modDouble(modDouble(Q));\n  var U, V;\n  do {\n    var P;\n    do {\n      P = new BigInteger(this.q.bitLength(), new SecureRandom());\n    } while (P.compareTo(this.q) >= 0 || !P.multiply(P).subtract(fourQ).modPow(legendreExponent, this.q).equals(qMinusOne));\n    var result = this.lucasSequence(P, Q, k);\n    U = result[0];\n    V = result[1];\n    if (this.modMult(V, V).equals(fourQ)) {\n      // Integer division by 2, mod q\n      if (V.testBit(0)) {\n        V = V.add(q);\n      }\n      V = V.shiftRight(1);\n      return new ECFieldElementFp(q, V);\n    }\n  } while (U.equals(BigInteger.ONE) || U.equals(qMinusOne));\n  return null;\n};\nECFieldElementFp.prototype.lucasSequence = function (P, Q, k) {\n  var n = k.bitLength();\n  var s = k.getLowestSetBit();\n  var Uh = BigInteger.ONE;\n  var Vl = BigInteger.TWO;\n  var Vh = P;\n  var Ql = BigInteger.ONE;\n  var Qh = BigInteger.ONE;\n  for (var j = n - 1; j >= s + 1; --j) {\n    Ql = this.modMult(Ql, Qh);\n    if (k.testBit(j)) {\n      Qh = this.modMult(Ql, Q);\n      Uh = this.modMult(Uh, Vh);\n      Vl = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n      Vh = this.modReduce(Vh.multiply(Vh).subtract(Qh.shiftLeft(1)));\n    } else {\n      Qh = Ql;\n      Uh = this.modReduce(Uh.multiply(Vl).subtract(Ql));\n      Vh = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n      Vl = this.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));\n    }\n  }\n  Ql = this.modMult(Ql, Qh);\n  Qh = this.modMult(Ql, Q);\n  Uh = this.modReduce(Uh.multiply(Vl).subtract(Ql));\n  Vl = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n  Ql = this.modMult(Ql, Qh);\n  for (var j = 1; j <= s; ++j) {\n    Uh = this.modMult(Uh, Vl);\n    Vl = this.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));\n    Ql = this.modMult(Ql, Ql);\n  }\n  return [Uh, Vl];\n};\nvar exports = {\n  ECCurveFp: ECCurveFp,\n  ECPointFp: ECPointFp,\n  ECFieldElementFp: ECFieldElementFp\n};\nmodule.exports = exports;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}