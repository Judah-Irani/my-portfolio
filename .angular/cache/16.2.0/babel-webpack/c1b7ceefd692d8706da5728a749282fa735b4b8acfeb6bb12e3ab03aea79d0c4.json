{"ast":null,"code":"import { Injectable, NgZone, Inject } from '@angular/core';\nimport { from, of, animationFrameScheduler } from 'rxjs';\nimport { map, observeOn, publishReplay, refCount } from 'rxjs/operators';\nimport { LOTTIE_OPTIONS } from './symbols';\nfunction streamifyPlayerOrLoader(player) {\n  const playerOrLoader = player();\n  if (playerOrLoader instanceof Promise) {\n    return from(playerOrLoader).pipe(map(module => module.default || module), publishReplay(1), refCount());\n  } else {\n    return of(playerOrLoader);\n  }\n}\nexport class AnimationLoader {\n  constructor(ngZone, options) {\n    this.ngZone = ngZone;\n    this.options = options;\n    this.player$ = streamifyPlayerOrLoader(this.options.player).pipe(observeOn(animationFrameScheduler));\n  }\n  loadAnimation(options) {\n    return this.player$.pipe(map(player => this.createAnimationItem(player, options)));\n  }\n  resolveOptions(options, container) {\n    return Object.assign({\n      container,\n      renderer: 'svg',\n      loop: true,\n      autoplay: true\n    }, options);\n  }\n  createAnimationItem(player, options) {\n    return this.ngZone.runOutsideAngular(() => player.loadAnimation(options));\n  }\n}\n\n/** @nocollapse */\n\n//# sourceMappingURL=animation-loader.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}