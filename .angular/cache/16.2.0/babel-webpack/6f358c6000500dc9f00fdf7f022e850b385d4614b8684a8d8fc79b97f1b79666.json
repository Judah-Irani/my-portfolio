{"ast":null,"code":"// Copyright 2018 Joyent, Inc.\n\nmodule.exports = {\n  read: read,\n  write: write\n};\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\nvar ssh = require('./ssh');\nvar rfc4253 = require('./rfc4253');\nvar dnssec = require('./dnssec');\nvar putty = require('./putty');\nvar DNSSEC_PRIVKEY_HEADER_PREFIX = 'Private-key-format: v1';\nfunction read(buf, options) {\n  if (typeof buf === 'string') {\n    if (buf.trim().match(/^[-]+[ ]*BEGIN/)) return pem.read(buf, options);\n    if (buf.match(/^\\s*ssh-[a-z]/)) return ssh.read(buf, options);\n    if (buf.match(/^\\s*ecdsa-/)) return ssh.read(buf, options);\n    if (buf.match(/^putty-user-key-file-2:/i)) return putty.read(buf, options);\n    if (findDNSSECHeader(buf)) return dnssec.read(buf, options);\n    buf = Buffer.from(buf, 'binary');\n  } else {\n    assert.buffer(buf);\n    if (findPEMHeader(buf)) return pem.read(buf, options);\n    if (findSSHHeader(buf)) return ssh.read(buf, options);\n    if (findPuTTYHeader(buf)) return putty.read(buf, options);\n    if (findDNSSECHeader(buf)) return dnssec.read(buf, options);\n  }\n  if (buf.readUInt32BE(0) < buf.length) return rfc4253.read(buf, options);\n  throw new Error('Failed to auto-detect format of key');\n}\nfunction findPuTTYHeader(buf) {\n  var offset = 0;\n  while (offset < buf.length && (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9)) ++offset;\n  if (offset + 22 <= buf.length && buf.slice(offset, offset + 22).toString('ascii').toLowerCase() === 'putty-user-key-file-2:') return true;\n  return false;\n}\nfunction findSSHHeader(buf) {\n  var offset = 0;\n  while (offset < buf.length && (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9)) ++offset;\n  if (offset + 4 <= buf.length && buf.slice(offset, offset + 4).toString('ascii') === 'ssh-') return true;\n  if (offset + 6 <= buf.length && buf.slice(offset, offset + 6).toString('ascii') === 'ecdsa-') return true;\n  return false;\n}\nfunction findPEMHeader(buf) {\n  var offset = 0;\n  while (offset < buf.length && (buf[offset] === 32 || buf[offset] === 10)) ++offset;\n  if (buf[offset] !== 45) return false;\n  while (offset < buf.length && buf[offset] === 45) ++offset;\n  while (offset < buf.length && buf[offset] === 32) ++offset;\n  if (offset + 5 > buf.length || buf.slice(offset, offset + 5).toString('ascii') !== 'BEGIN') return false;\n  return true;\n}\nfunction findDNSSECHeader(buf) {\n  // private case first\n  if (buf.length <= DNSSEC_PRIVKEY_HEADER_PREFIX.length) return false;\n  var headerCheck = buf.slice(0, DNSSEC_PRIVKEY_HEADER_PREFIX.length);\n  if (headerCheck.toString('ascii') === DNSSEC_PRIVKEY_HEADER_PREFIX) return true;\n\n  // public-key RFC3110 ?\n  // 'domain.com. IN KEY ...' or 'domain.com. IN DNSKEY ...'\n  // skip any comment-lines\n  if (typeof buf !== 'string') {\n    buf = buf.toString('ascii');\n  }\n  var lines = buf.split('\\n');\n  var line = 0;\n  /* JSSTYLED */\n  while (lines[line].match(/^\\;/)) line++;\n  if (lines[line].toString('ascii').match(/\\. IN KEY /)) return true;\n  if (lines[line].toString('ascii').match(/\\. IN DNSKEY /)) return true;\n  return false;\n}\nfunction write(key, options) {\n  throw new Error('\"auto\" format cannot be used for writing');\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}