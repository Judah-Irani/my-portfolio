{"ast":null,"code":"'use strict';\n\n// FIXME:\n// replace this Transform mess with a method that pipes input argument to output argument\nconst MessageParser = require('./message-parser');\nconst RelaxedBody = require('./relaxed-body');\nconst sign = require('./sign');\nconst PassThrough = require('stream').PassThrough;\nconst fs = require('fs');\nconst path = require('path');\nconst crypto = require('crypto');\nconst DKIM_ALGO = 'sha256';\nconst MAX_MESSAGE_SIZE = 128 * 1024; // buffer messages larger than this to disk\n\n/*\n// Usage:\n\nlet dkim = new DKIM({\n    domainName: 'example.com',\n    keySelector: 'key-selector',\n    privateKey,\n    cacheDir: '/tmp'\n});\ndkim.sign(input).pipe(process.stdout);\n\n// Where inputStream is a rfc822 message (either a stream, string or Buffer)\n// and outputStream is a DKIM signed rfc822 message\n*/\n\nclass DKIMSigner {\n  constructor(options, keys, input, output) {\n    this.options = options || {};\n    this.keys = keys;\n    this.cacheTreshold = Number(this.options.cacheTreshold) || MAX_MESSAGE_SIZE;\n    this.hashAlgo = this.options.hashAlgo || DKIM_ALGO;\n    this.cacheDir = this.options.cacheDir || false;\n    this.chunks = [];\n    this.chunklen = 0;\n    this.readPos = 0;\n    this.cachePath = this.cacheDir ? path.join(this.cacheDir, 'message.' + Date.now() + '-' + crypto.randomBytes(14).toString('hex')) : false;\n    this.cache = false;\n    this.headers = false;\n    this.bodyHash = false;\n    this.parser = false;\n    this.relaxedBody = false;\n    this.input = input;\n    this.output = output;\n    this.output.usingCache = false;\n    this.hasErrored = false;\n    this.input.on('error', err => {\n      this.hasErrored = true;\n      this.cleanup();\n      output.emit('error', err);\n    });\n  }\n  cleanup() {\n    if (!this.cache || !this.cachePath) {\n      return;\n    }\n    fs.unlink(this.cachePath, () => false);\n  }\n  createReadCache() {\n    // pipe remainings to cache file\n    this.cache = fs.createReadStream(this.cachePath);\n    this.cache.once('error', err => {\n      this.cleanup();\n      this.output.emit('error', err);\n    });\n    this.cache.once('close', () => {\n      this.cleanup();\n    });\n    this.cache.pipe(this.output);\n  }\n  sendNextChunk() {\n    if (this.hasErrored) {\n      return;\n    }\n    if (this.readPos >= this.chunks.length) {\n      if (!this.cache) {\n        return this.output.end();\n      }\n      return this.createReadCache();\n    }\n    let chunk = this.chunks[this.readPos++];\n    if (this.output.write(chunk) === false) {\n      return this.output.once('drain', () => {\n        this.sendNextChunk();\n      });\n    }\n    setImmediate(() => this.sendNextChunk());\n  }\n  sendSignedOutput() {\n    let keyPos = 0;\n    let signNextKey = () => {\n      if (keyPos >= this.keys.length) {\n        this.output.write(this.parser.rawHeaders);\n        return setImmediate(() => this.sendNextChunk());\n      }\n      let key = this.keys[keyPos++];\n      let dkimField = sign(this.headers, this.hashAlgo, this.bodyHash, {\n        domainName: key.domainName,\n        keySelector: key.keySelector,\n        privateKey: key.privateKey,\n        headerFieldNames: this.options.headerFieldNames,\n        skipFields: this.options.skipFields\n      });\n      if (dkimField) {\n        this.output.write(Buffer.from(dkimField + '\\r\\n'));\n      }\n      return setImmediate(signNextKey);\n    };\n    if (this.bodyHash && this.headers) {\n      return signNextKey();\n    }\n    this.output.write(this.parser.rawHeaders);\n    this.sendNextChunk();\n  }\n  createWriteCache() {\n    this.output.usingCache = true;\n    // pipe remainings to cache file\n    this.cache = fs.createWriteStream(this.cachePath);\n    this.cache.once('error', err => {\n      this.cleanup();\n      // drain input\n      this.relaxedBody.unpipe(this.cache);\n      this.relaxedBody.on('readable', () => {\n        while (this.relaxedBody.read() !== null) {\n          // do nothing\n        }\n      });\n      this.hasErrored = true;\n      // emit error\n      this.output.emit('error', err);\n    });\n    this.cache.once('close', () => {\n      this.sendSignedOutput();\n    });\n    this.relaxedBody.removeAllListeners('readable');\n    this.relaxedBody.pipe(this.cache);\n  }\n  signStream() {\n    this.parser = new MessageParser();\n    this.relaxedBody = new RelaxedBody({\n      hashAlgo: this.hashAlgo\n    });\n    this.parser.on('headers', value => {\n      this.headers = value;\n    });\n    this.relaxedBody.on('hash', value => {\n      this.bodyHash = value;\n    });\n    this.relaxedBody.on('readable', () => {\n      let chunk;\n      if (this.cache) {\n        return;\n      }\n      while ((chunk = this.relaxedBody.read()) !== null) {\n        this.chunks.push(chunk);\n        this.chunklen += chunk.length;\n        if (this.chunklen >= this.cacheTreshold && this.cachePath) {\n          return this.createWriteCache();\n        }\n      }\n    });\n    this.relaxedBody.on('end', () => {\n      if (this.cache) {\n        return;\n      }\n      this.sendSignedOutput();\n    });\n    this.parser.pipe(this.relaxedBody);\n    setImmediate(() => this.input.pipe(this.parser));\n  }\n}\nclass DKIM {\n  constructor(options) {\n    this.options = options || {};\n    this.keys = [].concat(this.options.keys || {\n      domainName: options.domainName,\n      keySelector: options.keySelector,\n      privateKey: options.privateKey\n    });\n  }\n  sign(input, extraOptions) {\n    let output = new PassThrough();\n    let inputStream = input;\n    let writeValue = false;\n    if (Buffer.isBuffer(input)) {\n      writeValue = input;\n      inputStream = new PassThrough();\n    } else if (typeof input === 'string') {\n      writeValue = Buffer.from(input);\n      inputStream = new PassThrough();\n    }\n    let options = this.options;\n    if (extraOptions && Object.keys(extraOptions).length) {\n      options = {};\n      Object.keys(this.options || {}).forEach(key => {\n        options[key] = this.options[key];\n      });\n      Object.keys(extraOptions || {}).forEach(key => {\n        if (!(key in options)) {\n          options[key] = extraOptions[key];\n        }\n      });\n    }\n    let signer = new DKIMSigner(options, this.keys, inputStream, output);\n    setImmediate(() => {\n      signer.signStream();\n      if (writeValue) {\n        setImmediate(() => {\n          inputStream.end(writeValue);\n        });\n      }\n    });\n    return output;\n  }\n}\nmodule.exports = DKIM;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}