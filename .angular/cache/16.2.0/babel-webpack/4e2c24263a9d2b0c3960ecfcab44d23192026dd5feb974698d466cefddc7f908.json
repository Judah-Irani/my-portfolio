{"ast":null,"code":"'use strict';\n\nvar fs = require('fs');\nvar qs = require('querystring');\nvar validate = require('har-validator');\nvar extend = require('extend');\nfunction Har(request) {\n  this.request = request;\n}\nHar.prototype.reducer = function (obj, pair) {\n  // new property ?\n  if (obj[pair.name] === undefined) {\n    obj[pair.name] = pair.value;\n    return obj;\n  }\n\n  // existing? convert to array\n  var arr = [obj[pair.name], pair.value];\n  obj[pair.name] = arr;\n  return obj;\n};\nHar.prototype.prep = function (data) {\n  // construct utility properties\n  data.queryObj = {};\n  data.headersObj = {};\n  data.postData.jsonObj = false;\n  data.postData.paramsObj = false;\n\n  // construct query objects\n  if (data.queryString && data.queryString.length) {\n    data.queryObj = data.queryString.reduce(this.reducer, {});\n  }\n\n  // construct headers objects\n  if (data.headers && data.headers.length) {\n    // loweCase header keys\n    data.headersObj = data.headers.reduceRight(function (headers, header) {\n      headers[header.name] = header.value;\n      return headers;\n    }, {});\n  }\n\n  // construct Cookie header\n  if (data.cookies && data.cookies.length) {\n    var cookies = data.cookies.map(function (cookie) {\n      return cookie.name + '=' + cookie.value;\n    });\n    if (cookies.length) {\n      data.headersObj.cookie = cookies.join('; ');\n    }\n  }\n\n  // prep body\n  function some(arr) {\n    return arr.some(function (type) {\n      return data.postData.mimeType.indexOf(type) === 0;\n    });\n  }\n  if (some(['multipart/mixed', 'multipart/related', 'multipart/form-data', 'multipart/alternative'])) {\n    // reset values\n    data.postData.mimeType = 'multipart/form-data';\n  } else if (some(['application/x-www-form-urlencoded'])) {\n    if (!data.postData.params) {\n      data.postData.text = '';\n    } else {\n      data.postData.paramsObj = data.postData.params.reduce(this.reducer, {});\n\n      // always overwrite\n      data.postData.text = qs.stringify(data.postData.paramsObj);\n    }\n  } else if (some(['text/json', 'text/x-json', 'application/json', 'application/x-json'])) {\n    data.postData.mimeType = 'application/json';\n    if (data.postData.text) {\n      try {\n        data.postData.jsonObj = JSON.parse(data.postData.text);\n      } catch (e) {\n        this.request.debug(e);\n\n        // force back to text/plain\n        data.postData.mimeType = 'text/plain';\n      }\n    }\n  }\n  return data;\n};\nHar.prototype.options = function (options) {\n  // skip if no har property defined\n  if (!options.har) {\n    return options;\n  }\n  var har = {};\n  extend(har, options.har);\n\n  // only process the first entry\n  if (har.log && har.log.entries) {\n    har = har.log.entries[0];\n  }\n\n  // add optional properties to make validation successful\n  har.url = har.url || options.url || options.uri || options.baseUrl || '/';\n  har.httpVersion = har.httpVersion || 'HTTP/1.1';\n  har.queryString = har.queryString || [];\n  har.headers = har.headers || [];\n  har.cookies = har.cookies || [];\n  har.postData = har.postData || {};\n  har.postData.mimeType = har.postData.mimeType || 'application/octet-stream';\n  har.bodySize = 0;\n  har.headersSize = 0;\n  har.postData.size = 0;\n  if (!validate.request(har)) {\n    return options;\n  }\n\n  // clean up and get some utility properties\n  var req = this.prep(har);\n\n  // construct new options\n  if (req.url) {\n    options.url = req.url;\n  }\n  if (req.method) {\n    options.method = req.method;\n  }\n  if (Object.keys(req.queryObj).length) {\n    options.qs = req.queryObj;\n  }\n  if (Object.keys(req.headersObj).length) {\n    options.headers = req.headersObj;\n  }\n  function test(type) {\n    return req.postData.mimeType.indexOf(type) === 0;\n  }\n  if (test('application/x-www-form-urlencoded')) {\n    options.form = req.postData.paramsObj;\n  } else if (test('application/json')) {\n    if (req.postData.jsonObj) {\n      options.body = req.postData.jsonObj;\n      options.json = true;\n    }\n  } else if (test('multipart/form-data')) {\n    options.formData = {};\n    req.postData.params.forEach(function (param) {\n      var attachment = {};\n      if (!param.fileName && !param.contentType) {\n        options.formData[param.name] = param.value;\n        return;\n      }\n\n      // attempt to read from disk!\n      if (param.fileName && !param.value) {\n        attachment.value = fs.createReadStream(param.fileName);\n      } else if (param.value) {\n        attachment.value = param.value;\n      }\n      if (param.fileName) {\n        attachment.options = {\n          filename: param.fileName,\n          contentType: param.contentType ? param.contentType : null\n        };\n      }\n      options.formData[param.name] = attachment;\n    });\n  } else {\n    if (req.postData.text) {\n      options.body = req.postData.text;\n    }\n  }\n  return options;\n};\nexports.Har = Har;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}