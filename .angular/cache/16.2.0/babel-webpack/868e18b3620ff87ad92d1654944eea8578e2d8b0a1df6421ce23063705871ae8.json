{"ast":null,"code":"'use strict';\n\nconst stream = require('stream');\nconst Transform = stream.Transform;\n\n/**\n * Escapes dots in the beginning of lines. Ends the stream with <CR><LF>.<CR><LF>\n * Also makes sure that only <CR><LF> sequences are used for linebreaks\n *\n * @param {Object} options Stream options\n */\nclass DataStream extends Transform {\n  constructor(options) {\n    super(options);\n    // init Transform\n    this.options = options || {};\n    this._curLine = '';\n    this.inByteCount = 0;\n    this.outByteCount = 0;\n    this.lastByte = false;\n  }\n\n  /**\n   * Escapes dots\n   */\n  _transform(chunk, encoding, done) {\n    let chunks = [];\n    let chunklen = 0;\n    let i,\n      len,\n      lastPos = 0;\n    let buf;\n    if (!chunk || !chunk.length) {\n      return done();\n    }\n    if (typeof chunk === 'string') {\n      chunk = Buffer.from(chunk);\n    }\n    this.inByteCount += chunk.length;\n    for (i = 0, len = chunk.length; i < len; i++) {\n      if (chunk[i] === 0x2e) {\n        // .\n        if (i && chunk[i - 1] === 0x0a || !i && (!this.lastByte || this.lastByte === 0x0a)) {\n          buf = chunk.slice(lastPos, i + 1);\n          chunks.push(buf);\n          chunks.push(Buffer.from('.'));\n          chunklen += buf.length + 1;\n          lastPos = i + 1;\n        }\n      } else if (chunk[i] === 0x0a) {\n        // .\n        if (i && chunk[i - 1] !== 0x0d || !i && this.lastByte !== 0x0d) {\n          if (i > lastPos) {\n            buf = chunk.slice(lastPos, i);\n            chunks.push(buf);\n            chunklen += buf.length + 2;\n          } else {\n            chunklen += 2;\n          }\n          chunks.push(Buffer.from('\\r\\n'));\n          lastPos = i + 1;\n        }\n      }\n    }\n    if (chunklen) {\n      // add last piece\n      if (lastPos < chunk.length) {\n        buf = chunk.slice(lastPos);\n        chunks.push(buf);\n        chunklen += buf.length;\n      }\n      this.outByteCount += chunklen;\n      this.push(Buffer.concat(chunks, chunklen));\n    } else {\n      this.outByteCount += chunk.length;\n      this.push(chunk);\n    }\n    this.lastByte = chunk[chunk.length - 1];\n    done();\n  }\n\n  /**\n   * Finalizes the stream with a dot on a single line\n   */\n  _flush(done) {\n    let buf;\n    if (this.lastByte === 0x0a) {\n      buf = Buffer.from('.\\r\\n');\n    } else if (this.lastByte === 0x0d) {\n      buf = Buffer.from('\\n.\\r\\n');\n    } else {\n      buf = Buffer.from('\\r\\n.\\r\\n');\n    }\n    this.outByteCount += buf.length;\n    this.push(buf);\n    done();\n  }\n}\nmodule.exports = DataStream;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}