{"ast":null,"code":"import { Directive, Input, Output, Inject, PLATFORM_ID, NgZone } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Subject, BehaviorSubject, Observable, defer } from 'rxjs';\nimport { filter, switchMap, takeUntil } from 'rxjs/operators';\nimport { AnimationLoader } from './animation-loader';\nexport class BaseDirective {\n  constructor(ngZone, platformId, animationLoader) {\n    this.ngZone = ngZone;\n    this.platformId = platformId;\n    this.animationLoader = animationLoader;\n    this.options = null;\n    this.containerClass = null;\n    this.styles = null;\n    /**\n     * `animationCreated` is dispatched after calling `loadAnimation`.\n     */\n    this.animationCreated = this.getAnimationItem();\n    /**\n     * `complete` is dispatched after completing the last frame.\n     */\n    this.complete = this.awaitAnimationItemAndStartListening('complete');\n    /**\n     * `loopComplete` is dispatched after completing the frame loop.\n     */\n    this.loopComplete = this.awaitAnimationItemAndStartListening('loopComplete');\n    /**\n     * `enterFrame` is dispatched after entering the new frame.\n     */\n    this.enterFrame = this.awaitAnimationItemAndStartListening('enterFrame');\n    /**\n     * `segmentStart` is dispatched when the new segment is adjusted.\n     */\n    this.segmentStart = this.awaitAnimationItemAndStartListening('segmentStart');\n    /**\n     * Original event name is `config_ready`. `config_ready` is dispatched\n     * after the needed renderer is configured.\n     */\n    this.configReady = this.awaitAnimationItemAndStartListening('config_ready');\n    /**\n     * Original event name is `data_ready`. `data_ready` is dispatched\n     * when all parts of the animation have been loaded.\n     */\n    this.dataReady = this.awaitAnimationItemAndStartListening('data_ready');\n    /**\n     * Original event name is `DOMLoaded`. `DOMLoaded` is dispatched\n     * when elements have been added to the DOM.\n     */\n    this.domLoaded = this.awaitAnimationItemAndStartListening('DOMLoaded');\n    /**\n     * `destroy` will be dispatched when the component gets destroyed,\n     * it's handy for releasing resources.\n     */\n    this.destroy = this.awaitAnimationItemAndStartListening('destroy');\n    /**\n     * `error` will be dispatched if the Lottie player could not render\n     * some frame or parse config.\n     */\n    this.error = this.awaitAnimationItemAndStartListening('error');\n    this.destroy$ = new Subject();\n    this.loadAnimation$ = new Subject();\n    this.animationItem$ = new BehaviorSubject(null);\n    this.setupLoadAnimationListener();\n  }\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroyAnimation();\n  }\n  loadAnimation(changes, container) {\n    this.loadAnimation$.next([changes, container]);\n  }\n  getAnimationItem() {\n    return defer(() => this.animationItem$).pipe(filter(animationItem => animationItem !== null));\n  }\n  awaitAnimationItemAndStartListening(name) {\n    return this.getAnimationItem().pipe(switchMap(animationItem =>\n    // `fromEvent` will try to call `removeEventListener` when `unsubscribe()` is invoked.\n    // The problem is that `ngOnDestroy()` is called before Angular unsubscribes from\n    // `@Output()` properties, thus `animationItem` will be `null` already, also `lottie-web`\n    // removes event listeners when calling `destroy()`.\n    new Observable(observer => {\n      animationItem.addEventListener(name, event => {\n        this.ngZone.runOutsideAngular(() => {\n          observer.next(event);\n        });\n      });\n    })));\n  }\n  setupLoadAnimationListener() {\n    this.loadAnimation$.pipe(filter(([changes]) => isPlatformBrowser(this.platformId) && changes.options !== undefined), switchMap(([changes, container]) => {\n      this.destroyAnimation();\n      return this.animationLoader.loadAnimation(this.animationLoader.resolveOptions(changes.options.currentValue, container));\n    }), takeUntil(this.destroy$)).subscribe(animationItem => {\n      this.animationItem$.next(animationItem);\n    });\n  }\n  destroyAnimation() {\n    const animationItem = this.animationItem$.getValue();\n    // The `ng-lottie` component or the `lottie` directive can be destroyed\n    // before the `animationItem` is set, thus it will fail with\n    // `Cannot read property 'destroy' of null`.\n    // Potentially it can happen if the directive gets destroyed before change\n    // detection is run.\n    if (animationItem === null) {\n      return;\n    }\n    // `destroy()` will remove all events listeners.\n    animationItem.destroy();\n    this.animationItem$.next(null);\n  }\n}\n\n/** @nocollapse */\n\n//# sourceMappingURL=base.directive.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}