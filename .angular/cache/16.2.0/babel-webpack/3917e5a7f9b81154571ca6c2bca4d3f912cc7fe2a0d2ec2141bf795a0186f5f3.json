{"ast":null,"code":"import { Observable, of } from 'rxjs';\nimport { map, startWith, distinctUntilChanged, first, scan, switchMap, debounceTime, shareReplay } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/scrolling\";\nexport function runInZone(zone) {\n  return source => {\n    return new Observable(observer => {\n      return source.subscribe(value => zone.run(() => observer.next(value)), e => zone.run(() => observer.error(e)), () => zone.run(() => observer.complete()));\n    });\n  };\n}\nlet AnimateService = /*#__PURE__*/(() => {\n  var _class;\n  class AnimateService {\n    get viewRect() {\n      return this.viewPort.getViewportRect();\n    }\n    constructor(scroll, viewPort, zone) {\n      this.scroll = scroll;\n      this.viewPort = viewPort;\n      this.zone = zone;\n      this.view$ = viewPort.change(100).pipe(startWith(null), map(() => this.viewRect), debounceTime(20), shareReplay(1));\n    }\n    trigger(elm, threshold) {\n      return source => this.zone.onStable.pipe(first(), switchMap(() => source), switchMap(trigger => threshold > 0 ? this.aos(elm, threshold) : of(trigger)));\n    }\n    aos(elm, threshold) {\n      return this.scroll.ancestorScrolled(elm, 0).pipe(startWith(0), switchMap(() => this.visibility(elm)), scan((result, visiblility) => visiblility >= threshold || result && visiblility > 0, false), distinctUntilChanged(), runInZone(this.zone));\n    }\n    visibility(elm) {\n      return this.view$.pipe(map(view => {\n        const rect = elm && elm.nativeElement && elm.nativeElement.getBoundingClientRect();\n        if (!rect) {\n          return 0;\n        }\n        if (rect.left > view.left - 1 && rect.top > view.top - 1 && rect.right < view.right + 1 && rect.bottom < view.bottom + 1) {\n          return 1;\n        }\n        const a = Math.round(rect.width * rect.height);\n        const b = Math.max(0, Math.min(rect.right, view.right) - Math.max(rect.left, view.left));\n        const c = Math.max(0, Math.min(rect.bottom, view.bottom) - Math.max(rect.top, view.top));\n        return Math.round(b * c / a * 10) / 10;\n      }));\n    }\n  }\n  _class = AnimateService;\n  _class.ɵfac = function AnimateService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.ScrollDispatcher), i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(i0.NgZone));\n  };\n  _class.ɵprov = i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac,\n    providedIn: 'root'\n  });\n  return AnimateService;\n})();\nexport { AnimateService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}