{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { Observable } from '../../utilities/index.js';\nvar OperationBatcher = function () {\n  function OperationBatcher(_a) {\n    var batchDebounce = _a.batchDebounce,\n      batchInterval = _a.batchInterval,\n      batchMax = _a.batchMax,\n      batchHandler = _a.batchHandler,\n      batchKey = _a.batchKey;\n    this.batchesByKey = new Map();\n    this.scheduledBatchTimerByKey = new Map();\n    this.batchDebounce = batchDebounce;\n    this.batchInterval = batchInterval;\n    this.batchMax = batchMax || 0;\n    this.batchHandler = batchHandler;\n    this.batchKey = batchKey || function () {\n      return '';\n    };\n  }\n  OperationBatcher.prototype.enqueueRequest = function (request) {\n    var _this = this;\n    var requestCopy = __assign(__assign({}, request), {\n      next: [],\n      error: [],\n      complete: [],\n      subscribers: new Set()\n    });\n    var key = this.batchKey(request.operation);\n    if (!requestCopy.observable) {\n      requestCopy.observable = new Observable(function (observer) {\n        var batch = _this.batchesByKey.get(key);\n        if (!batch) _this.batchesByKey.set(key, batch = new Set());\n        var isFirstEnqueuedRequest = batch.size === 0;\n        var isFirstSubscriber = requestCopy.subscribers.size === 0;\n        requestCopy.subscribers.add(observer);\n        if (isFirstSubscriber) {\n          batch.add(requestCopy);\n        }\n        if (observer.next) {\n          requestCopy.next.push(observer.next.bind(observer));\n        }\n        if (observer.error) {\n          requestCopy.error.push(observer.error.bind(observer));\n        }\n        if (observer.complete) {\n          requestCopy.complete.push(observer.complete.bind(observer));\n        }\n        if (isFirstEnqueuedRequest || _this.batchDebounce) {\n          _this.scheduleQueueConsumption(key);\n        }\n        if (batch.size === _this.batchMax) {\n          _this.consumeQueue(key);\n        }\n        return function () {\n          var _a;\n          if (requestCopy.subscribers.delete(observer) && requestCopy.subscribers.size < 1) {\n            if (batch.delete(requestCopy) && batch.size < 1) {\n              _this.consumeQueue(key);\n              (_a = batch.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n            }\n          }\n        };\n      });\n    }\n    return requestCopy.observable;\n  };\n  OperationBatcher.prototype.consumeQueue = function (key) {\n    if (key === void 0) {\n      key = '';\n    }\n    var batch = this.batchesByKey.get(key);\n    this.batchesByKey.delete(key);\n    if (!batch || !batch.size) {\n      return;\n    }\n    var operations = [];\n    var forwards = [];\n    var observables = [];\n    var nexts = [];\n    var errors = [];\n    var completes = [];\n    batch.forEach(function (request) {\n      operations.push(request.operation);\n      forwards.push(request.forward);\n      observables.push(request.observable);\n      nexts.push(request.next);\n      errors.push(request.error);\n      completes.push(request.complete);\n    });\n    var batchedObservable = this.batchHandler(operations, forwards) || Observable.of();\n    var onError = function (error) {\n      errors.forEach(function (rejecters) {\n        if (rejecters) {\n          rejecters.forEach(function (e) {\n            return e(error);\n          });\n        }\n      });\n    };\n    batch.subscription = batchedObservable.subscribe({\n      next: function (results) {\n        if (!Array.isArray(results)) {\n          results = [results];\n        }\n        if (nexts.length !== results.length) {\n          var error = new Error(\"server returned results with length \".concat(results.length, \", expected length of \").concat(nexts.length));\n          error.result = results;\n          return onError(error);\n        }\n        results.forEach(function (result, index) {\n          if (nexts[index]) {\n            nexts[index].forEach(function (next) {\n              return next(result);\n            });\n          }\n        });\n      },\n      error: onError,\n      complete: function () {\n        completes.forEach(function (complete) {\n          if (complete) {\n            complete.forEach(function (c) {\n              return c();\n            });\n          }\n        });\n      }\n    });\n    return observables;\n  };\n  OperationBatcher.prototype.scheduleQueueConsumption = function (key) {\n    var _this = this;\n    clearTimeout(this.scheduledBatchTimerByKey.get(key));\n    this.scheduledBatchTimerByKey.set(key, setTimeout(function () {\n      _this.consumeQueue(key);\n      _this.scheduledBatchTimerByKey.delete(key);\n    }, this.batchInterval));\n  };\n  return OperationBatcher;\n}();\nexport { OperationBatcher };\n//# sourceMappingURL=batching.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}