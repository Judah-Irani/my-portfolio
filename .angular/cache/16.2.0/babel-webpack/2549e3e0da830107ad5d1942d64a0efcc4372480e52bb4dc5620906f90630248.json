{"ast":null,"code":"// Copyright 2016 Joyent, Inc.\n\nvar x509 = require('./x509');\nmodule.exports = {\n  read: read,\n  verify: x509.verify,\n  sign: x509.sign,\n  write: write\n};\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\nvar Identity = require('../identity');\nvar Signature = require('../signature');\nvar Certificate = require('../certificate');\nfunction read(buf, options) {\n  if (typeof buf !== 'string') {\n    assert.buffer(buf, 'buf');\n    buf = buf.toString('ascii');\n  }\n  var lines = buf.trim().split(/[\\r\\n]+/g);\n  var m;\n  var si = -1;\n  while (!m && si < lines.length) {\n    m = lines[++si].match( /*JSSTYLED*/\n    /[-]+[ ]*BEGIN CERTIFICATE[ ]*[-]+/);\n  }\n  assert.ok(m, 'invalid PEM header');\n  var m2;\n  var ei = lines.length;\n  while (!m2 && ei > 0) {\n    m2 = lines[--ei].match( /*JSSTYLED*/\n    /[-]+[ ]*END CERTIFICATE[ ]*[-]+/);\n  }\n  assert.ok(m2, 'invalid PEM footer');\n  lines = lines.slice(si, ei + 1);\n  var headers = {};\n  while (true) {\n    lines = lines.slice(1);\n    m = lines[0].match( /*JSSTYLED*/\n    /^([A-Za-z0-9-]+): (.+)$/);\n    if (!m) break;\n    headers[m[1].toLowerCase()] = m[2];\n  }\n\n  /* Chop off the first and last lines */\n  lines = lines.slice(0, -1).join('');\n  buf = Buffer.from(lines, 'base64');\n  return x509.read(buf, options);\n}\nfunction write(cert, options) {\n  var dbuf = x509.write(cert, options);\n  var header = 'CERTIFICATE';\n  var tmp = dbuf.toString('base64');\n  var len = tmp.length + tmp.length / 64 + 18 + 16 + header.length * 2 + 10;\n  var buf = Buffer.alloc(len);\n  var o = 0;\n  o += buf.write('-----BEGIN ' + header + '-----\\n', o);\n  for (var i = 0; i < tmp.length;) {\n    var limit = i + 64;\n    if (limit > tmp.length) limit = tmp.length;\n    o += buf.write(tmp.slice(i, limit), o);\n    buf[o++] = 10;\n    i = limit;\n  }\n  o += buf.write('-----END ' + header + '-----\\n', o);\n  return buf.slice(0, o);\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}