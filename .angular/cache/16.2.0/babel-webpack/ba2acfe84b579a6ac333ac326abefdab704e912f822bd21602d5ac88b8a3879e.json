{"ast":null,"code":"import { Injectable, NgModule } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApolloLink, Observable } from 'apollo-link';\nimport { print } from 'graphql';\nimport { prioritize, mergeHeaders, fetch } from 'apollo-angular-link-http-common';\nimport { extractFiles } from 'extract-files';\n\n// XXX find a better name for it\nclass HttpLinkHandler extends ApolloLink {\n  constructor(httpClient, options) {\n    super();\n    this.httpClient = httpClient;\n    this.options = options;\n    this.requester = operation => new Observable(observer => {\n      const context = operation.getContext();\n      // decides which value to pick, Context, Options or to just use the default\n      const pick = (key, init) => {\n        return prioritize(context[key], this.options[key], init);\n      };\n      const includeQuery = pick('includeQuery', true);\n      const includeExtensions = pick('includeExtensions', false);\n      const method = pick('method', 'POST');\n      const url = pick('uri', 'graphql');\n      const withCredentials = pick('withCredentials');\n      const useMultipart = pick('useMultipart');\n      const req = {\n        method,\n        url: typeof url === 'function' ? url(operation) : url,\n        body: {\n          operationName: operation.operationName,\n          variables: operation.variables\n        },\n        options: {\n          withCredentials,\n          useMultipart,\n          headers: this.options.headers\n        }\n      };\n      if (includeExtensions) {\n        req.body.extensions = operation.extensions;\n      }\n      if (includeQuery) {\n        req.body.query = print(operation.query);\n      }\n      if (context.headers) {\n        req.options.headers = mergeHeaders(req.options.headers, context.headers);\n      }\n      const sub = fetch(req, this.httpClient, extractFiles).subscribe({\n        next: response => {\n          operation.setContext({\n            response\n          });\n          observer.next(response.body);\n        },\n        error: err => observer.error(err),\n        complete: () => observer.complete()\n      });\n      return () => {\n        if (!sub.closed) {\n          sub.unsubscribe();\n        }\n      };\n    });\n  }\n  request(op) {\n    return this.requester(op);\n  }\n}\nclass HttpLink {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  create(options) {\n    return new HttpLinkHandler(this.httpClient, options);\n  }\n}\nconst PROVIDERS = [HttpLink];\nclass HttpLinkModule {}\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HttpLink, HttpLinkHandler, HttpLinkModule, PROVIDERS };\n//# sourceMappingURL=ngApolloLinkHttp.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}