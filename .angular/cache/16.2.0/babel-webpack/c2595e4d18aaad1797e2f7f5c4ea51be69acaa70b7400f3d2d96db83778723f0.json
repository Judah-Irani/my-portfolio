{"ast":null,"code":"import { Injectable } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { AnimationLoader } from '../animation-loader';\nexport class CacheableAnimationLoader extends AnimationLoader {\n  constructor() {\n    super(...arguments);\n    this.cache = new Map();\n  }\n  loadAnimation(options) {\n    return this.player$.pipe(map(player => {\n      const animationItem = this.createAnimationItem(player, this.transformOptions(options));\n      this.awaitConfigAndCache(options, animationItem);\n      return animationItem;\n    }));\n  }\n  awaitConfigAndCache(options, animationItem) {\n    if (this.isAnimationConfigWithPath(options)) {\n      // Don't wait for the `config_ready` event if it has been cached previously.\n      if (this.cache.has(options.path)) {\n        return;\n      }\n      animationItem.addEventListener('config_ready', () => {\n        this.cache.set(options.path, animationItem['animationData']);\n      });\n    }\n  }\n  transformOptions(options) {\n    if (this.isAnimationConfigWithPath(options) && this.cache.has(options.path)) {\n      return Object.assign(Object.assign({}, options), {\n        path: undefined,\n        animationData: this.cache.get(options.path)\n      });\n    } else {\n      return options;\n    }\n  }\n  isAnimationConfigWithPath(options) {\n    return typeof options.path === 'string';\n  }\n}\n\n//# sourceMappingURL=cacheable-animation-loader.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}