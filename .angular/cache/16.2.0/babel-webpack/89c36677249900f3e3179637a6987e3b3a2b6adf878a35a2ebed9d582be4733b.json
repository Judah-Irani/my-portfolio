{"ast":null,"code":"'use strict';\n\nconst Mailer = require('./mailer');\nconst shared = require('./shared');\nconst SMTPPool = require('./smtp-pool');\nconst SMTPTransport = require('./smtp-transport');\nconst SendmailTransport = require('./sendmail-transport');\nconst StreamTransport = require('./stream-transport');\nconst JSONTransport = require('./json-transport');\nconst SESTransport = require('./ses-transport');\nconst nmfetch = require('./fetch');\nconst packageData = require('../package.json');\nconst ETHEREAL_API = (process.env.ETHEREAL_API || 'https://api.nodemailer.com').replace(/\\/+$/, '');\nconst ETHEREAL_WEB = (process.env.ETHEREAL_WEB || 'https://ethereal.email').replace(/\\/+$/, '');\nconst ETHEREAL_CACHE = ['true', 'yes', 'y', '1'].includes((process.env.ETHEREAL_CACHE || 'yes').toString().trim().toLowerCase());\nlet testAccount = false;\nmodule.exports.createTransport = function (transporter, defaults) {\n  let urlConfig;\n  let options;\n  let mailer;\n  if (\n  // provided transporter is a configuration object, not transporter plugin\n  typeof transporter === 'object' && typeof transporter.send !== 'function' ||\n  // provided transporter looks like a connection url\n  typeof transporter === 'string' && /^(smtps?|direct):/i.test(transporter)) {\n    if (urlConfig = typeof transporter === 'string' ? transporter : transporter.url) {\n      // parse a configuration URL into configuration options\n      options = shared.parseConnectionUrl(urlConfig);\n    } else {\n      options = transporter;\n    }\n    if (options.pool) {\n      transporter = new SMTPPool(options);\n    } else if (options.sendmail) {\n      transporter = new SendmailTransport(options);\n    } else if (options.streamTransport) {\n      transporter = new StreamTransport(options);\n    } else if (options.jsonTransport) {\n      transporter = new JSONTransport(options);\n    } else if (options.SES) {\n      transporter = new SESTransport(options);\n    } else {\n      transporter = new SMTPTransport(options);\n    }\n  }\n  mailer = new Mailer(transporter, options, defaults);\n  return mailer;\n};\nmodule.exports.createTestAccount = function (apiUrl, callback) {\n  let promise;\n  if (!callback && typeof apiUrl === 'function') {\n    callback = apiUrl;\n    apiUrl = false;\n  }\n  if (!callback) {\n    promise = new Promise((resolve, reject) => {\n      callback = shared.callbackPromise(resolve, reject);\n    });\n  }\n  if (ETHEREAL_CACHE && testAccount) {\n    setImmediate(() => callback(null, testAccount));\n    return promise;\n  }\n  apiUrl = apiUrl || ETHEREAL_API;\n  let chunks = [];\n  let chunklen = 0;\n  let req = nmfetch(apiUrl + '/user', {\n    contentType: 'application/json',\n    method: 'POST',\n    body: Buffer.from(JSON.stringify({\n      requestor: packageData.name,\n      version: packageData.version\n    }))\n  });\n  req.on('readable', () => {\n    let chunk;\n    while ((chunk = req.read()) !== null) {\n      chunks.push(chunk);\n      chunklen += chunk.length;\n    }\n  });\n  req.once('error', err => callback(err));\n  req.once('end', () => {\n    let res = Buffer.concat(chunks, chunklen);\n    let data;\n    let err;\n    try {\n      data = JSON.parse(res.toString());\n    } catch (E) {\n      err = E;\n    }\n    if (err) {\n      return callback(err);\n    }\n    if (data.status !== 'success' || data.error) {\n      return callback(new Error(data.error || 'Request failed'));\n    }\n    delete data.status;\n    testAccount = data;\n    callback(null, testAccount);\n  });\n  return promise;\n};\nmodule.exports.getTestMessageUrl = function (info) {\n  if (!info || !info.response) {\n    return false;\n  }\n  let infoProps = new Map();\n  info.response.replace(/\\[([^\\]]+)\\]$/, (m, props) => {\n    props.replace(/\\b([A-Z0-9]+)=([^\\s]+)/g, (m, key, value) => {\n      infoProps.set(key, value);\n    });\n  });\n  if (infoProps.has('STATUS') && infoProps.has('MSGID')) {\n    return (testAccount.web || ETHEREAL_WEB) + '/message/' + infoProps.get('MSGID');\n  }\n  return false;\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}