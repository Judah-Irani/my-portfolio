{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WhatsappCampaignsApi = exports.WhatsappCampaignsApiApiKeys = exports.WebhooksApi = exports.WebhooksApiApiKeys = exports.TransactionalSMSApi = exports.TransactionalSMSApiApiKeys = exports.TransactionalEmailsApi = exports.TransactionalEmailsApiApiKeys = exports.TasksApi = exports.TasksApiApiKeys = exports.SendersApi = exports.SendersApiApiKeys = exports.SMSCampaignsApi = exports.SMSCampaignsApiApiKeys = exports.ResellerApi = exports.ResellerApiApiKeys = exports.ProcessApi = exports.ProcessApiApiKeys = exports.NotesApi = exports.NotesApiApiKeys = exports.MasterAccountApi = exports.MasterAccountApiApiKeys = exports.InboundParsingApi = exports.InboundParsingApiApiKeys = exports.FilesApi = exports.FilesApiApiKeys = exports.EmailCampaignsApi = exports.EmailCampaignsApiApiKeys = exports.EcommerceApi = exports.EcommerceApiApiKeys = exports.DealsApi = exports.DealsApiApiKeys = exports.ConversationsApi = exports.ConversationsApiApiKeys = exports.ContactsApi = exports.ContactsApiApiKeys = exports.CompaniesApi = exports.CompaniesApiApiKeys = exports.AccountApi = exports.AccountApiApiKeys = exports.VoidAuth = exports.OAuth = exports.ApiKeyAuth = exports.HttpBasicAuth = exports.WhatsappCampTemplate = exports.WhatsappCampStats = exports.VariablesItems = exports.UploadImageToGallery = exports.UploadImageModel = exports.UpdateWebhook = exports.UpdateSmtpTemplateSender = exports.UpdateSmtpTemplate = exports.UpdateSmsCampaign = exports.UpdateSender = exports.UpdateList = exports.UpdateEmailCampaignSender = exports.UpdateEmailCampaignRecipients = exports.UpdateEmailCampaign = exports.UpdateContact = exports.UpdateChildDomain = exports.UpdateChildAccountStatus = exports.UpdateChild = exports.UpdateCampaignStatus = exports.UpdateBatchContactsModel = exports.UpdateBatchContactsContacts = exports.UpdateBatchContacts = exports.UpdateAttributeEnumeration = exports.UpdateAttribute = exports.TaskTypes = exports.TaskReminder = exports.TaskList = exports.Task = exports.SubAccountsResponseSubAccounts = exports.SubAccountsResponse = exports.SubAccountUpdatePlanRequestFeatures = exports.SubAccountUpdatePlanRequestCredits = exports.SubAccountUpdatePlanRequest = exports.SubAccountDetailsResponsePlanInfoFeaturesUsers = exports.SubAccountDetailsResponsePlanInfoFeaturesLandingPage = exports.SubAccountDetailsResponsePlanInfoFeaturesInbox = exports.SubAccountDetailsResponsePlanInfoFeatures = exports.SubAccountDetailsResponsePlanInfoCreditsEmails = exports.SubAccountDetailsResponsePlanInfoCredits = exports.SubAccountDetailsResponsePlanInfo = exports.SubAccountDetailsResponse = exports.SsoTokenRequest = exports.SendTransacSms = exports.SendTestSms = exports.SendTestEmail = exports.SendSmtpEmailTo1 = exports.SendSmtpEmailTo = exports.SendSmtpEmailSender = exports.SendSmtpEmailReplyTo1 = exports.SendSmtpEmailReplyTo = exports.SendSmtpEmailMessageVersions = exports.SendSmtpEmailCc = exports.SendSmtpEmailBcc = exports.SendSmtpEmailAttachment = exports.SendSmtpEmail = exports.SendSms = exports.SendReportEmail = exports.SendReport = exports.ScheduleSmtpEmail = exports.RequestSmsRecipientExport = exports.RequestContactImportNewList = exports.RequestContactImport = exports.RequestContactExportCustomContactFilter = exports.RequestContactExport = exports.RemoveCredits = exports.RemoveContactFromList = exports.RemainingCreditModelReseller = exports.RemainingCreditModelChild = exports.RemainingCreditModel = exports.PostSendSmsTestFailed = exports.PostSendFailed = exports.PostContactInfoContacts = exports.PostContactInfo = exports.PipelineStage = exports.Pipeline = exports.OrderProducts = exports.OrderBilling = exports.OrderBatch = exports.Order = exports.NoteList = exports.NoteId = exports.NoteData = exports.Note = exports.MasterDetailsResponsePlanInfoFeatures = exports.MasterDetailsResponsePlanInfo = exports.MasterDetailsResponseBillingInfoName = exports.MasterDetailsResponseBillingInfoAddress = exports.MasterDetailsResponseBillingInfo = exports.MasterDetailsResponse = exports.ManageIp = exports.InlineResponse2011 = exports.InlineResponse201 = exports.InlineResponse200 = exports.GetWhatsappCampaignOverview = exports.GetWebhooks = exports.GetWebhook = exports.GetTransacSmsReportReports = exports.GetTransacSmsReport = exports.GetTransacEmailsListTransactionalEmails = exports.GetTransacEmailsList = exports.GetTransacEmailContentEvents = exports.GetTransacEmailContent = exports.GetTransacBlockedContactsReason = exports.GetTransacBlockedContactsContacts = exports.GetTransacBlockedContacts = exports.GetTransacAggregatedSmsReport = exports.GetStatsByDomain = exports.GetStatsByDevice = exports.GetStatsByBrowser = exports.GetSsoToken = exports.GetSmtpTemplates = exports.GetSmtpTemplateOverviewSender = exports.GetSmtpTemplateOverview = exports.GetSmsEventReportEvents = exports.GetSmsEventReport = exports.GetSmsCampaigns = exports.GetSmsCampaignStats = exports.GetSmsCampaignRecipients = exports.GetSmsCampaign = exports.GetSmsCampaignOverview = exports.GetSharedTemplateUrl = exports.GetSendersListSenders = exports.GetSendersListIps = exports.GetSendersList = exports.GetScheduledEmailByMessageId = exports.GetScheduledEmailByBatchIdBatches = exports.GetScheduledEmailByBatchId = exports.GetReportsReports = exports.GetReports = exports.GetProducts = exports.GetProductDetails = exports.GetProcesses = exports.GetProcess = exports.GetLists = exports.GetExtendedList = exports.GetList = exports.GetIpsFromSender = exports.GetIps = exports.GetIpFromSender = exports.GetIp = exports.GetInboundEmailEventsEvents = exports.GetInboundEmailEventsByUuidLogs = exports.GetInboundEmailEventsByUuidAttachments = exports.GetInboundEmailEventsByUuid = exports.GetInboundEmailEvents = exports.GetFolders = exports.GetFolderLists = exports.GetFolder = exports.GetExtendedListCampaignStats = exports.GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription = exports.GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription = exports.GetExtendedContactDetailsStatisticsUnsubscriptions = exports.GetExtendedContactDetailsStatisticsOpened = exports.GetExtendedContactDetailsStatisticsMessagesSent = exports.GetExtendedContactDetailsStatisticsLinks = exports.GetExtendedContactDetailsStatisticsClicked = exports.GetExtendedContactDetailsStatistics = exports.GetExtendedContactDetails = exports.GetExtendedClientAddress = exports.GetAccount = exports.GetExtendedClient = exports.GetExtendedCampaignStatsGlobalStats = exports.GetExtendedCampaignStats = exports.GetExtendedCampaignOverviewSender = exports.GetEmailCampaign = exports.GetExtendedCampaignOverview = exports.GetEmailEventReportEvents = exports.GetEmailEventReport = exports.GetEmailCampaigns = exports.GetDeviceBrowserStats = exports.GetContacts = exports.GetContactDetails = exports.GetContactCampaignStatsUnsubscriptions = exports.GetContactCampaignStatsTransacAttributes = exports.GetContactCampaignStatsOpened = exports.GetContactCampaignStatsClicked = exports.GetContactCampaignStats = exports.GetChildInfo = exports.GetClient = exports.GetChildrenList = exports.GetChildInfoStatistics = exports.GetChildInfoCredits = exports.GetChildInfoApiKeysV3 = exports.GetChildInfoApiKeysV2 = exports.GetChildInfoApiKeys = exports.GetChildDomains = exports.GetChildDomain = exports.GetChildAccountCreationStatus = exports.GetCategoryDetails = exports.GetCategories = exports.GetCampaignStats = exports.GetCampaignRecipients = exports.GetCampaignOverview = exports.GetBlockedDomains = exports.GetAttributesEnumeration = exports.GetAttributesAttributes = exports.GetAttributes = exports.GetAggregatedReport = exports.GetAccountRelayData = exports.GetAccountRelay = exports.GetAccountPlan = exports.GetAccountMarketingAutomation = exports.FileList = exports.FileDownloadableLink = exports.FileData = exports.ErrorModel = exports.EmailExportRecipients = exports.DeleteHardbounces = exports.DealsList = exports.DealAttributesInner = exports.DealAttributes = exports.Deal = exports.CreatedProcessId = exports.CreatedBatchId = exports.CreateWebhook = exports.CreateUpdateProducts = exports.CreateUpdateProduct = exports.CreateUpdateFolder = exports.CreateUpdateContactModel = exports.CreateUpdateCategory = exports.CreateUpdateCategories = exports.CreateUpdateBatchProductsModel = exports.CreateUpdateBatchProducts = exports.CreateUpdateBatchCategoryModel = exports.CreateUpdateBatchCategory = exports.CreateSubAccountResponse = exports.CreateSubAccount = exports.CreateSmtpTemplateSender = exports.CreateSmtpTemplate = exports.CreateSmtpEmail = exports.CreateSmsCampaignRecipients = exports.CreateSmsCampaign = exports.CreateSenderModel = exports.CreateSenderIps = exports.CreateSender = exports.CreateReseller = exports.CreateProductModel = exports.CreateModel = exports.CreateList = exports.CreateEmailCampaignSender = exports.CreateEmailCampaignRecipients = exports.CreateEmailCampaign = exports.CreateDoiContact = exports.CreateContact = exports.CreateChild = exports.CreateCategoryModel = exports.CreateAttributeEnumeration = exports.CreateAttribute = exports.CreateApiKeyResponse = exports.CreateApiKeyRequest = exports.ConversationsMessageFileImageInfo = exports.ConversationsMessageFile = exports.ConversationsMessage = exports.ComponentItems = exports.CompanyAttributesInner = exports.CompanyAttributes = exports.Company = exports.CompaniesList = exports.BodyVariablesItems = exports.Body9 = exports.Body8 = exports.Body7 = exports.Body6 = exports.Body5 = exports.Body4 = exports.Body3 = exports.Body2 = exports.Body12 = exports.Body11 = exports.Body10 = exports.Body1 = exports.Body = exports.BlockDomain = exports.AddCredits = exports.AddContactToList = exports.AddChildDomain = exports.AbTestVersionStats = exports.AbTestVersionClicksInner = exports.AbTestVersionClicks = exports.AbTestCampaignResultStatistics = exports.AbTestCampaignResultClickedLinks = exports.AbTestCampaignResult = void 0;\nconst localVarRequest = require(\"request\");\nconst defaultBasePath = 'https://api.sendinblue.com/v3';\nconst version = '3.3.1';\nconst primitives = [\"string\", \"boolean\", \"double\", \"integer\", \"long\", \"float\", \"number\", \"any\"];\nclass ObjectSerializer {\n  static findCorrectType(data, expectedType) {\n    if (data == undefined) {\n      return expectedType;\n    } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {\n      return expectedType;\n    } else if (expectedType === \"Date\") {\n      return expectedType;\n    } else {\n      if (enumsMap[expectedType]) {\n        return expectedType;\n      }\n      if (!typeMap[expectedType]) {\n        return expectedType;\n      }\n      const discriminatorProperty = typeMap[expectedType].discriminator;\n      if (discriminatorProperty == null) {\n        return expectedType;\n      } else {\n        if (data[discriminatorProperty]) {\n          return data[discriminatorProperty];\n        } else {\n          return expectedType;\n        }\n      }\n    }\n  }\n  static serialize(data, type) {\n    if (data == undefined) {\n      return data;\n    } else if (primitives.indexOf(type.toLowerCase()) !== -1) {\n      return data;\n    } else if (type.lastIndexOf(\"Array<\", 0) === 0) {\n      let subType = type.replace(\"Array<\", \"\");\n      subType = subType.substring(0, subType.length - 1);\n      const transformedData = [];\n      for (const index in data) {\n        const date = data[index];\n        transformedData.push(ObjectSerializer.serialize(date, subType));\n      }\n      return transformedData;\n    } else if (type === \"Date\") {\n      return data.toString();\n    } else {\n      if (enumsMap[type]) {\n        return data;\n      }\n      if (!typeMap[type]) {\n        return data;\n      }\n      const attributeTypes = typeMap[type].getAttributeTypeMap();\n      const instance = {};\n      for (const index in attributeTypes) {\n        const attributeType = attributeTypes[index];\n        instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);\n      }\n      return instance;\n    }\n  }\n  static deserialize(data, type) {\n    type = ObjectSerializer.findCorrectType(data, type);\n    if (data == undefined) {\n      return data;\n    } else if (primitives.indexOf(type.toLowerCase()) !== -1) {\n      return data;\n    } else if (type.lastIndexOf(\"Array<\", 0) === 0) {\n      let subType = type.replace(\"Array<\", \"\");\n      subType = subType.substring(0, subType.length - 1);\n      const transformedData = [];\n      for (const index in data) {\n        const date = data[index];\n        transformedData.push(ObjectSerializer.deserialize(date, subType));\n      }\n      return transformedData;\n    } else if (type === \"Date\") {\n      return new Date(data);\n    } else {\n      if (enumsMap[type]) {\n        return data;\n      }\n      if (!typeMap[type]) {\n        return data;\n      }\n      const instance = new typeMap[type]();\n      const attributeTypes = typeMap[type].getAttributeTypeMap();\n      for (const index in attributeTypes) {\n        const attributeType = attributeTypes[index];\n        instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);\n      }\n      return instance;\n    }\n  }\n}\nclass AbTestCampaignResult {\n  static getAttributeTypeMap() {\n    return AbTestCampaignResult.attributeTypeMap;\n  }\n}\nexports.AbTestCampaignResult = AbTestCampaignResult;\nAbTestCampaignResult.discriminator = undefined;\nAbTestCampaignResult.attributeTypeMap = [{\n  \"name\": \"winningVersion\",\n  \"baseName\": \"winningVersion\",\n  \"type\": \"AbTestCampaignResult.WinningVersionEnum\"\n}, {\n  \"name\": \"winningCriteria\",\n  \"baseName\": \"winningCriteria\",\n  \"type\": \"AbTestCampaignResult.WinningCriteriaEnum\"\n}, {\n  \"name\": \"winningSubjectLine\",\n  \"baseName\": \"winningSubjectLine\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"openRate\",\n  \"baseName\": \"openRate\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"clickRate\",\n  \"baseName\": \"clickRate\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"winningVersionRate\",\n  \"baseName\": \"winningVersionRate\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"statistics\",\n  \"baseName\": \"statistics\",\n  \"type\": \"AbTestCampaignResultStatistics\"\n}, {\n  \"name\": \"clickedLinks\",\n  \"baseName\": \"clickedLinks\",\n  \"type\": \"AbTestCampaignResultClickedLinks\"\n}];\n(function (AbTestCampaignResult) {\n  let WinningVersionEnum;\n  (function (WinningVersionEnum) {\n    WinningVersionEnum[WinningVersionEnum[\"NotAvailable\"] = 'notAvailable'] = \"NotAvailable\";\n    WinningVersionEnum[WinningVersionEnum[\"Pending\"] = 'pending'] = \"Pending\";\n    WinningVersionEnum[WinningVersionEnum[\"Tie\"] = 'tie'] = \"Tie\";\n    WinningVersionEnum[WinningVersionEnum[\"A\"] = 'A'] = \"A\";\n    WinningVersionEnum[WinningVersionEnum[\"B\"] = 'B'] = \"B\";\n  })(WinningVersionEnum = AbTestCampaignResult.WinningVersionEnum || (AbTestCampaignResult.WinningVersionEnum = {}));\n  let WinningCriteriaEnum;\n  (function (WinningCriteriaEnum) {\n    WinningCriteriaEnum[WinningCriteriaEnum[\"Open\"] = 'Open'] = \"Open\";\n    WinningCriteriaEnum[WinningCriteriaEnum[\"Click\"] = 'Click'] = \"Click\";\n  })(WinningCriteriaEnum = AbTestCampaignResult.WinningCriteriaEnum || (AbTestCampaignResult.WinningCriteriaEnum = {}));\n})(AbTestCampaignResult = exports.AbTestCampaignResult || (exports.AbTestCampaignResult = {}));\nclass AbTestCampaignResultClickedLinks {\n  static getAttributeTypeMap() {\n    return AbTestCampaignResultClickedLinks.attributeTypeMap;\n  }\n}\nexports.AbTestCampaignResultClickedLinks = AbTestCampaignResultClickedLinks;\nAbTestCampaignResultClickedLinks.discriminator = undefined;\nAbTestCampaignResultClickedLinks.attributeTypeMap = [{\n  \"name\": \"versionA\",\n  \"baseName\": \"Version A\",\n  \"type\": \"AbTestVersionClicks\"\n}, {\n  \"name\": \"versionB\",\n  \"baseName\": \"Version B\",\n  \"type\": \"AbTestVersionClicks\"\n}];\nclass AbTestCampaignResultStatistics {\n  static getAttributeTypeMap() {\n    return AbTestCampaignResultStatistics.attributeTypeMap;\n  }\n}\nexports.AbTestCampaignResultStatistics = AbTestCampaignResultStatistics;\nAbTestCampaignResultStatistics.discriminator = undefined;\nAbTestCampaignResultStatistics.attributeTypeMap = [{\n  \"name\": \"openers\",\n  \"baseName\": \"openers\",\n  \"type\": \"AbTestVersionStats\"\n}, {\n  \"name\": \"clicks\",\n  \"baseName\": \"clicks\",\n  \"type\": \"AbTestVersionStats\"\n}, {\n  \"name\": \"unsubscribed\",\n  \"baseName\": \"unsubscribed\",\n  \"type\": \"AbTestVersionStats\"\n}, {\n  \"name\": \"hardBounces\",\n  \"baseName\": \"hardBounces\",\n  \"type\": \"AbTestVersionStats\"\n}, {\n  \"name\": \"softBounces\",\n  \"baseName\": \"softBounces\",\n  \"type\": \"AbTestVersionStats\"\n}, {\n  \"name\": \"complaints\",\n  \"baseName\": \"complaints\",\n  \"type\": \"AbTestVersionStats\"\n}];\nclass AbTestVersionClicks extends Array {}\nexports.AbTestVersionClicks = AbTestVersionClicks;\nAbTestVersionClicks.discriminator = undefined;\nclass AbTestVersionClicksInner {\n  static getAttributeTypeMap() {\n    return AbTestVersionClicksInner.attributeTypeMap;\n  }\n}\nexports.AbTestVersionClicksInner = AbTestVersionClicksInner;\nAbTestVersionClicksInner.discriminator = undefined;\nAbTestVersionClicksInner.attributeTypeMap = [{\n  \"name\": \"link\",\n  \"baseName\": \"link\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"clicksCount\",\n  \"baseName\": \"clicksCount\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"clickRate\",\n  \"baseName\": \"clickRate\",\n  \"type\": \"string\"\n}];\nclass AbTestVersionStats {\n  static getAttributeTypeMap() {\n    return AbTestVersionStats.attributeTypeMap;\n  }\n}\nexports.AbTestVersionStats = AbTestVersionStats;\nAbTestVersionStats.discriminator = undefined;\nAbTestVersionStats.attributeTypeMap = [{\n  \"name\": \"versionA\",\n  \"baseName\": \"Version A\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"versionB\",\n  \"baseName\": \"Version B\",\n  \"type\": \"string\"\n}];\nclass AddChildDomain {\n  static getAttributeTypeMap() {\n    return AddChildDomain.attributeTypeMap;\n  }\n}\nexports.AddChildDomain = AddChildDomain;\nAddChildDomain.discriminator = undefined;\nAddChildDomain.attributeTypeMap = [{\n  \"name\": \"domain\",\n  \"baseName\": \"domain\",\n  \"type\": \"string\"\n}];\nclass AddContactToList {\n  static getAttributeTypeMap() {\n    return AddContactToList.attributeTypeMap;\n  }\n}\nexports.AddContactToList = AddContactToList;\nAddContactToList.discriminator = undefined;\nAddContactToList.attributeTypeMap = [{\n  \"name\": \"emails\",\n  \"baseName\": \"emails\",\n  \"type\": \"Array<string>\"\n}, {\n  \"name\": \"ids\",\n  \"baseName\": \"ids\",\n  \"type\": \"Array<number>\"\n}];\nclass AddCredits {\n  static getAttributeTypeMap() {\n    return AddCredits.attributeTypeMap;\n  }\n}\nexports.AddCredits = AddCredits;\nAddCredits.discriminator = undefined;\nAddCredits.attributeTypeMap = [{\n  \"name\": \"sms\",\n  \"baseName\": \"sms\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"number\"\n}];\nclass BlockDomain {\n  static getAttributeTypeMap() {\n    return BlockDomain.attributeTypeMap;\n  }\n}\nexports.BlockDomain = BlockDomain;\nBlockDomain.discriminator = undefined;\nBlockDomain.attributeTypeMap = [{\n  \"name\": \"domain\",\n  \"baseName\": \"domain\",\n  \"type\": \"string\"\n}];\nclass Body {\n  static getAttributeTypeMap() {\n    return Body.attributeTypeMap;\n  }\n}\nexports.Body = Body;\nBody.discriminator = undefined;\nBody.attributeTypeMap = [{\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"attributes\",\n  \"baseName\": \"attributes\",\n  \"type\": \"any\"\n}, {\n  \"name\": \"countryCode\",\n  \"baseName\": \"countryCode\",\n  \"type\": \"number\"\n}];\nclass Body1 {\n  static getAttributeTypeMap() {\n    return Body1.attributeTypeMap;\n  }\n}\nexports.Body1 = Body1;\nBody1.discriminator = undefined;\nBody1.attributeTypeMap = [{\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"attributes\",\n  \"baseName\": \"attributes\",\n  \"type\": \"any\"\n}, {\n  \"name\": \"countryCode\",\n  \"baseName\": \"countryCode\",\n  \"type\": \"number\"\n}];\nclass Body10 {\n  static getAttributeTypeMap() {\n    return Body10.attributeTypeMap;\n  }\n}\nexports.Body10 = Body10;\nBody10.discriminator = undefined;\nBody10.attributeTypeMap = [{\n  \"name\": \"visitorId\",\n  \"baseName\": \"visitorId\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"text\",\n  \"baseName\": \"text\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"agentId\",\n  \"baseName\": \"agentId\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"groupId\",\n  \"baseName\": \"groupId\",\n  \"type\": \"string\"\n}];\nclass Body11 {\n  static getAttributeTypeMap() {\n    return Body11.attributeTypeMap;\n  }\n}\nexports.Body11 = Body11;\nBody11.discriminator = undefined;\nBody11.attributeTypeMap = [{\n  \"name\": \"text\",\n  \"baseName\": \"text\",\n  \"type\": \"string\"\n}];\nclass Body12 {\n  static getAttributeTypeMap() {\n    return Body12.attributeTypeMap;\n  }\n}\nexports.Body12 = Body12;\nBody12.discriminator = undefined;\nBody12.attributeTypeMap = [{\n  \"name\": \"agentId\",\n  \"baseName\": \"agentId\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"receivedFrom\",\n  \"baseName\": \"receivedFrom\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"agentEmail\",\n  \"baseName\": \"agentEmail\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"agentName\",\n  \"baseName\": \"agentName\",\n  \"type\": \"string\"\n}];\nclass Body2 {\n  static getAttributeTypeMap() {\n    return Body2.attributeTypeMap;\n  }\n}\nexports.Body2 = Body2;\nBody2.discriminator = undefined;\nBody2.attributeTypeMap = [{\n  \"name\": \"linkContactIds\",\n  \"baseName\": \"linkContactIds\",\n  \"type\": \"Array<number>\"\n}, {\n  \"name\": \"unlinkContactIds\",\n  \"baseName\": \"unlinkContactIds\",\n  \"type\": \"Array<number>\"\n}, {\n  \"name\": \"linkDealsIds\",\n  \"baseName\": \"linkDealsIds\",\n  \"type\": \"Array<string>\"\n}, {\n  \"name\": \"unlinkDealsIds\",\n  \"baseName\": \"unlinkDealsIds\",\n  \"type\": \"Array<string>\"\n}];\nclass Body3 {\n  static getAttributeTypeMap() {\n    return Body3.attributeTypeMap;\n  }\n}\nexports.Body3 = Body3;\nBody3.discriminator = undefined;\nBody3.attributeTypeMap = [{\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"attributes\",\n  \"baseName\": \"attributes\",\n  \"type\": \"any\"\n}];\nclass Body4 {\n  static getAttributeTypeMap() {\n    return Body4.attributeTypeMap;\n  }\n}\nexports.Body4 = Body4;\nBody4.discriminator = undefined;\nBody4.attributeTypeMap = [{\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"attributes\",\n  \"baseName\": \"attributes\",\n  \"type\": \"any\"\n}];\nclass Body5 {\n  static getAttributeTypeMap() {\n    return Body5.attributeTypeMap;\n  }\n}\nexports.Body5 = Body5;\nBody5.discriminator = undefined;\nBody5.attributeTypeMap = [{\n  \"name\": \"linkContactIds\",\n  \"baseName\": \"linkContactIds\",\n  \"type\": \"Array<number>\"\n}, {\n  \"name\": \"unlinkContactIds\",\n  \"baseName\": \"unlinkContactIds\",\n  \"type\": \"Array<number>\"\n}, {\n  \"name\": \"linkCompanyIds\",\n  \"baseName\": \"linkCompanyIds\",\n  \"type\": \"Array<string>\"\n}, {\n  \"name\": \"unlinkCompanyIds\",\n  \"baseName\": \"unlinkCompanyIds\",\n  \"type\": \"Array<string>\"\n}];\nclass Body6 {\n  static getAttributeTypeMap() {\n    return Body6.attributeTypeMap;\n  }\n}\nexports.Body6 = Body6;\nBody6.discriminator = undefined;\nBody6.attributeTypeMap = [{\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"duration\",\n  \"baseName\": \"duration\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"taskTypeId\",\n  \"baseName\": \"taskTypeId\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"date\",\n  \"baseName\": \"date\",\n  \"type\": \"Date\"\n}, {\n  \"name\": \"notes\",\n  \"baseName\": \"notes\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"done\",\n  \"baseName\": \"done\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"assignToId\",\n  \"baseName\": \"assignToId\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"contactsIds\",\n  \"baseName\": \"contactsIds\",\n  \"type\": \"Array<number>\"\n}, {\n  \"name\": \"dealsIds\",\n  \"baseName\": \"dealsIds\",\n  \"type\": \"Array<string>\"\n}, {\n  \"name\": \"companiesIds\",\n  \"baseName\": \"companiesIds\",\n  \"type\": \"Array<string>\"\n}, {\n  \"name\": \"reminder\",\n  \"baseName\": \"reminder\",\n  \"type\": \"TaskReminder\"\n}];\nclass Body7 {\n  static getAttributeTypeMap() {\n    return Body7.attributeTypeMap;\n  }\n}\nexports.Body7 = Body7;\nBody7.discriminator = undefined;\nBody7.attributeTypeMap = [{\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"duration\",\n  \"baseName\": \"duration\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"taskTypeId\",\n  \"baseName\": \"taskTypeId\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"date\",\n  \"baseName\": \"date\",\n  \"type\": \"Date\"\n}, {\n  \"name\": \"notes\",\n  \"baseName\": \"notes\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"done\",\n  \"baseName\": \"done\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"assignToId\",\n  \"baseName\": \"assignToId\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"contactsIds\",\n  \"baseName\": \"contactsIds\",\n  \"type\": \"Array<number>\"\n}, {\n  \"name\": \"dealsIds\",\n  \"baseName\": \"dealsIds\",\n  \"type\": \"Array<string>\"\n}, {\n  \"name\": \"companiesIds\",\n  \"baseName\": \"companiesIds\",\n  \"type\": \"Array<string>\"\n}];\nclass Body8 {\n  static getAttributeTypeMap() {\n    return Body8.attributeTypeMap;\n  }\n}\nexports.Body8 = Body8;\nBody8.discriminator = undefined;\nBody8.attributeTypeMap = [{\n  \"name\": \"visitorId\",\n  \"baseName\": \"visitorId\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"text\",\n  \"baseName\": \"text\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"agentId\",\n  \"baseName\": \"agentId\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"receivedFrom\",\n  \"baseName\": \"receivedFrom\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"agentEmail\",\n  \"baseName\": \"agentEmail\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"agentName\",\n  \"baseName\": \"agentName\",\n  \"type\": \"string\"\n}];\nclass Body9 {\n  static getAttributeTypeMap() {\n    return Body9.attributeTypeMap;\n  }\n}\nexports.Body9 = Body9;\nBody9.discriminator = undefined;\nBody9.attributeTypeMap = [{\n  \"name\": \"text\",\n  \"baseName\": \"text\",\n  \"type\": \"string\"\n}];\nclass BodyVariablesItems {\n  static getAttributeTypeMap() {\n    return BodyVariablesItems.attributeTypeMap;\n  }\n}\nexports.BodyVariablesItems = BodyVariablesItems;\nBodyVariablesItems.discriminator = undefined;\nBodyVariablesItems.attributeTypeMap = [];\nclass CompaniesList {\n  static getAttributeTypeMap() {\n    return CompaniesList.attributeTypeMap;\n  }\n}\nexports.CompaniesList = CompaniesList;\nCompaniesList.discriminator = undefined;\nCompaniesList.attributeTypeMap = [{\n  \"name\": \"items\",\n  \"baseName\": \"items\",\n  \"type\": \"Array<Company>\"\n}];\nclass Company {\n  static getAttributeTypeMap() {\n    return Company.attributeTypeMap;\n  }\n}\nexports.Company = Company;\nCompany.discriminator = undefined;\nCompany.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"attributes\",\n  \"baseName\": \"attributes\",\n  \"type\": \"any\"\n}, {\n  \"name\": \"linkedContactsIds\",\n  \"baseName\": \"linkedContactsIds\",\n  \"type\": \"Array<number>\"\n}, {\n  \"name\": \"linkedDealsIds\",\n  \"baseName\": \"linkedDealsIds\",\n  \"type\": \"Array<string>\"\n}];\nclass CompanyAttributes extends Array {}\nexports.CompanyAttributes = CompanyAttributes;\nCompanyAttributes.discriminator = undefined;\nclass CompanyAttributesInner {\n  static getAttributeTypeMap() {\n    return CompanyAttributesInner.attributeTypeMap;\n  }\n}\nexports.CompanyAttributesInner = CompanyAttributesInner;\nCompanyAttributesInner.discriminator = undefined;\nCompanyAttributesInner.attributeTypeMap = [{\n  \"name\": \"internalName\",\n  \"baseName\": \"internalName\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"label\",\n  \"baseName\": \"label\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"attributeTypeName\",\n  \"baseName\": \"attributeTypeName\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"attributeOptions\",\n  \"baseName\": \"attributeOptions\",\n  \"type\": \"Array<any>\"\n}, {\n  \"name\": \"isRequired\",\n  \"baseName\": \"isRequired\",\n  \"type\": \"boolean\"\n}];\nclass ComponentItems {\n  static getAttributeTypeMap() {\n    return ComponentItems.attributeTypeMap;\n  }\n}\nexports.ComponentItems = ComponentItems;\nComponentItems.discriminator = undefined;\nComponentItems.attributeTypeMap = [{\n  \"name\": \"type\",\n  \"baseName\": \"type\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"text\",\n  \"baseName\": \"text\",\n  \"type\": \"string\"\n}];\nclass ConversationsMessage {\n  static getAttributeTypeMap() {\n    return ConversationsMessage.attributeTypeMap;\n  }\n}\nexports.ConversationsMessage = ConversationsMessage;\nConversationsMessage.discriminator = undefined;\nConversationsMessage.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"type\",\n  \"baseName\": \"type\",\n  \"type\": \"ConversationsMessage.TypeEnum\"\n}, {\n  \"name\": \"text\",\n  \"baseName\": \"text\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"visitorId\",\n  \"baseName\": \"visitorId\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"agentId\",\n  \"baseName\": \"agentId\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"agentName\",\n  \"baseName\": \"agentName\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"createdAt\",\n  \"baseName\": \"createdAt\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"isPushed\",\n  \"baseName\": \"isPushed\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"receivedFrom\",\n  \"baseName\": \"receivedFrom\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"file\",\n  \"baseName\": \"file\",\n  \"type\": \"ConversationsMessageFile\"\n}];\n(function (ConversationsMessage) {\n  let TypeEnum;\n  (function (TypeEnum) {\n    TypeEnum[TypeEnum[\"Agent\"] = 'agent'] = \"Agent\";\n    TypeEnum[TypeEnum[\"Visitor\"] = 'visitor'] = \"Visitor\";\n  })(TypeEnum = ConversationsMessage.TypeEnum || (ConversationsMessage.TypeEnum = {}));\n})(ConversationsMessage = exports.ConversationsMessage || (exports.ConversationsMessage = {}));\nclass ConversationsMessageFile {\n  static getAttributeTypeMap() {\n    return ConversationsMessageFile.attributeTypeMap;\n  }\n}\nexports.ConversationsMessageFile = ConversationsMessageFile;\nConversationsMessageFile.discriminator = undefined;\nConversationsMessageFile.attributeTypeMap = [{\n  \"name\": \"filename\",\n  \"baseName\": \"filename\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"size\",\n  \"baseName\": \"size\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"isImage\",\n  \"baseName\": \"isImage\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"url\",\n  \"baseName\": \"url\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"imageInfo\",\n  \"baseName\": \"imageInfo\",\n  \"type\": \"ConversationsMessageFileImageInfo\"\n}];\nclass ConversationsMessageFileImageInfo {\n  static getAttributeTypeMap() {\n    return ConversationsMessageFileImageInfo.attributeTypeMap;\n  }\n}\nexports.ConversationsMessageFileImageInfo = ConversationsMessageFileImageInfo;\nConversationsMessageFileImageInfo.discriminator = undefined;\nConversationsMessageFileImageInfo.attributeTypeMap = [{\n  \"name\": \"width\",\n  \"baseName\": \"width\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"height\",\n  \"baseName\": \"height\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"previewUrl\",\n  \"baseName\": \"previewUrl\",\n  \"type\": \"string\"\n}];\nclass CreateApiKeyRequest {\n  static getAttributeTypeMap() {\n    return CreateApiKeyRequest.attributeTypeMap;\n  }\n}\nexports.CreateApiKeyRequest = CreateApiKeyRequest;\nCreateApiKeyRequest.discriminator = undefined;\nCreateApiKeyRequest.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}];\nclass CreateApiKeyResponse {\n  static getAttributeTypeMap() {\n    return CreateApiKeyResponse.attributeTypeMap;\n  }\n}\nexports.CreateApiKeyResponse = CreateApiKeyResponse;\nCreateApiKeyResponse.discriminator = undefined;\nCreateApiKeyResponse.attributeTypeMap = [{\n  \"name\": \"status\",\n  \"baseName\": \"status\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"key\",\n  \"baseName\": \"key\",\n  \"type\": \"string\"\n}];\nclass CreateAttribute {\n  static getAttributeTypeMap() {\n    return CreateAttribute.attributeTypeMap;\n  }\n}\nexports.CreateAttribute = CreateAttribute;\nCreateAttribute.discriminator = undefined;\nCreateAttribute.attributeTypeMap = [{\n  \"name\": \"value\",\n  \"baseName\": \"value\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"isRecurring\",\n  \"baseName\": \"isRecurring\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"enumeration\",\n  \"baseName\": \"enumeration\",\n  \"type\": \"Array<CreateAttributeEnumeration>\"\n}, {\n  \"name\": \"type\",\n  \"baseName\": \"type\",\n  \"type\": \"CreateAttribute.TypeEnum\"\n}];\n(function (CreateAttribute) {\n  let TypeEnum;\n  (function (TypeEnum) {\n    TypeEnum[TypeEnum[\"Text\"] = 'text'] = \"Text\";\n    TypeEnum[TypeEnum[\"Date\"] = 'date'] = \"Date\";\n    TypeEnum[TypeEnum[\"Float\"] = 'float'] = \"Float\";\n    TypeEnum[TypeEnum[\"Boolean\"] = 'boolean'] = \"Boolean\";\n    TypeEnum[TypeEnum[\"Id\"] = 'id'] = \"Id\";\n    TypeEnum[TypeEnum[\"Category\"] = 'category'] = \"Category\";\n  })(TypeEnum = CreateAttribute.TypeEnum || (CreateAttribute.TypeEnum = {}));\n})(CreateAttribute = exports.CreateAttribute || (exports.CreateAttribute = {}));\nclass CreateAttributeEnumeration {\n  static getAttributeTypeMap() {\n    return CreateAttributeEnumeration.attributeTypeMap;\n  }\n}\nexports.CreateAttributeEnumeration = CreateAttributeEnumeration;\nCreateAttributeEnumeration.discriminator = undefined;\nCreateAttributeEnumeration.attributeTypeMap = [{\n  \"name\": \"value\",\n  \"baseName\": \"value\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"label\",\n  \"baseName\": \"label\",\n  \"type\": \"string\"\n}];\nclass CreateCategoryModel {\n  static getAttributeTypeMap() {\n    return CreateCategoryModel.attributeTypeMap;\n  }\n}\nexports.CreateCategoryModel = CreateCategoryModel;\nCreateCategoryModel.discriminator = undefined;\nCreateCategoryModel.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"number\"\n}];\nclass CreateChild {\n  static getAttributeTypeMap() {\n    return CreateChild.attributeTypeMap;\n  }\n}\nexports.CreateChild = CreateChild;\nCreateChild.discriminator = undefined;\nCreateChild.attributeTypeMap = [{\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"firstName\",\n  \"baseName\": \"firstName\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"lastName\",\n  \"baseName\": \"lastName\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"companyName\",\n  \"baseName\": \"companyName\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"password\",\n  \"baseName\": \"password\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"language\",\n  \"baseName\": \"language\",\n  \"type\": \"CreateChild.LanguageEnum\"\n}];\n(function (CreateChild) {\n  let LanguageEnum;\n  (function (LanguageEnum) {\n    LanguageEnum[LanguageEnum[\"Fr\"] = 'fr'] = \"Fr\";\n    LanguageEnum[LanguageEnum[\"Es\"] = 'es'] = \"Es\";\n    LanguageEnum[LanguageEnum[\"Pt\"] = 'pt'] = \"Pt\";\n    LanguageEnum[LanguageEnum[\"It\"] = 'it'] = \"It\";\n    LanguageEnum[LanguageEnum[\"De\"] = 'de'] = \"De\";\n    LanguageEnum[LanguageEnum[\"En\"] = 'en'] = \"En\";\n  })(LanguageEnum = CreateChild.LanguageEnum || (CreateChild.LanguageEnum = {}));\n})(CreateChild = exports.CreateChild || (exports.CreateChild = {}));\nclass CreateContact {\n  static getAttributeTypeMap() {\n    return CreateContact.attributeTypeMap;\n  }\n}\nexports.CreateContact = CreateContact;\nCreateContact.discriminator = undefined;\nCreateContact.attributeTypeMap = [{\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"attributes\",\n  \"baseName\": \"attributes\",\n  \"type\": \"any\"\n}, {\n  \"name\": \"emailBlacklisted\",\n  \"baseName\": \"emailBlacklisted\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"smsBlacklisted\",\n  \"baseName\": \"smsBlacklisted\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"listIds\",\n  \"baseName\": \"listIds\",\n  \"type\": \"Array<number>\"\n}, {\n  \"name\": \"updateEnabled\",\n  \"baseName\": \"updateEnabled\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"smtpBlacklistSender\",\n  \"baseName\": \"smtpBlacklistSender\",\n  \"type\": \"Array<string>\"\n}];\nclass CreateDoiContact {\n  static getAttributeTypeMap() {\n    return CreateDoiContact.attributeTypeMap;\n  }\n}\nexports.CreateDoiContact = CreateDoiContact;\nCreateDoiContact.discriminator = undefined;\nCreateDoiContact.attributeTypeMap = [{\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"attributes\",\n  \"baseName\": \"attributes\",\n  \"type\": \"any\"\n}, {\n  \"name\": \"includeListIds\",\n  \"baseName\": \"includeListIds\",\n  \"type\": \"Array<number>\"\n}, {\n  \"name\": \"excludeListIds\",\n  \"baseName\": \"excludeListIds\",\n  \"type\": \"Array<number>\"\n}, {\n  \"name\": \"templateId\",\n  \"baseName\": \"templateId\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"redirectionUrl\",\n  \"baseName\": \"redirectionUrl\",\n  \"type\": \"string\"\n}];\nclass CreateEmailCampaign {\n  static getAttributeTypeMap() {\n    return CreateEmailCampaign.attributeTypeMap;\n  }\n}\nexports.CreateEmailCampaign = CreateEmailCampaign;\nCreateEmailCampaign.discriminator = undefined;\nCreateEmailCampaign.attributeTypeMap = [{\n  \"name\": \"tag\",\n  \"baseName\": \"tag\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"sender\",\n  \"baseName\": \"sender\",\n  \"type\": \"CreateEmailCampaignSender\"\n}, {\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"htmlContent\",\n  \"baseName\": \"htmlContent\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"htmlUrl\",\n  \"baseName\": \"htmlUrl\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"templateId\",\n  \"baseName\": \"templateId\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"scheduledAt\",\n  \"baseName\": \"scheduledAt\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"subject\",\n  \"baseName\": \"subject\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"replyTo\",\n  \"baseName\": \"replyTo\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"toField\",\n  \"baseName\": \"toField\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"recipients\",\n  \"baseName\": \"recipients\",\n  \"type\": \"CreateEmailCampaignRecipients\"\n}, {\n  \"name\": \"attachmentUrl\",\n  \"baseName\": \"attachmentUrl\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"inlineImageActivation\",\n  \"baseName\": \"inlineImageActivation\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"mirrorActive\",\n  \"baseName\": \"mirrorActive\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"footer\",\n  \"baseName\": \"footer\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"header\",\n  \"baseName\": \"header\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"utmCampaign\",\n  \"baseName\": \"utmCampaign\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"params\",\n  \"baseName\": \"params\",\n  \"type\": \"any\"\n}, {\n  \"name\": \"sendAtBestTime\",\n  \"baseName\": \"sendAtBestTime\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"abTesting\",\n  \"baseName\": \"abTesting\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"subjectA\",\n  \"baseName\": \"subjectA\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"subjectB\",\n  \"baseName\": \"subjectB\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"splitRule\",\n  \"baseName\": \"splitRule\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"winnerCriteria\",\n  \"baseName\": \"winnerCriteria\",\n  \"type\": \"CreateEmailCampaign.WinnerCriteriaEnum\"\n}, {\n  \"name\": \"winnerDelay\",\n  \"baseName\": \"winnerDelay\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"ipWarmupEnable\",\n  \"baseName\": \"ipWarmupEnable\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"initialQuota\",\n  \"baseName\": \"initialQuota\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"increaseRate\",\n  \"baseName\": \"increaseRate\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"unsubscriptionPageId\",\n  \"baseName\": \"unsubscriptionPageId\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"updateFormId\",\n  \"baseName\": \"updateFormId\",\n  \"type\": \"string\"\n}];\n(function (CreateEmailCampaign) {\n  let WinnerCriteriaEnum;\n  (function (WinnerCriteriaEnum) {\n    WinnerCriteriaEnum[WinnerCriteriaEnum[\"Open\"] = 'open'] = \"Open\";\n    WinnerCriteriaEnum[WinnerCriteriaEnum[\"Click\"] = 'click'] = \"Click\";\n  })(WinnerCriteriaEnum = CreateEmailCampaign.WinnerCriteriaEnum || (CreateEmailCampaign.WinnerCriteriaEnum = {}));\n})(CreateEmailCampaign = exports.CreateEmailCampaign || (exports.CreateEmailCampaign = {}));\nclass CreateEmailCampaignRecipients {\n  static getAttributeTypeMap() {\n    return CreateEmailCampaignRecipients.attributeTypeMap;\n  }\n}\nexports.CreateEmailCampaignRecipients = CreateEmailCampaignRecipients;\nCreateEmailCampaignRecipients.discriminator = undefined;\nCreateEmailCampaignRecipients.attributeTypeMap = [{\n  \"name\": \"exclusionListIds\",\n  \"baseName\": \"exclusionListIds\",\n  \"type\": \"Array<number>\"\n}, {\n  \"name\": \"listIds\",\n  \"baseName\": \"listIds\",\n  \"type\": \"Array<number>\"\n}, {\n  \"name\": \"segmentIds\",\n  \"baseName\": \"segmentIds\",\n  \"type\": \"Array<number>\"\n}];\nclass CreateEmailCampaignSender {\n  static getAttributeTypeMap() {\n    return CreateEmailCampaignSender.attributeTypeMap;\n  }\n}\nexports.CreateEmailCampaignSender = CreateEmailCampaignSender;\nCreateEmailCampaignSender.discriminator = undefined;\nCreateEmailCampaignSender.attributeTypeMap = [{\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"number\"\n}];\nclass CreateList {\n  static getAttributeTypeMap() {\n    return CreateList.attributeTypeMap;\n  }\n}\nexports.CreateList = CreateList;\nCreateList.discriminator = undefined;\nCreateList.attributeTypeMap = [{\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"folderId\",\n  \"baseName\": \"folderId\",\n  \"type\": \"number\"\n}];\nclass CreateModel {\n  static getAttributeTypeMap() {\n    return CreateModel.attributeTypeMap;\n  }\n}\nexports.CreateModel = CreateModel;\nCreateModel.discriminator = undefined;\nCreateModel.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"number\"\n}];\nclass CreateProductModel {\n  static getAttributeTypeMap() {\n    return CreateProductModel.attributeTypeMap;\n  }\n}\nexports.CreateProductModel = CreateProductModel;\nCreateProductModel.discriminator = undefined;\nCreateProductModel.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"number\"\n}];\nclass CreateReseller {\n  static getAttributeTypeMap() {\n    return CreateReseller.attributeTypeMap;\n  }\n}\nexports.CreateReseller = CreateReseller;\nCreateReseller.discriminator = undefined;\nCreateReseller.attributeTypeMap = [{\n  \"name\": \"authKey\",\n  \"baseName\": \"authKey\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"number\"\n}];\nclass CreateSender {\n  static getAttributeTypeMap() {\n    return CreateSender.attributeTypeMap;\n  }\n}\nexports.CreateSender = CreateSender;\nCreateSender.discriminator = undefined;\nCreateSender.attributeTypeMap = [{\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"ips\",\n  \"baseName\": \"ips\",\n  \"type\": \"Array<CreateSenderIps>\"\n}];\nclass CreateSenderIps {\n  static getAttributeTypeMap() {\n    return CreateSenderIps.attributeTypeMap;\n  }\n}\nexports.CreateSenderIps = CreateSenderIps;\nCreateSenderIps.discriminator = undefined;\nCreateSenderIps.attributeTypeMap = [{\n  \"name\": \"ip\",\n  \"baseName\": \"ip\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"domain\",\n  \"baseName\": \"domain\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"weight\",\n  \"baseName\": \"weight\",\n  \"type\": \"number\"\n}];\nclass CreateSenderModel {\n  static getAttributeTypeMap() {\n    return CreateSenderModel.attributeTypeMap;\n  }\n}\nexports.CreateSenderModel = CreateSenderModel;\nCreateSenderModel.discriminator = undefined;\nCreateSenderModel.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"spfError\",\n  \"baseName\": \"spfError\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"dkimError\",\n  \"baseName\": \"dkimError\",\n  \"type\": \"boolean\"\n}];\nclass CreateSmsCampaign {\n  static getAttributeTypeMap() {\n    return CreateSmsCampaign.attributeTypeMap;\n  }\n}\nexports.CreateSmsCampaign = CreateSmsCampaign;\nCreateSmsCampaign.discriminator = undefined;\nCreateSmsCampaign.attributeTypeMap = [{\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"sender\",\n  \"baseName\": \"sender\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"content\",\n  \"baseName\": \"content\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"recipients\",\n  \"baseName\": \"recipients\",\n  \"type\": \"CreateSmsCampaignRecipients\"\n}, {\n  \"name\": \"scheduledAt\",\n  \"baseName\": \"scheduledAt\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"unicodeEnabled\",\n  \"baseName\": \"unicodeEnabled\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"organisationPrefix\",\n  \"baseName\": \"organisationPrefix\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"unsubscribeInstruction\",\n  \"baseName\": \"unsubscribeInstruction\",\n  \"type\": \"string\"\n}];\nclass CreateSmsCampaignRecipients {\n  static getAttributeTypeMap() {\n    return CreateSmsCampaignRecipients.attributeTypeMap;\n  }\n}\nexports.CreateSmsCampaignRecipients = CreateSmsCampaignRecipients;\nCreateSmsCampaignRecipients.discriminator = undefined;\nCreateSmsCampaignRecipients.attributeTypeMap = [{\n  \"name\": \"listIds\",\n  \"baseName\": \"listIds\",\n  \"type\": \"Array<number>\"\n}, {\n  \"name\": \"exclusionListIds\",\n  \"baseName\": \"exclusionListIds\",\n  \"type\": \"Array<number>\"\n}];\nclass CreateSmtpEmail {\n  static getAttributeTypeMap() {\n    return CreateSmtpEmail.attributeTypeMap;\n  }\n}\nexports.CreateSmtpEmail = CreateSmtpEmail;\nCreateSmtpEmail.discriminator = undefined;\nCreateSmtpEmail.attributeTypeMap = [{\n  \"name\": \"messageId\",\n  \"baseName\": \"messageId\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"messageIds\",\n  \"baseName\": \"messageIds\",\n  \"type\": \"Array<string>\"\n}];\nclass CreateSmtpTemplate {\n  static getAttributeTypeMap() {\n    return CreateSmtpTemplate.attributeTypeMap;\n  }\n}\nexports.CreateSmtpTemplate = CreateSmtpTemplate;\nCreateSmtpTemplate.discriminator = undefined;\nCreateSmtpTemplate.attributeTypeMap = [{\n  \"name\": \"tag\",\n  \"baseName\": \"tag\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"sender\",\n  \"baseName\": \"sender\",\n  \"type\": \"CreateSmtpTemplateSender\"\n}, {\n  \"name\": \"templateName\",\n  \"baseName\": \"templateName\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"htmlContent\",\n  \"baseName\": \"htmlContent\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"htmlUrl\",\n  \"baseName\": \"htmlUrl\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"subject\",\n  \"baseName\": \"subject\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"replyTo\",\n  \"baseName\": \"replyTo\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"toField\",\n  \"baseName\": \"toField\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"attachmentUrl\",\n  \"baseName\": \"attachmentUrl\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"isActive\",\n  \"baseName\": \"isActive\",\n  \"type\": \"boolean\"\n}];\nclass CreateSmtpTemplateSender {\n  static getAttributeTypeMap() {\n    return CreateSmtpTemplateSender.attributeTypeMap;\n  }\n}\nexports.CreateSmtpTemplateSender = CreateSmtpTemplateSender;\nCreateSmtpTemplateSender.discriminator = undefined;\nCreateSmtpTemplateSender.attributeTypeMap = [{\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"number\"\n}];\nclass CreateSubAccount {\n  static getAttributeTypeMap() {\n    return CreateSubAccount.attributeTypeMap;\n  }\n}\nexports.CreateSubAccount = CreateSubAccount;\nCreateSubAccount.discriminator = undefined;\nCreateSubAccount.attributeTypeMap = [{\n  \"name\": \"companyName\",\n  \"baseName\": \"companyName\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"language\",\n  \"baseName\": \"language\",\n  \"type\": \"CreateSubAccount.LanguageEnum\"\n}, {\n  \"name\": \"timezone\",\n  \"baseName\": \"timezone\",\n  \"type\": \"string\"\n}];\n(function (CreateSubAccount) {\n  let LanguageEnum;\n  (function (LanguageEnum) {\n    LanguageEnum[LanguageEnum[\"En\"] = 'en'] = \"En\";\n    LanguageEnum[LanguageEnum[\"Fr\"] = 'fr'] = \"Fr\";\n    LanguageEnum[LanguageEnum[\"It\"] = 'it'] = \"It\";\n    LanguageEnum[LanguageEnum[\"Es\"] = 'es'] = \"Es\";\n    LanguageEnum[LanguageEnum[\"Pt\"] = 'pt'] = \"Pt\";\n    LanguageEnum[LanguageEnum[\"De\"] = 'de'] = \"De\";\n  })(LanguageEnum = CreateSubAccount.LanguageEnum || (CreateSubAccount.LanguageEnum = {}));\n})(CreateSubAccount = exports.CreateSubAccount || (exports.CreateSubAccount = {}));\nclass CreateSubAccountResponse {\n  static getAttributeTypeMap() {\n    return CreateSubAccountResponse.attributeTypeMap;\n  }\n}\nexports.CreateSubAccountResponse = CreateSubAccountResponse;\nCreateSubAccountResponse.discriminator = undefined;\nCreateSubAccountResponse.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"number\"\n}];\nclass CreateUpdateBatchCategory {\n  static getAttributeTypeMap() {\n    return CreateUpdateBatchCategory.attributeTypeMap;\n  }\n}\nexports.CreateUpdateBatchCategory = CreateUpdateBatchCategory;\nCreateUpdateBatchCategory.discriminator = undefined;\nCreateUpdateBatchCategory.attributeTypeMap = [{\n  \"name\": \"categories\",\n  \"baseName\": \"categories\",\n  \"type\": \"Array<CreateUpdateCategories>\"\n}, {\n  \"name\": \"updateEnabled\",\n  \"baseName\": \"updateEnabled\",\n  \"type\": \"boolean\"\n}];\nclass CreateUpdateBatchCategoryModel {\n  static getAttributeTypeMap() {\n    return CreateUpdateBatchCategoryModel.attributeTypeMap;\n  }\n}\nexports.CreateUpdateBatchCategoryModel = CreateUpdateBatchCategoryModel;\nCreateUpdateBatchCategoryModel.discriminator = undefined;\nCreateUpdateBatchCategoryModel.attributeTypeMap = [{\n  \"name\": \"createdCount\",\n  \"baseName\": \"createdCount\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"updatedCount\",\n  \"baseName\": \"updatedCount\",\n  \"type\": \"number\"\n}];\nclass CreateUpdateBatchProducts {\n  static getAttributeTypeMap() {\n    return CreateUpdateBatchProducts.attributeTypeMap;\n  }\n}\nexports.CreateUpdateBatchProducts = CreateUpdateBatchProducts;\nCreateUpdateBatchProducts.discriminator = undefined;\nCreateUpdateBatchProducts.attributeTypeMap = [{\n  \"name\": \"products\",\n  \"baseName\": \"products\",\n  \"type\": \"Array<CreateUpdateProducts>\"\n}, {\n  \"name\": \"updateEnabled\",\n  \"baseName\": \"updateEnabled\",\n  \"type\": \"boolean\"\n}];\nclass CreateUpdateBatchProductsModel {\n  static getAttributeTypeMap() {\n    return CreateUpdateBatchProductsModel.attributeTypeMap;\n  }\n}\nexports.CreateUpdateBatchProductsModel = CreateUpdateBatchProductsModel;\nCreateUpdateBatchProductsModel.discriminator = undefined;\nCreateUpdateBatchProductsModel.attributeTypeMap = [{\n  \"name\": \"createdCount\",\n  \"baseName\": \"createdCount\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"updatedCount\",\n  \"baseName\": \"updatedCount\",\n  \"type\": \"number\"\n}];\nclass CreateUpdateCategories {\n  static getAttributeTypeMap() {\n    return CreateUpdateCategories.attributeTypeMap;\n  }\n}\nexports.CreateUpdateCategories = CreateUpdateCategories;\nCreateUpdateCategories.discriminator = undefined;\nCreateUpdateCategories.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"url\",\n  \"baseName\": \"url\",\n  \"type\": \"string\"\n}];\nclass CreateUpdateCategory {\n  static getAttributeTypeMap() {\n    return CreateUpdateCategory.attributeTypeMap;\n  }\n}\nexports.CreateUpdateCategory = CreateUpdateCategory;\nCreateUpdateCategory.discriminator = undefined;\nCreateUpdateCategory.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"url\",\n  \"baseName\": \"url\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"updateEnabled\",\n  \"baseName\": \"updateEnabled\",\n  \"type\": \"boolean\"\n}];\nclass CreateUpdateContactModel {\n  static getAttributeTypeMap() {\n    return CreateUpdateContactModel.attributeTypeMap;\n  }\n}\nexports.CreateUpdateContactModel = CreateUpdateContactModel;\nCreateUpdateContactModel.discriminator = undefined;\nCreateUpdateContactModel.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"number\"\n}];\nclass CreateUpdateFolder {\n  static getAttributeTypeMap() {\n    return CreateUpdateFolder.attributeTypeMap;\n  }\n}\nexports.CreateUpdateFolder = CreateUpdateFolder;\nCreateUpdateFolder.discriminator = undefined;\nCreateUpdateFolder.attributeTypeMap = [{\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}];\nclass CreateUpdateProduct {\n  static getAttributeTypeMap() {\n    return CreateUpdateProduct.attributeTypeMap;\n  }\n}\nexports.CreateUpdateProduct = CreateUpdateProduct;\nCreateUpdateProduct.discriminator = undefined;\nCreateUpdateProduct.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"url\",\n  \"baseName\": \"url\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"imageUrl\",\n  \"baseName\": \"imageUrl\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"sku\",\n  \"baseName\": \"sku\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"price\",\n  \"baseName\": \"price\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"categories\",\n  \"baseName\": \"categories\",\n  \"type\": \"Array<string>\"\n}, {\n  \"name\": \"parentId\",\n  \"baseName\": \"parentId\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"metaInfo\",\n  \"baseName\": \"metaInfo\",\n  \"type\": \"{ [key: string]: any; }\"\n}, {\n  \"name\": \"updateEnabled\",\n  \"baseName\": \"updateEnabled\",\n  \"type\": \"boolean\"\n}];\nclass CreateUpdateProducts {\n  static getAttributeTypeMap() {\n    return CreateUpdateProducts.attributeTypeMap;\n  }\n}\nexports.CreateUpdateProducts = CreateUpdateProducts;\nCreateUpdateProducts.discriminator = undefined;\nCreateUpdateProducts.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"url\",\n  \"baseName\": \"url\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"imageUrl\",\n  \"baseName\": \"imageUrl\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"sku\",\n  \"baseName\": \"sku\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"price\",\n  \"baseName\": \"price\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"categories\",\n  \"baseName\": \"categories\",\n  \"type\": \"Array<string>\"\n}, {\n  \"name\": \"parentId\",\n  \"baseName\": \"parentId\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"metaInfo\",\n  \"baseName\": \"metaInfo\",\n  \"type\": \"{ [key: string]: any; }\"\n}];\nclass CreateWebhook {\n  static getAttributeTypeMap() {\n    return CreateWebhook.attributeTypeMap;\n  }\n}\nexports.CreateWebhook = CreateWebhook;\nCreateWebhook.discriminator = undefined;\nCreateWebhook.attributeTypeMap = [{\n  \"name\": \"url\",\n  \"baseName\": \"url\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"description\",\n  \"baseName\": \"description\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"events\",\n  \"baseName\": \"events\",\n  \"type\": \"Array<CreateWebhook.EventsEnum>\"\n}, {\n  \"name\": \"type\",\n  \"baseName\": \"type\",\n  \"type\": \"CreateWebhook.TypeEnum\"\n}, {\n  \"name\": \"domain\",\n  \"baseName\": \"domain\",\n  \"type\": \"string\"\n}];\n(function (CreateWebhook) {\n  let EventsEnum;\n  (function (EventsEnum) {\n    EventsEnum[EventsEnum[\"Sent\"] = 'sent'] = \"Sent\";\n    EventsEnum[EventsEnum[\"HardBounce\"] = 'hardBounce'] = \"HardBounce\";\n    EventsEnum[EventsEnum[\"SoftBounce\"] = 'softBounce'] = \"SoftBounce\";\n    EventsEnum[EventsEnum[\"Blocked\"] = 'blocked'] = \"Blocked\";\n    EventsEnum[EventsEnum[\"Spam\"] = 'spam'] = \"Spam\";\n    EventsEnum[EventsEnum[\"Delivered\"] = 'delivered'] = \"Delivered\";\n    EventsEnum[EventsEnum[\"Request\"] = 'request'] = \"Request\";\n    EventsEnum[EventsEnum[\"Click\"] = 'click'] = \"Click\";\n    EventsEnum[EventsEnum[\"Invalid\"] = 'invalid'] = \"Invalid\";\n    EventsEnum[EventsEnum[\"Deferred\"] = 'deferred'] = \"Deferred\";\n    EventsEnum[EventsEnum[\"Opened\"] = 'opened'] = \"Opened\";\n    EventsEnum[EventsEnum[\"UniqueOpened\"] = 'uniqueOpened'] = \"UniqueOpened\";\n    EventsEnum[EventsEnum[\"Unsubscribed\"] = 'unsubscribed'] = \"Unsubscribed\";\n    EventsEnum[EventsEnum[\"ListAddition\"] = 'listAddition'] = \"ListAddition\";\n    EventsEnum[EventsEnum[\"ContactUpdated\"] = 'contactUpdated'] = \"ContactUpdated\";\n    EventsEnum[EventsEnum[\"ContactDeleted\"] = 'contactDeleted'] = \"ContactDeleted\";\n    EventsEnum[EventsEnum[\"InboundEmailProcessed\"] = 'inboundEmailProcessed'] = \"InboundEmailProcessed\";\n  })(EventsEnum = CreateWebhook.EventsEnum || (CreateWebhook.EventsEnum = {}));\n  let TypeEnum;\n  (function (TypeEnum) {\n    TypeEnum[TypeEnum[\"Transactional\"] = 'transactional'] = \"Transactional\";\n    TypeEnum[TypeEnum[\"Marketing\"] = 'marketing'] = \"Marketing\";\n    TypeEnum[TypeEnum[\"Inbound\"] = 'inbound'] = \"Inbound\";\n  })(TypeEnum = CreateWebhook.TypeEnum || (CreateWebhook.TypeEnum = {}));\n})(CreateWebhook = exports.CreateWebhook || (exports.CreateWebhook = {}));\nclass CreatedBatchId {\n  static getAttributeTypeMap() {\n    return CreatedBatchId.attributeTypeMap;\n  }\n}\nexports.CreatedBatchId = CreatedBatchId;\nCreatedBatchId.discriminator = undefined;\nCreatedBatchId.attributeTypeMap = [{\n  \"name\": \"batchId\",\n  \"baseName\": \"batchId\",\n  \"type\": \"number\"\n}];\nclass CreatedProcessId {\n  static getAttributeTypeMap() {\n    return CreatedProcessId.attributeTypeMap;\n  }\n}\nexports.CreatedProcessId = CreatedProcessId;\nCreatedProcessId.discriminator = undefined;\nCreatedProcessId.attributeTypeMap = [{\n  \"name\": \"processId\",\n  \"baseName\": \"processId\",\n  \"type\": \"number\"\n}];\nclass Deal {\n  static getAttributeTypeMap() {\n    return Deal.attributeTypeMap;\n  }\n}\nexports.Deal = Deal;\nDeal.discriminator = undefined;\nDeal.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"attributes\",\n  \"baseName\": \"attributes\",\n  \"type\": \"any\"\n}, {\n  \"name\": \"linkedContactsIds\",\n  \"baseName\": \"linkedContactsIds\",\n  \"type\": \"Array<number>\"\n}, {\n  \"name\": \"linkedCompaniesIds\",\n  \"baseName\": \"linkedCompaniesIds\",\n  \"type\": \"Array<string>\"\n}];\nclass DealAttributes extends Array {}\nexports.DealAttributes = DealAttributes;\nDealAttributes.discriminator = undefined;\nclass DealAttributesInner {\n  static getAttributeTypeMap() {\n    return DealAttributesInner.attributeTypeMap;\n  }\n}\nexports.DealAttributesInner = DealAttributesInner;\nDealAttributesInner.discriminator = undefined;\nDealAttributesInner.attributeTypeMap = [{\n  \"name\": \"internalName\",\n  \"baseName\": \"internalName\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"label\",\n  \"baseName\": \"label\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"attributeTypeName\",\n  \"baseName\": \"attributeTypeName\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"attributeOptions\",\n  \"baseName\": \"attributeOptions\",\n  \"type\": \"Array<any>\"\n}, {\n  \"name\": \"isRequired\",\n  \"baseName\": \"isRequired\",\n  \"type\": \"boolean\"\n}];\nclass DealsList {\n  static getAttributeTypeMap() {\n    return DealsList.attributeTypeMap;\n  }\n}\nexports.DealsList = DealsList;\nDealsList.discriminator = undefined;\nDealsList.attributeTypeMap = [{\n  \"name\": \"items\",\n  \"baseName\": \"items\",\n  \"type\": \"Array<Deal>\"\n}];\nclass DeleteHardbounces {\n  static getAttributeTypeMap() {\n    return DeleteHardbounces.attributeTypeMap;\n  }\n}\nexports.DeleteHardbounces = DeleteHardbounces;\nDeleteHardbounces.discriminator = undefined;\nDeleteHardbounces.attributeTypeMap = [{\n  \"name\": \"startDate\",\n  \"baseName\": \"startDate\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"endDate\",\n  \"baseName\": \"endDate\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"contactEmail\",\n  \"baseName\": \"contactEmail\",\n  \"type\": \"string\"\n}];\nclass EmailExportRecipients {\n  static getAttributeTypeMap() {\n    return EmailExportRecipients.attributeTypeMap;\n  }\n}\nexports.EmailExportRecipients = EmailExportRecipients;\nEmailExportRecipients.discriminator = undefined;\nEmailExportRecipients.attributeTypeMap = [{\n  \"name\": \"notifyURL\",\n  \"baseName\": \"notifyURL\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"recipientsType\",\n  \"baseName\": \"recipientsType\",\n  \"type\": \"EmailExportRecipients.RecipientsTypeEnum\"\n}];\n(function (EmailExportRecipients) {\n  let RecipientsTypeEnum;\n  (function (RecipientsTypeEnum) {\n    RecipientsTypeEnum[RecipientsTypeEnum[\"All\"] = 'all'] = \"All\";\n    RecipientsTypeEnum[RecipientsTypeEnum[\"NonClickers\"] = 'nonClickers'] = \"NonClickers\";\n    RecipientsTypeEnum[RecipientsTypeEnum[\"NonOpeners\"] = 'nonOpeners'] = \"NonOpeners\";\n    RecipientsTypeEnum[RecipientsTypeEnum[\"Clickers\"] = 'clickers'] = \"Clickers\";\n    RecipientsTypeEnum[RecipientsTypeEnum[\"Openers\"] = 'openers'] = \"Openers\";\n    RecipientsTypeEnum[RecipientsTypeEnum[\"SoftBounces\"] = 'softBounces'] = \"SoftBounces\";\n    RecipientsTypeEnum[RecipientsTypeEnum[\"HardBounces\"] = 'hardBounces'] = \"HardBounces\";\n    RecipientsTypeEnum[RecipientsTypeEnum[\"Unsubscribed\"] = 'unsubscribed'] = \"Unsubscribed\";\n  })(RecipientsTypeEnum = EmailExportRecipients.RecipientsTypeEnum || (EmailExportRecipients.RecipientsTypeEnum = {}));\n})(EmailExportRecipients = exports.EmailExportRecipients || (exports.EmailExportRecipients = {}));\nclass ErrorModel {\n  static getAttributeTypeMap() {\n    return ErrorModel.attributeTypeMap;\n  }\n}\nexports.ErrorModel = ErrorModel;\nErrorModel.discriminator = undefined;\nErrorModel.attributeTypeMap = [{\n  \"name\": \"code\",\n  \"baseName\": \"code\",\n  \"type\": \"ErrorModel.CodeEnum\"\n}, {\n  \"name\": \"message\",\n  \"baseName\": \"message\",\n  \"type\": \"string\"\n}];\n(function (ErrorModel) {\n  let CodeEnum;\n  (function (CodeEnum) {\n    CodeEnum[CodeEnum[\"InvalidParameter\"] = 'invalid_parameter'] = \"InvalidParameter\";\n    CodeEnum[CodeEnum[\"MissingParameter\"] = 'missing_parameter'] = \"MissingParameter\";\n    CodeEnum[CodeEnum[\"OutOfRange\"] = 'out_of_range'] = \"OutOfRange\";\n    CodeEnum[CodeEnum[\"CampaignProcessing\"] = 'campaign_processing'] = \"CampaignProcessing\";\n    CodeEnum[CodeEnum[\"CampaignSent\"] = 'campaign_sent'] = \"CampaignSent\";\n    CodeEnum[CodeEnum[\"DocumentNotFound\"] = 'document_not_found'] = \"DocumentNotFound\";\n    CodeEnum[CodeEnum[\"ResellerPermissionDenied\"] = 'reseller_permission_denied'] = \"ResellerPermissionDenied\";\n    CodeEnum[CodeEnum[\"NotEnoughCredits\"] = 'not_enough_credits'] = \"NotEnoughCredits\";\n    CodeEnum[CodeEnum[\"PermissionDenied\"] = 'permission_denied'] = \"PermissionDenied\";\n    CodeEnum[CodeEnum[\"DuplicateParameter\"] = 'duplicate_parameter'] = \"DuplicateParameter\";\n    CodeEnum[CodeEnum[\"DuplicateRequest\"] = 'duplicate_request'] = \"DuplicateRequest\";\n    CodeEnum[CodeEnum[\"MethodNotAllowed\"] = 'method_not_allowed'] = \"MethodNotAllowed\";\n    CodeEnum[CodeEnum[\"Unauthorized\"] = 'unauthorized'] = \"Unauthorized\";\n    CodeEnum[CodeEnum[\"AccountUnderValidation\"] = 'account_under_validation'] = \"AccountUnderValidation\";\n    CodeEnum[CodeEnum[\"NotAcceptable\"] = 'not_acceptable'] = \"NotAcceptable\";\n  })(CodeEnum = ErrorModel.CodeEnum || (ErrorModel.CodeEnum = {}));\n})(ErrorModel = exports.ErrorModel || (exports.ErrorModel = {}));\nclass FileData {\n  static getAttributeTypeMap() {\n    return FileData.attributeTypeMap;\n  }\n}\nexports.FileData = FileData;\nFileData.discriminator = undefined;\nFileData.attributeTypeMap = [{\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"authorId\",\n  \"baseName\": \"authorId\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"contactId\",\n  \"baseName\": \"contactId\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"dealId\",\n  \"baseName\": \"dealId\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"companyId\",\n  \"baseName\": \"companyId\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"size\",\n  \"baseName\": \"size\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"createdAt\",\n  \"baseName\": \"createdAt\",\n  \"type\": \"Date\"\n}];\nclass FileDownloadableLink {\n  static getAttributeTypeMap() {\n    return FileDownloadableLink.attributeTypeMap;\n  }\n}\nexports.FileDownloadableLink = FileDownloadableLink;\nFileDownloadableLink.discriminator = undefined;\nFileDownloadableLink.attributeTypeMap = [{\n  \"name\": \"fileUrl\",\n  \"baseName\": \"fileUrl\",\n  \"type\": \"string\"\n}];\nclass FileList extends Array {}\nexports.FileList = FileList;\nFileList.discriminator = undefined;\nclass GetAccountMarketingAutomation {\n  static getAttributeTypeMap() {\n    return GetAccountMarketingAutomation.attributeTypeMap;\n  }\n}\nexports.GetAccountMarketingAutomation = GetAccountMarketingAutomation;\nGetAccountMarketingAutomation.discriminator = undefined;\nGetAccountMarketingAutomation.attributeTypeMap = [{\n  \"name\": \"key\",\n  \"baseName\": \"key\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"enabled\",\n  \"baseName\": \"enabled\",\n  \"type\": \"boolean\"\n}];\nclass GetAccountPlan {\n  static getAttributeTypeMap() {\n    return GetAccountPlan.attributeTypeMap;\n  }\n}\nexports.GetAccountPlan = GetAccountPlan;\nGetAccountPlan.discriminator = undefined;\nGetAccountPlan.attributeTypeMap = [{\n  \"name\": \"type\",\n  \"baseName\": \"type\",\n  \"type\": \"GetAccountPlan.TypeEnum\"\n}, {\n  \"name\": \"creditsType\",\n  \"baseName\": \"creditsType\",\n  \"type\": \"GetAccountPlan.CreditsTypeEnum\"\n}, {\n  \"name\": \"credits\",\n  \"baseName\": \"credits\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"startDate\",\n  \"baseName\": \"startDate\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"endDate\",\n  \"baseName\": \"endDate\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"userLimit\",\n  \"baseName\": \"userLimit\",\n  \"type\": \"number\"\n}];\n(function (GetAccountPlan) {\n  let TypeEnum;\n  (function (TypeEnum) {\n    TypeEnum[TypeEnum[\"PayAsYouGo\"] = 'payAsYouGo'] = \"PayAsYouGo\";\n    TypeEnum[TypeEnum[\"Free\"] = 'free'] = \"Free\";\n    TypeEnum[TypeEnum[\"Subscription\"] = 'subscription'] = \"Subscription\";\n    TypeEnum[TypeEnum[\"Sms\"] = 'sms'] = \"Sms\";\n    TypeEnum[TypeEnum[\"Reseller\"] = 'reseller'] = \"Reseller\";\n  })(TypeEnum = GetAccountPlan.TypeEnum || (GetAccountPlan.TypeEnum = {}));\n  let CreditsTypeEnum;\n  (function (CreditsTypeEnum) {\n    CreditsTypeEnum[CreditsTypeEnum[\"SendLimit\"] = 'sendLimit'] = \"SendLimit\";\n  })(CreditsTypeEnum = GetAccountPlan.CreditsTypeEnum || (GetAccountPlan.CreditsTypeEnum = {}));\n})(GetAccountPlan = exports.GetAccountPlan || (exports.GetAccountPlan = {}));\nclass GetAccountRelay {\n  static getAttributeTypeMap() {\n    return GetAccountRelay.attributeTypeMap;\n  }\n}\nexports.GetAccountRelay = GetAccountRelay;\nGetAccountRelay.discriminator = undefined;\nGetAccountRelay.attributeTypeMap = [{\n  \"name\": \"enabled\",\n  \"baseName\": \"enabled\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"data\",\n  \"baseName\": \"data\",\n  \"type\": \"GetAccountRelayData\"\n}];\nclass GetAccountRelayData {\n  static getAttributeTypeMap() {\n    return GetAccountRelayData.attributeTypeMap;\n  }\n}\nexports.GetAccountRelayData = GetAccountRelayData;\nGetAccountRelayData.discriminator = undefined;\nGetAccountRelayData.attributeTypeMap = [{\n  \"name\": \"userName\",\n  \"baseName\": \"userName\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"relay\",\n  \"baseName\": \"relay\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"port\",\n  \"baseName\": \"port\",\n  \"type\": \"number\"\n}];\nclass GetAggregatedReport {\n  static getAttributeTypeMap() {\n    return GetAggregatedReport.attributeTypeMap;\n  }\n}\nexports.GetAggregatedReport = GetAggregatedReport;\nGetAggregatedReport.discriminator = undefined;\nGetAggregatedReport.attributeTypeMap = [{\n  \"name\": \"range\",\n  \"baseName\": \"range\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"requests\",\n  \"baseName\": \"requests\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"delivered\",\n  \"baseName\": \"delivered\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"hardBounces\",\n  \"baseName\": \"hardBounces\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"softBounces\",\n  \"baseName\": \"softBounces\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"clicks\",\n  \"baseName\": \"clicks\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"uniqueClicks\",\n  \"baseName\": \"uniqueClicks\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"opens\",\n  \"baseName\": \"opens\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"uniqueOpens\",\n  \"baseName\": \"uniqueOpens\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"spamReports\",\n  \"baseName\": \"spamReports\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"blocked\",\n  \"baseName\": \"blocked\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"invalid\",\n  \"baseName\": \"invalid\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"unsubscribed\",\n  \"baseName\": \"unsubscribed\",\n  \"type\": \"number\"\n}];\nclass GetAttributes {\n  static getAttributeTypeMap() {\n    return GetAttributes.attributeTypeMap;\n  }\n}\nexports.GetAttributes = GetAttributes;\nGetAttributes.discriminator = undefined;\nGetAttributes.attributeTypeMap = [{\n  \"name\": \"attributes\",\n  \"baseName\": \"attributes\",\n  \"type\": \"Array<GetAttributesAttributes>\"\n}];\nclass GetAttributesAttributes {\n  static getAttributeTypeMap() {\n    return GetAttributesAttributes.attributeTypeMap;\n  }\n}\nexports.GetAttributesAttributes = GetAttributesAttributes;\nGetAttributesAttributes.discriminator = undefined;\nGetAttributesAttributes.attributeTypeMap = [{\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"category\",\n  \"baseName\": \"category\",\n  \"type\": \"GetAttributesAttributes.CategoryEnum\"\n}, {\n  \"name\": \"type\",\n  \"baseName\": \"type\",\n  \"type\": \"GetAttributesAttributes.TypeEnum\"\n}, {\n  \"name\": \"enumeration\",\n  \"baseName\": \"enumeration\",\n  \"type\": \"Array<GetAttributesEnumeration>\"\n}, {\n  \"name\": \"calculatedValue\",\n  \"baseName\": \"calculatedValue\",\n  \"type\": \"string\"\n}];\n(function (GetAttributesAttributes) {\n  let CategoryEnum;\n  (function (CategoryEnum) {\n    CategoryEnum[CategoryEnum[\"Normal\"] = 'normal'] = \"Normal\";\n    CategoryEnum[CategoryEnum[\"Transactional\"] = 'transactional'] = \"Transactional\";\n    CategoryEnum[CategoryEnum[\"Category\"] = 'category'] = \"Category\";\n    CategoryEnum[CategoryEnum[\"Calculated\"] = 'calculated'] = \"Calculated\";\n    CategoryEnum[CategoryEnum[\"Global\"] = 'global'] = \"Global\";\n  })(CategoryEnum = GetAttributesAttributes.CategoryEnum || (GetAttributesAttributes.CategoryEnum = {}));\n  let TypeEnum;\n  (function (TypeEnum) {\n    TypeEnum[TypeEnum[\"Text\"] = 'text'] = \"Text\";\n    TypeEnum[TypeEnum[\"Date\"] = 'date'] = \"Date\";\n    TypeEnum[TypeEnum[\"Float\"] = 'float'] = \"Float\";\n    TypeEnum[TypeEnum[\"Id\"] = 'id'] = \"Id\";\n    TypeEnum[TypeEnum[\"Boolean\"] = 'boolean'] = \"Boolean\";\n  })(TypeEnum = GetAttributesAttributes.TypeEnum || (GetAttributesAttributes.TypeEnum = {}));\n})(GetAttributesAttributes = exports.GetAttributesAttributes || (exports.GetAttributesAttributes = {}));\nclass GetAttributesEnumeration {\n  static getAttributeTypeMap() {\n    return GetAttributesEnumeration.attributeTypeMap;\n  }\n}\nexports.GetAttributesEnumeration = GetAttributesEnumeration;\nGetAttributesEnumeration.discriminator = undefined;\nGetAttributesEnumeration.attributeTypeMap = [{\n  \"name\": \"value\",\n  \"baseName\": \"value\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"label\",\n  \"baseName\": \"label\",\n  \"type\": \"string\"\n}];\nclass GetBlockedDomains {\n  static getAttributeTypeMap() {\n    return GetBlockedDomains.attributeTypeMap;\n  }\n}\nexports.GetBlockedDomains = GetBlockedDomains;\nGetBlockedDomains.discriminator = undefined;\nGetBlockedDomains.attributeTypeMap = [{\n  \"name\": \"domains\",\n  \"baseName\": \"domains\",\n  \"type\": \"Array<string>\"\n}];\nclass GetCampaignOverview {\n  static getAttributeTypeMap() {\n    return GetCampaignOverview.attributeTypeMap;\n  }\n}\nexports.GetCampaignOverview = GetCampaignOverview;\nGetCampaignOverview.discriminator = undefined;\nGetCampaignOverview.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"subject\",\n  \"baseName\": \"subject\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"type\",\n  \"baseName\": \"type\",\n  \"type\": \"GetCampaignOverview.TypeEnum\"\n}, {\n  \"name\": \"status\",\n  \"baseName\": \"status\",\n  \"type\": \"GetCampaignOverview.StatusEnum\"\n}, {\n  \"name\": \"scheduledAt\",\n  \"baseName\": \"scheduledAt\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"abTesting\",\n  \"baseName\": \"abTesting\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"subjectA\",\n  \"baseName\": \"subjectA\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"subjectB\",\n  \"baseName\": \"subjectB\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"splitRule\",\n  \"baseName\": \"splitRule\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"winnerCriteria\",\n  \"baseName\": \"winnerCriteria\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"winnerDelay\",\n  \"baseName\": \"winnerDelay\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"sendAtBestTime\",\n  \"baseName\": \"sendAtBestTime\",\n  \"type\": \"boolean\"\n}];\n(function (GetCampaignOverview) {\n  let TypeEnum;\n  (function (TypeEnum) {\n    TypeEnum[TypeEnum[\"Classic\"] = 'classic'] = \"Classic\";\n    TypeEnum[TypeEnum[\"Trigger\"] = 'trigger'] = \"Trigger\";\n  })(TypeEnum = GetCampaignOverview.TypeEnum || (GetCampaignOverview.TypeEnum = {}));\n  let StatusEnum;\n  (function (StatusEnum) {\n    StatusEnum[StatusEnum[\"Draft\"] = 'draft'] = \"Draft\";\n    StatusEnum[StatusEnum[\"Sent\"] = 'sent'] = \"Sent\";\n    StatusEnum[StatusEnum[\"Archive\"] = 'archive'] = \"Archive\";\n    StatusEnum[StatusEnum[\"Queued\"] = 'queued'] = \"Queued\";\n    StatusEnum[StatusEnum[\"Suspended\"] = 'suspended'] = \"Suspended\";\n    StatusEnum[StatusEnum[\"InProcess\"] = 'in_process'] = \"InProcess\";\n  })(StatusEnum = GetCampaignOverview.StatusEnum || (GetCampaignOverview.StatusEnum = {}));\n})(GetCampaignOverview = exports.GetCampaignOverview || (exports.GetCampaignOverview = {}));\nclass GetCampaignRecipients {\n  static getAttributeTypeMap() {\n    return GetCampaignRecipients.attributeTypeMap;\n  }\n}\nexports.GetCampaignRecipients = GetCampaignRecipients;\nGetCampaignRecipients.discriminator = undefined;\nGetCampaignRecipients.attributeTypeMap = [{\n  \"name\": \"lists\",\n  \"baseName\": \"lists\",\n  \"type\": \"Array<number>\"\n}, {\n  \"name\": \"exclusionLists\",\n  \"baseName\": \"exclusionLists\",\n  \"type\": \"Array<number>\"\n}];\nclass GetCampaignStats {\n  static getAttributeTypeMap() {\n    return GetCampaignStats.attributeTypeMap;\n  }\n}\nexports.GetCampaignStats = GetCampaignStats;\nGetCampaignStats.discriminator = undefined;\nGetCampaignStats.attributeTypeMap = [{\n  \"name\": \"listId\",\n  \"baseName\": \"listId\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"uniqueClicks\",\n  \"baseName\": \"uniqueClicks\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"clickers\",\n  \"baseName\": \"clickers\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"complaints\",\n  \"baseName\": \"complaints\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"delivered\",\n  \"baseName\": \"delivered\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"sent\",\n  \"baseName\": \"sent\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"softBounces\",\n  \"baseName\": \"softBounces\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"hardBounces\",\n  \"baseName\": \"hardBounces\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"uniqueViews\",\n  \"baseName\": \"uniqueViews\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"trackableViews\",\n  \"baseName\": \"trackableViews\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"trackableViewsRate\",\n  \"baseName\": \"trackableViewsRate\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"estimatedViews\",\n  \"baseName\": \"estimatedViews\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"unsubscriptions\",\n  \"baseName\": \"unsubscriptions\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"viewed\",\n  \"baseName\": \"viewed\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"deferred\",\n  \"baseName\": \"deferred\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"returnBounce\",\n  \"baseName\": \"returnBounce\",\n  \"type\": \"number\"\n}];\nclass GetCategories {\n  static getAttributeTypeMap() {\n    return GetCategories.attributeTypeMap;\n  }\n}\nexports.GetCategories = GetCategories;\nGetCategories.discriminator = undefined;\nGetCategories.attributeTypeMap = [{\n  \"name\": \"categories\",\n  \"baseName\": \"categories\",\n  \"type\": \"Array<any>\"\n}, {\n  \"name\": \"count\",\n  \"baseName\": \"count\",\n  \"type\": \"number\"\n}];\nclass GetCategoryDetails {\n  static getAttributeTypeMap() {\n    return GetCategoryDetails.attributeTypeMap;\n  }\n}\nexports.GetCategoryDetails = GetCategoryDetails;\nGetCategoryDetails.discriminator = undefined;\nGetCategoryDetails.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"createdAt\",\n  \"baseName\": \"createdAt\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"modifiedAt\",\n  \"baseName\": \"modifiedAt\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"url\",\n  \"baseName\": \"url\",\n  \"type\": \"string\"\n}];\nclass GetChildAccountCreationStatus {\n  static getAttributeTypeMap() {\n    return GetChildAccountCreationStatus.attributeTypeMap;\n  }\n}\nexports.GetChildAccountCreationStatus = GetChildAccountCreationStatus;\nGetChildAccountCreationStatus.discriminator = undefined;\nGetChildAccountCreationStatus.attributeTypeMap = [{\n  \"name\": \"childAccountCreated\",\n  \"baseName\": \"childAccountCreated\",\n  \"type\": \"boolean\"\n}];\nclass GetChildDomain {\n  static getAttributeTypeMap() {\n    return GetChildDomain.attributeTypeMap;\n  }\n}\nexports.GetChildDomain = GetChildDomain;\nGetChildDomain.discriminator = undefined;\nGetChildDomain.attributeTypeMap = [{\n  \"name\": \"domain\",\n  \"baseName\": \"domain\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"active\",\n  \"baseName\": \"active\",\n  \"type\": \"boolean\"\n}];\nclass GetChildDomains extends Array {}\nexports.GetChildDomains = GetChildDomains;\nGetChildDomains.discriminator = undefined;\nclass GetChildInfoApiKeys {\n  static getAttributeTypeMap() {\n    return GetChildInfoApiKeys.attributeTypeMap;\n  }\n}\nexports.GetChildInfoApiKeys = GetChildInfoApiKeys;\nGetChildInfoApiKeys.discriminator = undefined;\nGetChildInfoApiKeys.attributeTypeMap = [{\n  \"name\": \"v2\",\n  \"baseName\": \"v2\",\n  \"type\": \"Array<GetChildInfoApiKeysV2>\"\n}, {\n  \"name\": \"v3\",\n  \"baseName\": \"v3\",\n  \"type\": \"Array<GetChildInfoApiKeysV3>\"\n}];\nclass GetChildInfoApiKeysV2 {\n  static getAttributeTypeMap() {\n    return GetChildInfoApiKeysV2.attributeTypeMap;\n  }\n}\nexports.GetChildInfoApiKeysV2 = GetChildInfoApiKeysV2;\nGetChildInfoApiKeysV2.discriminator = undefined;\nGetChildInfoApiKeysV2.attributeTypeMap = [{\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"key\",\n  \"baseName\": \"key\",\n  \"type\": \"string\"\n}];\nclass GetChildInfoApiKeysV3 {\n  static getAttributeTypeMap() {\n    return GetChildInfoApiKeysV3.attributeTypeMap;\n  }\n}\nexports.GetChildInfoApiKeysV3 = GetChildInfoApiKeysV3;\nGetChildInfoApiKeysV3.discriminator = undefined;\nGetChildInfoApiKeysV3.attributeTypeMap = [{\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"key\",\n  \"baseName\": \"key\",\n  \"type\": \"string\"\n}];\nclass GetChildInfoCredits {\n  static getAttributeTypeMap() {\n    return GetChildInfoCredits.attributeTypeMap;\n  }\n}\nexports.GetChildInfoCredits = GetChildInfoCredits;\nGetChildInfoCredits.discriminator = undefined;\nGetChildInfoCredits.attributeTypeMap = [{\n  \"name\": \"emailCredits\",\n  \"baseName\": \"emailCredits\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"smsCredits\",\n  \"baseName\": \"smsCredits\",\n  \"type\": \"number\"\n}];\nclass GetChildInfoStatistics {\n  static getAttributeTypeMap() {\n    return GetChildInfoStatistics.attributeTypeMap;\n  }\n}\nexports.GetChildInfoStatistics = GetChildInfoStatistics;\nGetChildInfoStatistics.discriminator = undefined;\nGetChildInfoStatistics.attributeTypeMap = [{\n  \"name\": \"previousMonthTotalSent\",\n  \"baseName\": \"previousMonthTotalSent\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"currentMonthTotalSent\",\n  \"baseName\": \"currentMonthTotalSent\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"totalSent\",\n  \"baseName\": \"totalSent\",\n  \"type\": \"number\"\n}];\nclass GetChildrenList {\n  static getAttributeTypeMap() {\n    return GetChildrenList.attributeTypeMap;\n  }\n}\nexports.GetChildrenList = GetChildrenList;\nGetChildrenList.discriminator = undefined;\nGetChildrenList.attributeTypeMap = [{\n  \"name\": \"children\",\n  \"baseName\": \"children\",\n  \"type\": \"Array<any>\"\n}, {\n  \"name\": \"count\",\n  \"baseName\": \"count\",\n  \"type\": \"number\"\n}];\nclass GetClient {\n  static getAttributeTypeMap() {\n    return GetClient.attributeTypeMap;\n  }\n}\nexports.GetClient = GetClient;\nGetClient.discriminator = undefined;\nGetClient.attributeTypeMap = [{\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"firstName\",\n  \"baseName\": \"firstName\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"lastName\",\n  \"baseName\": \"lastName\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"companyName\",\n  \"baseName\": \"companyName\",\n  \"type\": \"string\"\n}];\nclass GetChildInfo extends GetClient {\n  static getAttributeTypeMap() {\n    return super.getAttributeTypeMap().concat(GetChildInfo.attributeTypeMap);\n  }\n}\nexports.GetChildInfo = GetChildInfo;\nGetChildInfo.discriminator = undefined;\nGetChildInfo.attributeTypeMap = [{\n  \"name\": \"credits\",\n  \"baseName\": \"credits\",\n  \"type\": \"GetChildInfoCredits\"\n}, {\n  \"name\": \"statistics\",\n  \"baseName\": \"statistics\",\n  \"type\": \"GetChildInfoStatistics\"\n}, {\n  \"name\": \"password\",\n  \"baseName\": \"password\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"ips\",\n  \"baseName\": \"ips\",\n  \"type\": \"Array<string>\"\n}, {\n  \"name\": \"apiKeys\",\n  \"baseName\": \"apiKeys\",\n  \"type\": \"GetChildInfoApiKeys\"\n}];\nclass GetContactCampaignStats {\n  static getAttributeTypeMap() {\n    return GetContactCampaignStats.attributeTypeMap;\n  }\n}\nexports.GetContactCampaignStats = GetContactCampaignStats;\nGetContactCampaignStats.discriminator = undefined;\nGetContactCampaignStats.attributeTypeMap = [{\n  \"name\": \"messagesSent\",\n  \"baseName\": \"messagesSent\",\n  \"type\": \"Array<GetExtendedContactDetailsStatisticsMessagesSent>\"\n}, {\n  \"name\": \"hardBounces\",\n  \"baseName\": \"hardBounces\",\n  \"type\": \"Array<GetExtendedContactDetailsStatisticsMessagesSent>\"\n}, {\n  \"name\": \"softBounces\",\n  \"baseName\": \"softBounces\",\n  \"type\": \"Array<GetExtendedContactDetailsStatisticsMessagesSent>\"\n}, {\n  \"name\": \"complaints\",\n  \"baseName\": \"complaints\",\n  \"type\": \"Array<GetExtendedContactDetailsStatisticsMessagesSent>\"\n}, {\n  \"name\": \"unsubscriptions\",\n  \"baseName\": \"unsubscriptions\",\n  \"type\": \"GetContactCampaignStatsUnsubscriptions\"\n}, {\n  \"name\": \"opened\",\n  \"baseName\": \"opened\",\n  \"type\": \"Array<GetContactCampaignStatsOpened>\"\n}, {\n  \"name\": \"clicked\",\n  \"baseName\": \"clicked\",\n  \"type\": \"Array<GetContactCampaignStatsClicked>\"\n}, {\n  \"name\": \"transacAttributes\",\n  \"baseName\": \"transacAttributes\",\n  \"type\": \"Array<GetContactCampaignStatsTransacAttributes>\"\n}, {\n  \"name\": \"delivered\",\n  \"baseName\": \"delivered\",\n  \"type\": \"Array<GetExtendedContactDetailsStatisticsMessagesSent>\"\n}];\nclass GetContactCampaignStatsClicked {\n  static getAttributeTypeMap() {\n    return GetContactCampaignStatsClicked.attributeTypeMap;\n  }\n}\nexports.GetContactCampaignStatsClicked = GetContactCampaignStatsClicked;\nGetContactCampaignStatsClicked.discriminator = undefined;\nGetContactCampaignStatsClicked.attributeTypeMap = [{\n  \"name\": \"campaignId\",\n  \"baseName\": \"campaignId\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"links\",\n  \"baseName\": \"links\",\n  \"type\": \"Array<GetExtendedContactDetailsStatisticsLinks>\"\n}];\nclass GetContactCampaignStatsOpened {\n  static getAttributeTypeMap() {\n    return GetContactCampaignStatsOpened.attributeTypeMap;\n  }\n}\nexports.GetContactCampaignStatsOpened = GetContactCampaignStatsOpened;\nGetContactCampaignStatsOpened.discriminator = undefined;\nGetContactCampaignStatsOpened.attributeTypeMap = [{\n  \"name\": \"campaignId\",\n  \"baseName\": \"campaignId\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"count\",\n  \"baseName\": \"count\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"eventTime\",\n  \"baseName\": \"eventTime\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"ip\",\n  \"baseName\": \"ip\",\n  \"type\": \"string\"\n}];\nclass GetContactCampaignStatsTransacAttributes {\n  static getAttributeTypeMap() {\n    return GetContactCampaignStatsTransacAttributes.attributeTypeMap;\n  }\n}\nexports.GetContactCampaignStatsTransacAttributes = GetContactCampaignStatsTransacAttributes;\nGetContactCampaignStatsTransacAttributes.discriminator = undefined;\nGetContactCampaignStatsTransacAttributes.attributeTypeMap = [{\n  \"name\": \"orderDate\",\n  \"baseName\": \"orderDate\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"orderPrice\",\n  \"baseName\": \"orderPrice\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"orderId\",\n  \"baseName\": \"orderId\",\n  \"type\": \"number\"\n}];\nclass GetContactCampaignStatsUnsubscriptions {\n  static getAttributeTypeMap() {\n    return GetContactCampaignStatsUnsubscriptions.attributeTypeMap;\n  }\n}\nexports.GetContactCampaignStatsUnsubscriptions = GetContactCampaignStatsUnsubscriptions;\nGetContactCampaignStatsUnsubscriptions.discriminator = undefined;\nGetContactCampaignStatsUnsubscriptions.attributeTypeMap = [{\n  \"name\": \"userUnsubscription\",\n  \"baseName\": \"userUnsubscription\",\n  \"type\": \"Array<GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription>\"\n}, {\n  \"name\": \"adminUnsubscription\",\n  \"baseName\": \"adminUnsubscription\",\n  \"type\": \"Array<GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription>\"\n}];\nclass GetContactDetails {\n  static getAttributeTypeMap() {\n    return GetContactDetails.attributeTypeMap;\n  }\n}\nexports.GetContactDetails = GetContactDetails;\nGetContactDetails.discriminator = undefined;\nGetContactDetails.attributeTypeMap = [{\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"emailBlacklisted\",\n  \"baseName\": \"emailBlacklisted\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"smsBlacklisted\",\n  \"baseName\": \"smsBlacklisted\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"createdAt\",\n  \"baseName\": \"createdAt\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"modifiedAt\",\n  \"baseName\": \"modifiedAt\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"listIds\",\n  \"baseName\": \"listIds\",\n  \"type\": \"Array<number>\"\n}, {\n  \"name\": \"listUnsubscribed\",\n  \"baseName\": \"listUnsubscribed\",\n  \"type\": \"Array<number>\"\n}, {\n  \"name\": \"attributes\",\n  \"baseName\": \"attributes\",\n  \"type\": \"any\"\n}];\nclass GetContacts {\n  static getAttributeTypeMap() {\n    return GetContacts.attributeTypeMap;\n  }\n}\nexports.GetContacts = GetContacts;\nGetContacts.discriminator = undefined;\nGetContacts.attributeTypeMap = [{\n  \"name\": \"contacts\",\n  \"baseName\": \"contacts\",\n  \"type\": \"Array<any>\"\n}, {\n  \"name\": \"count\",\n  \"baseName\": \"count\",\n  \"type\": \"number\"\n}];\nclass GetDeviceBrowserStats {\n  static getAttributeTypeMap() {\n    return GetDeviceBrowserStats.attributeTypeMap;\n  }\n}\nexports.GetDeviceBrowserStats = GetDeviceBrowserStats;\nGetDeviceBrowserStats.discriminator = undefined;\nGetDeviceBrowserStats.attributeTypeMap = [{\n  \"name\": \"clickers\",\n  \"baseName\": \"clickers\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"uniqueClicks\",\n  \"baseName\": \"uniqueClicks\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"viewed\",\n  \"baseName\": \"viewed\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"uniqueViews\",\n  \"baseName\": \"uniqueViews\",\n  \"type\": \"number\"\n}];\nclass GetEmailCampaigns {\n  static getAttributeTypeMap() {\n    return GetEmailCampaigns.attributeTypeMap;\n  }\n}\nexports.GetEmailCampaigns = GetEmailCampaigns;\nGetEmailCampaigns.discriminator = undefined;\nGetEmailCampaigns.attributeTypeMap = [{\n  \"name\": \"campaigns\",\n  \"baseName\": \"campaigns\",\n  \"type\": \"Array<any>\"\n}, {\n  \"name\": \"count\",\n  \"baseName\": \"count\",\n  \"type\": \"number\"\n}];\nclass GetEmailEventReport {\n  static getAttributeTypeMap() {\n    return GetEmailEventReport.attributeTypeMap;\n  }\n}\nexports.GetEmailEventReport = GetEmailEventReport;\nGetEmailEventReport.discriminator = undefined;\nGetEmailEventReport.attributeTypeMap = [{\n  \"name\": \"events\",\n  \"baseName\": \"events\",\n  \"type\": \"Array<GetEmailEventReportEvents>\"\n}];\nclass GetEmailEventReportEvents {\n  static getAttributeTypeMap() {\n    return GetEmailEventReportEvents.attributeTypeMap;\n  }\n}\nexports.GetEmailEventReportEvents = GetEmailEventReportEvents;\nGetEmailEventReportEvents.discriminator = undefined;\nGetEmailEventReportEvents.attributeTypeMap = [{\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"date\",\n  \"baseName\": \"date\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"subject\",\n  \"baseName\": \"subject\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"messageId\",\n  \"baseName\": \"messageId\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"event\",\n  \"baseName\": \"event\",\n  \"type\": \"GetEmailEventReportEvents.EventEnum\"\n}, {\n  \"name\": \"reason\",\n  \"baseName\": \"reason\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"tag\",\n  \"baseName\": \"tag\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"ip\",\n  \"baseName\": \"ip\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"link\",\n  \"baseName\": \"link\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"from\",\n  \"baseName\": \"from\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"templateId\",\n  \"baseName\": \"templateId\",\n  \"type\": \"number\"\n}];\n(function (GetEmailEventReportEvents) {\n  let EventEnum;\n  (function (EventEnum) {\n    EventEnum[EventEnum[\"Bounces\"] = 'bounces'] = \"Bounces\";\n    EventEnum[EventEnum[\"HardBounces\"] = 'hardBounces'] = \"HardBounces\";\n    EventEnum[EventEnum[\"SoftBounces\"] = 'softBounces'] = \"SoftBounces\";\n    EventEnum[EventEnum[\"Delivered\"] = 'delivered'] = \"Delivered\";\n    EventEnum[EventEnum[\"Spam\"] = 'spam'] = \"Spam\";\n    EventEnum[EventEnum[\"Requests\"] = 'requests'] = \"Requests\";\n    EventEnum[EventEnum[\"Opened\"] = 'opened'] = \"Opened\";\n    EventEnum[EventEnum[\"Clicks\"] = 'clicks'] = \"Clicks\";\n    EventEnum[EventEnum[\"Invalid\"] = 'invalid'] = \"Invalid\";\n    EventEnum[EventEnum[\"Deferred\"] = 'deferred'] = \"Deferred\";\n    EventEnum[EventEnum[\"Blocked\"] = 'blocked'] = \"Blocked\";\n    EventEnum[EventEnum[\"Unsubscribed\"] = 'unsubscribed'] = \"Unsubscribed\";\n    EventEnum[EventEnum[\"Error\"] = 'error'] = \"Error\";\n    EventEnum[EventEnum[\"LoadedByProxy\"] = 'loadedByProxy'] = \"LoadedByProxy\";\n  })(EventEnum = GetEmailEventReportEvents.EventEnum || (GetEmailEventReportEvents.EventEnum = {}));\n})(GetEmailEventReportEvents = exports.GetEmailEventReportEvents || (exports.GetEmailEventReportEvents = {}));\nclass GetExtendedCampaignOverview extends GetCampaignOverview {\n  static getAttributeTypeMap() {\n    return super.getAttributeTypeMap().concat(GetExtendedCampaignOverview.attributeTypeMap);\n  }\n}\nexports.GetExtendedCampaignOverview = GetExtendedCampaignOverview;\nGetExtendedCampaignOverview.discriminator = undefined;\nGetExtendedCampaignOverview.attributeTypeMap = [{\n  \"name\": \"testSent\",\n  \"baseName\": \"testSent\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"header\",\n  \"baseName\": \"header\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"footer\",\n  \"baseName\": \"footer\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"sender\",\n  \"baseName\": \"sender\",\n  \"type\": \"GetExtendedCampaignOverviewSender\"\n}, {\n  \"name\": \"replyTo\",\n  \"baseName\": \"replyTo\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"toField\",\n  \"baseName\": \"toField\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"htmlContent\",\n  \"baseName\": \"htmlContent\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"shareLink\",\n  \"baseName\": \"shareLink\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"tag\",\n  \"baseName\": \"tag\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"createdAt\",\n  \"baseName\": \"createdAt\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"modifiedAt\",\n  \"baseName\": \"modifiedAt\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"inlineImageActivation\",\n  \"baseName\": \"inlineImageActivation\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"mirrorActive\",\n  \"baseName\": \"mirrorActive\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"recurring\",\n  \"baseName\": \"recurring\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"sentDate\",\n  \"baseName\": \"sentDate\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"returnBounce\",\n  \"baseName\": \"returnBounce\",\n  \"type\": \"number\"\n}];\nclass GetEmailCampaign extends GetExtendedCampaignOverview {\n  static getAttributeTypeMap() {\n    return super.getAttributeTypeMap().concat(GetEmailCampaign.attributeTypeMap);\n  }\n}\nexports.GetEmailCampaign = GetEmailCampaign;\nGetEmailCampaign.discriminator = undefined;\nGetEmailCampaign.attributeTypeMap = [{\n  \"name\": \"recipients\",\n  \"baseName\": \"recipients\",\n  \"type\": \"GetCampaignRecipients\"\n}, {\n  \"name\": \"statistics\",\n  \"baseName\": \"statistics\",\n  \"type\": \"GetExtendedCampaignStats\"\n}];\nclass GetExtendedCampaignOverviewSender {\n  static getAttributeTypeMap() {\n    return GetExtendedCampaignOverviewSender.attributeTypeMap;\n  }\n}\nexports.GetExtendedCampaignOverviewSender = GetExtendedCampaignOverviewSender;\nGetExtendedCampaignOverviewSender.discriminator = undefined;\nGetExtendedCampaignOverviewSender.attributeTypeMap = [{\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"string\"\n}];\nclass GetExtendedCampaignStats {\n  static getAttributeTypeMap() {\n    return GetExtendedCampaignStats.attributeTypeMap;\n  }\n}\nexports.GetExtendedCampaignStats = GetExtendedCampaignStats;\nGetExtendedCampaignStats.discriminator = undefined;\nGetExtendedCampaignStats.attributeTypeMap = [{\n  \"name\": \"globalStats\",\n  \"baseName\": \"globalStats\",\n  \"type\": \"any\"\n}, {\n  \"name\": \"campaignStats\",\n  \"baseName\": \"campaignStats\",\n  \"type\": \"Array<any>\"\n}, {\n  \"name\": \"mirrorClick\",\n  \"baseName\": \"mirrorClick\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"remaining\",\n  \"baseName\": \"remaining\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"linksStats\",\n  \"baseName\": \"linksStats\",\n  \"type\": \"any\"\n}, {\n  \"name\": \"statsByDomain\",\n  \"baseName\": \"statsByDomain\",\n  \"type\": \"any\"\n}, {\n  \"name\": \"statsByDevice\",\n  \"baseName\": \"statsByDevice\",\n  \"type\": \"any\"\n}, {\n  \"name\": \"statsByBrowser\",\n  \"baseName\": \"statsByBrowser\",\n  \"type\": \"any\"\n}];\nclass GetExtendedCampaignStatsGlobalStats {\n  static getAttributeTypeMap() {\n    return GetExtendedCampaignStatsGlobalStats.attributeTypeMap;\n  }\n}\nexports.GetExtendedCampaignStatsGlobalStats = GetExtendedCampaignStatsGlobalStats;\nGetExtendedCampaignStatsGlobalStats.discriminator = undefined;\nGetExtendedCampaignStatsGlobalStats.attributeTypeMap = [];\nclass GetExtendedClient extends GetClient {\n  static getAttributeTypeMap() {\n    return super.getAttributeTypeMap().concat(GetExtendedClient.attributeTypeMap);\n  }\n}\nexports.GetExtendedClient = GetExtendedClient;\nGetExtendedClient.discriminator = undefined;\nGetExtendedClient.attributeTypeMap = [{\n  \"name\": \"address\",\n  \"baseName\": \"address\",\n  \"type\": \"GetExtendedClientAddress\"\n}];\nclass GetAccount extends GetExtendedClient {\n  static getAttributeTypeMap() {\n    return super.getAttributeTypeMap().concat(GetAccount.attributeTypeMap);\n  }\n}\nexports.GetAccount = GetAccount;\nGetAccount.discriminator = undefined;\nGetAccount.attributeTypeMap = [{\n  \"name\": \"plan\",\n  \"baseName\": \"plan\",\n  \"type\": \"Array<GetAccountPlan>\"\n}, {\n  \"name\": \"relay\",\n  \"baseName\": \"relay\",\n  \"type\": \"GetAccountRelay\"\n}, {\n  \"name\": \"marketingAutomation\",\n  \"baseName\": \"marketingAutomation\",\n  \"type\": \"GetAccountMarketingAutomation\"\n}];\nclass GetExtendedClientAddress {\n  static getAttributeTypeMap() {\n    return GetExtendedClientAddress.attributeTypeMap;\n  }\n}\nexports.GetExtendedClientAddress = GetExtendedClientAddress;\nGetExtendedClientAddress.discriminator = undefined;\nGetExtendedClientAddress.attributeTypeMap = [{\n  \"name\": \"street\",\n  \"baseName\": \"street\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"city\",\n  \"baseName\": \"city\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"zipCode\",\n  \"baseName\": \"zipCode\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"country\",\n  \"baseName\": \"country\",\n  \"type\": \"string\"\n}];\nclass GetExtendedContactDetails extends GetContactDetails {\n  static getAttributeTypeMap() {\n    return super.getAttributeTypeMap().concat(GetExtendedContactDetails.attributeTypeMap);\n  }\n}\nexports.GetExtendedContactDetails = GetExtendedContactDetails;\nGetExtendedContactDetails.discriminator = undefined;\nGetExtendedContactDetails.attributeTypeMap = [{\n  \"name\": \"statistics\",\n  \"baseName\": \"statistics\",\n  \"type\": \"GetExtendedContactDetailsStatistics\"\n}];\nclass GetExtendedContactDetailsStatistics {\n  static getAttributeTypeMap() {\n    return GetExtendedContactDetailsStatistics.attributeTypeMap;\n  }\n}\nexports.GetExtendedContactDetailsStatistics = GetExtendedContactDetailsStatistics;\nGetExtendedContactDetailsStatistics.discriminator = undefined;\nGetExtendedContactDetailsStatistics.attributeTypeMap = [{\n  \"name\": \"messagesSent\",\n  \"baseName\": \"messagesSent\",\n  \"type\": \"Array<GetExtendedContactDetailsStatisticsMessagesSent>\"\n}, {\n  \"name\": \"hardBounces\",\n  \"baseName\": \"hardBounces\",\n  \"type\": \"Array<GetExtendedContactDetailsStatisticsMessagesSent>\"\n}, {\n  \"name\": \"softBounces\",\n  \"baseName\": \"softBounces\",\n  \"type\": \"Array<GetExtendedContactDetailsStatisticsMessagesSent>\"\n}, {\n  \"name\": \"complaints\",\n  \"baseName\": \"complaints\",\n  \"type\": \"Array<GetExtendedContactDetailsStatisticsMessagesSent>\"\n}, {\n  \"name\": \"unsubscriptions\",\n  \"baseName\": \"unsubscriptions\",\n  \"type\": \"GetExtendedContactDetailsStatisticsUnsubscriptions\"\n}, {\n  \"name\": \"opened\",\n  \"baseName\": \"opened\",\n  \"type\": \"Array<GetExtendedContactDetailsStatisticsOpened>\"\n}, {\n  \"name\": \"clicked\",\n  \"baseName\": \"clicked\",\n  \"type\": \"Array<GetExtendedContactDetailsStatisticsClicked>\"\n}, {\n  \"name\": \"transacAttributes\",\n  \"baseName\": \"transacAttributes\",\n  \"type\": \"Array<any>\"\n}, {\n  \"name\": \"delivered\",\n  \"baseName\": \"delivered\",\n  \"type\": \"Array<GetExtendedContactDetailsStatisticsMessagesSent>\"\n}];\nclass GetExtendedContactDetailsStatisticsClicked {\n  static getAttributeTypeMap() {\n    return GetExtendedContactDetailsStatisticsClicked.attributeTypeMap;\n  }\n}\nexports.GetExtendedContactDetailsStatisticsClicked = GetExtendedContactDetailsStatisticsClicked;\nGetExtendedContactDetailsStatisticsClicked.discriminator = undefined;\nGetExtendedContactDetailsStatisticsClicked.attributeTypeMap = [{\n  \"name\": \"campaignId\",\n  \"baseName\": \"campaignId\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"links\",\n  \"baseName\": \"links\",\n  \"type\": \"Array<GetExtendedContactDetailsStatisticsLinks>\"\n}];\nclass GetExtendedContactDetailsStatisticsLinks {\n  static getAttributeTypeMap() {\n    return GetExtendedContactDetailsStatisticsLinks.attributeTypeMap;\n  }\n}\nexports.GetExtendedContactDetailsStatisticsLinks = GetExtendedContactDetailsStatisticsLinks;\nGetExtendedContactDetailsStatisticsLinks.discriminator = undefined;\nGetExtendedContactDetailsStatisticsLinks.attributeTypeMap = [{\n  \"name\": \"count\",\n  \"baseName\": \"count\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"eventTime\",\n  \"baseName\": \"eventTime\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"ip\",\n  \"baseName\": \"ip\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"url\",\n  \"baseName\": \"url\",\n  \"type\": \"string\"\n}];\nclass GetExtendedContactDetailsStatisticsMessagesSent {\n  static getAttributeTypeMap() {\n    return GetExtendedContactDetailsStatisticsMessagesSent.attributeTypeMap;\n  }\n}\nexports.GetExtendedContactDetailsStatisticsMessagesSent = GetExtendedContactDetailsStatisticsMessagesSent;\nGetExtendedContactDetailsStatisticsMessagesSent.discriminator = undefined;\nGetExtendedContactDetailsStatisticsMessagesSent.attributeTypeMap = [{\n  \"name\": \"campaignId\",\n  \"baseName\": \"campaignId\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"eventTime\",\n  \"baseName\": \"eventTime\",\n  \"type\": \"string\"\n}];\nclass GetExtendedContactDetailsStatisticsOpened {\n  static getAttributeTypeMap() {\n    return GetExtendedContactDetailsStatisticsOpened.attributeTypeMap;\n  }\n}\nexports.GetExtendedContactDetailsStatisticsOpened = GetExtendedContactDetailsStatisticsOpened;\nGetExtendedContactDetailsStatisticsOpened.discriminator = undefined;\nGetExtendedContactDetailsStatisticsOpened.attributeTypeMap = [{\n  \"name\": \"campaignId\",\n  \"baseName\": \"campaignId\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"count\",\n  \"baseName\": \"count\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"eventTime\",\n  \"baseName\": \"eventTime\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"ip\",\n  \"baseName\": \"ip\",\n  \"type\": \"string\"\n}];\nclass GetExtendedContactDetailsStatisticsUnsubscriptions {\n  static getAttributeTypeMap() {\n    return GetExtendedContactDetailsStatisticsUnsubscriptions.attributeTypeMap;\n  }\n}\nexports.GetExtendedContactDetailsStatisticsUnsubscriptions = GetExtendedContactDetailsStatisticsUnsubscriptions;\nGetExtendedContactDetailsStatisticsUnsubscriptions.discriminator = undefined;\nGetExtendedContactDetailsStatisticsUnsubscriptions.attributeTypeMap = [{\n  \"name\": \"userUnsubscription\",\n  \"baseName\": \"userUnsubscription\",\n  \"type\": \"Array<GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription>\"\n}, {\n  \"name\": \"adminUnsubscription\",\n  \"baseName\": \"adminUnsubscription\",\n  \"type\": \"Array<GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription>\"\n}];\nclass GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription {\n  static getAttributeTypeMap() {\n    return GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription.attributeTypeMap;\n  }\n}\nexports.GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription = GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription;\nGetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription.discriminator = undefined;\nGetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription.attributeTypeMap = [{\n  \"name\": \"eventTime\",\n  \"baseName\": \"eventTime\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"ip\",\n  \"baseName\": \"ip\",\n  \"type\": \"string\"\n}];\nclass GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription {\n  static getAttributeTypeMap() {\n    return GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription.attributeTypeMap;\n  }\n}\nexports.GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription = GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription;\nGetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription.discriminator = undefined;\nGetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription.attributeTypeMap = [{\n  \"name\": \"campaignId\",\n  \"baseName\": \"campaignId\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"eventTime\",\n  \"baseName\": \"eventTime\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"ip\",\n  \"baseName\": \"ip\",\n  \"type\": \"string\"\n}];\nclass GetExtendedListCampaignStats {\n  static getAttributeTypeMap() {\n    return GetExtendedListCampaignStats.attributeTypeMap;\n  }\n}\nexports.GetExtendedListCampaignStats = GetExtendedListCampaignStats;\nGetExtendedListCampaignStats.discriminator = undefined;\nGetExtendedListCampaignStats.attributeTypeMap = [{\n  \"name\": \"campaignId\",\n  \"baseName\": \"campaignId\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"stats\",\n  \"baseName\": \"stats\",\n  \"type\": \"GetCampaignStats\"\n}];\nclass GetFolder {\n  static getAttributeTypeMap() {\n    return GetFolder.attributeTypeMap;\n  }\n}\nexports.GetFolder = GetFolder;\nGetFolder.discriminator = undefined;\nGetFolder.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"totalBlacklisted\",\n  \"baseName\": \"totalBlacklisted\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"totalSubscribers\",\n  \"baseName\": \"totalSubscribers\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"uniqueSubscribers\",\n  \"baseName\": \"uniqueSubscribers\",\n  \"type\": \"number\"\n}];\nclass GetFolderLists {\n  static getAttributeTypeMap() {\n    return GetFolderLists.attributeTypeMap;\n  }\n}\nexports.GetFolderLists = GetFolderLists;\nGetFolderLists.discriminator = undefined;\nGetFolderLists.attributeTypeMap = [{\n  \"name\": \"lists\",\n  \"baseName\": \"lists\",\n  \"type\": \"Array<any>\"\n}, {\n  \"name\": \"count\",\n  \"baseName\": \"count\",\n  \"type\": \"number\"\n}];\nclass GetFolders {\n  static getAttributeTypeMap() {\n    return GetFolders.attributeTypeMap;\n  }\n}\nexports.GetFolders = GetFolders;\nGetFolders.discriminator = undefined;\nGetFolders.attributeTypeMap = [{\n  \"name\": \"folders\",\n  \"baseName\": \"folders\",\n  \"type\": \"Array<any>\"\n}, {\n  \"name\": \"count\",\n  \"baseName\": \"count\",\n  \"type\": \"number\"\n}];\nclass GetInboundEmailEvents {\n  static getAttributeTypeMap() {\n    return GetInboundEmailEvents.attributeTypeMap;\n  }\n}\nexports.GetInboundEmailEvents = GetInboundEmailEvents;\nGetInboundEmailEvents.discriminator = undefined;\nGetInboundEmailEvents.attributeTypeMap = [{\n  \"name\": \"events\",\n  \"baseName\": \"events\",\n  \"type\": \"Array<GetInboundEmailEventsEvents>\"\n}];\nclass GetInboundEmailEventsByUuid {\n  static getAttributeTypeMap() {\n    return GetInboundEmailEventsByUuid.attributeTypeMap;\n  }\n}\nexports.GetInboundEmailEventsByUuid = GetInboundEmailEventsByUuid;\nGetInboundEmailEventsByUuid.discriminator = undefined;\nGetInboundEmailEventsByUuid.attributeTypeMap = [{\n  \"name\": \"receivedAt\",\n  \"baseName\": \"receivedAt\",\n  \"type\": \"Date\"\n}, {\n  \"name\": \"deliveredAt\",\n  \"baseName\": \"deliveredAt\",\n  \"type\": \"Date\"\n}, {\n  \"name\": \"recipient\",\n  \"baseName\": \"recipient\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"sender\",\n  \"baseName\": \"sender\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"messageId\",\n  \"baseName\": \"messageId\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"subject\",\n  \"baseName\": \"subject\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"attachments\",\n  \"baseName\": \"attachments\",\n  \"type\": \"Array<GetInboundEmailEventsByUuidAttachments>\"\n}, {\n  \"name\": \"logs\",\n  \"baseName\": \"logs\",\n  \"type\": \"Array<GetInboundEmailEventsByUuidLogs>\"\n}];\nclass GetInboundEmailEventsByUuidAttachments {\n  static getAttributeTypeMap() {\n    return GetInboundEmailEventsByUuidAttachments.attributeTypeMap;\n  }\n}\nexports.GetInboundEmailEventsByUuidAttachments = GetInboundEmailEventsByUuidAttachments;\nGetInboundEmailEventsByUuidAttachments.discriminator = undefined;\nGetInboundEmailEventsByUuidAttachments.attributeTypeMap = [{\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"contentType\",\n  \"baseName\": \"contentType\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"contentId\",\n  \"baseName\": \"contentId\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"contentLength\",\n  \"baseName\": \"contentLength\",\n  \"type\": \"number\"\n}];\nclass GetInboundEmailEventsByUuidLogs {\n  static getAttributeTypeMap() {\n    return GetInboundEmailEventsByUuidLogs.attributeTypeMap;\n  }\n}\nexports.GetInboundEmailEventsByUuidLogs = GetInboundEmailEventsByUuidLogs;\nGetInboundEmailEventsByUuidLogs.discriminator = undefined;\nGetInboundEmailEventsByUuidLogs.attributeTypeMap = [{\n  \"name\": \"date\",\n  \"baseName\": \"date\",\n  \"type\": \"Date\"\n}, {\n  \"name\": \"type\",\n  \"baseName\": \"type\",\n  \"type\": \"GetInboundEmailEventsByUuidLogs.TypeEnum\"\n}];\n(function (GetInboundEmailEventsByUuidLogs) {\n  let TypeEnum;\n  (function (TypeEnum) {\n    TypeEnum[TypeEnum[\"Received\"] = 'received'] = \"Received\";\n    TypeEnum[TypeEnum[\"Processed\"] = 'processed'] = \"Processed\";\n    TypeEnum[TypeEnum[\"WebhookFailed\"] = 'webhookFailed'] = \"WebhookFailed\";\n    TypeEnum[TypeEnum[\"WebhookDelivered\"] = 'webhookDelivered'] = \"WebhookDelivered\";\n  })(TypeEnum = GetInboundEmailEventsByUuidLogs.TypeEnum || (GetInboundEmailEventsByUuidLogs.TypeEnum = {}));\n})(GetInboundEmailEventsByUuidLogs = exports.GetInboundEmailEventsByUuidLogs || (exports.GetInboundEmailEventsByUuidLogs = {}));\nclass GetInboundEmailEventsEvents {\n  static getAttributeTypeMap() {\n    return GetInboundEmailEventsEvents.attributeTypeMap;\n  }\n}\nexports.GetInboundEmailEventsEvents = GetInboundEmailEventsEvents;\nGetInboundEmailEventsEvents.discriminator = undefined;\nGetInboundEmailEventsEvents.attributeTypeMap = [{\n  \"name\": \"uuid\",\n  \"baseName\": \"uuid\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"date\",\n  \"baseName\": \"date\",\n  \"type\": \"Date\"\n}, {\n  \"name\": \"sender\",\n  \"baseName\": \"sender\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"recipient\",\n  \"baseName\": \"recipient\",\n  \"type\": \"string\"\n}];\nclass GetIp {\n  static getAttributeTypeMap() {\n    return GetIp.attributeTypeMap;\n  }\n}\nexports.GetIp = GetIp;\nGetIp.discriminator = undefined;\nGetIp.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"ip\",\n  \"baseName\": \"ip\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"active\",\n  \"baseName\": \"active\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"domain\",\n  \"baseName\": \"domain\",\n  \"type\": \"string\"\n}];\nclass GetIpFromSender {\n  static getAttributeTypeMap() {\n    return GetIpFromSender.attributeTypeMap;\n  }\n}\nexports.GetIpFromSender = GetIpFromSender;\nGetIpFromSender.discriminator = undefined;\nGetIpFromSender.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"ip\",\n  \"baseName\": \"ip\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"domain\",\n  \"baseName\": \"domain\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"weight\",\n  \"baseName\": \"weight\",\n  \"type\": \"number\"\n}];\nclass GetIps {\n  static getAttributeTypeMap() {\n    return GetIps.attributeTypeMap;\n  }\n}\nexports.GetIps = GetIps;\nGetIps.discriminator = undefined;\nGetIps.attributeTypeMap = [{\n  \"name\": \"ips\",\n  \"baseName\": \"ips\",\n  \"type\": \"Array<GetIp>\"\n}];\nclass GetIpsFromSender {\n  static getAttributeTypeMap() {\n    return GetIpsFromSender.attributeTypeMap;\n  }\n}\nexports.GetIpsFromSender = GetIpsFromSender;\nGetIpsFromSender.discriminator = undefined;\nGetIpsFromSender.attributeTypeMap = [{\n  \"name\": \"ips\",\n  \"baseName\": \"ips\",\n  \"type\": \"Array<GetIpFromSender>\"\n}];\nclass GetList {\n  static getAttributeTypeMap() {\n    return GetList.attributeTypeMap;\n  }\n}\nexports.GetList = GetList;\nGetList.discriminator = undefined;\nGetList.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"totalBlacklisted\",\n  \"baseName\": \"totalBlacklisted\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"totalSubscribers\",\n  \"baseName\": \"totalSubscribers\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"uniqueSubscribers\",\n  \"baseName\": \"uniqueSubscribers\",\n  \"type\": \"number\"\n}];\nclass GetExtendedList extends GetList {\n  static getAttributeTypeMap() {\n    return super.getAttributeTypeMap().concat(GetExtendedList.attributeTypeMap);\n  }\n}\nexports.GetExtendedList = GetExtendedList;\nGetExtendedList.discriminator = undefined;\nGetExtendedList.attributeTypeMap = [{\n  \"name\": \"folderId\",\n  \"baseName\": \"folderId\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"createdAt\",\n  \"baseName\": \"createdAt\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"campaignStats\",\n  \"baseName\": \"campaignStats\",\n  \"type\": \"Array<GetExtendedListCampaignStats>\"\n}, {\n  \"name\": \"dynamicList\",\n  \"baseName\": \"dynamicList\",\n  \"type\": \"boolean\"\n}];\nclass GetLists {\n  static getAttributeTypeMap() {\n    return GetLists.attributeTypeMap;\n  }\n}\nexports.GetLists = GetLists;\nGetLists.discriminator = undefined;\nGetLists.attributeTypeMap = [{\n  \"name\": \"lists\",\n  \"baseName\": \"lists\",\n  \"type\": \"Array<any>\"\n}, {\n  \"name\": \"count\",\n  \"baseName\": \"count\",\n  \"type\": \"number\"\n}];\nclass GetProcess {\n  static getAttributeTypeMap() {\n    return GetProcess.attributeTypeMap;\n  }\n}\nexports.GetProcess = GetProcess;\nGetProcess.discriminator = undefined;\nGetProcess.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"status\",\n  \"baseName\": \"status\",\n  \"type\": \"GetProcess.StatusEnum\"\n}, {\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"exportUrl\",\n  \"baseName\": \"export_url\",\n  \"type\": \"string\"\n}];\n(function (GetProcess) {\n  let StatusEnum;\n  (function (StatusEnum) {\n    StatusEnum[StatusEnum[\"Queued\"] = 'queued'] = \"Queued\";\n    StatusEnum[StatusEnum[\"InProcess\"] = 'in_process'] = \"InProcess\";\n    StatusEnum[StatusEnum[\"Completed\"] = 'completed'] = \"Completed\";\n  })(StatusEnum = GetProcess.StatusEnum || (GetProcess.StatusEnum = {}));\n})(GetProcess = exports.GetProcess || (exports.GetProcess = {}));\nclass GetProcesses {\n  static getAttributeTypeMap() {\n    return GetProcesses.attributeTypeMap;\n  }\n}\nexports.GetProcesses = GetProcesses;\nGetProcesses.discriminator = undefined;\nGetProcesses.attributeTypeMap = [{\n  \"name\": \"processes\",\n  \"baseName\": \"processes\",\n  \"type\": \"Array<GetProcess>\"\n}, {\n  \"name\": \"count\",\n  \"baseName\": \"count\",\n  \"type\": \"number\"\n}];\nclass GetProductDetails {\n  static getAttributeTypeMap() {\n    return GetProductDetails.attributeTypeMap;\n  }\n}\nexports.GetProductDetails = GetProductDetails;\nGetProductDetails.discriminator = undefined;\nGetProductDetails.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"createdAt\",\n  \"baseName\": \"createdAt\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"modifiedAt\",\n  \"baseName\": \"modifiedAt\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"url\",\n  \"baseName\": \"url\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"imageUrl\",\n  \"baseName\": \"imageUrl\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"sku\",\n  \"baseName\": \"sku\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"price\",\n  \"baseName\": \"price\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"categories\",\n  \"baseName\": \"categories\",\n  \"type\": \"Array<string>\"\n}, {\n  \"name\": \"parentId\",\n  \"baseName\": \"parentId\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"s3Original\",\n  \"baseName\": \"s3Original\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"s3ThumbAnalytics\",\n  \"baseName\": \"s3ThumbAnalytics\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"metaInfo\",\n  \"baseName\": \"metaInfo\",\n  \"type\": \"any\"\n}, {\n  \"name\": \"s3ThumbEditor\",\n  \"baseName\": \"s3ThumbEditor\",\n  \"type\": \"string\"\n}];\nclass GetProducts {\n  static getAttributeTypeMap() {\n    return GetProducts.attributeTypeMap;\n  }\n}\nexports.GetProducts = GetProducts;\nGetProducts.discriminator = undefined;\nGetProducts.attributeTypeMap = [{\n  \"name\": \"products\",\n  \"baseName\": \"products\",\n  \"type\": \"Array<any>\"\n}, {\n  \"name\": \"count\",\n  \"baseName\": \"count\",\n  \"type\": \"number\"\n}];\nclass GetReports {\n  static getAttributeTypeMap() {\n    return GetReports.attributeTypeMap;\n  }\n}\nexports.GetReports = GetReports;\nGetReports.discriminator = undefined;\nGetReports.attributeTypeMap = [{\n  \"name\": \"reports\",\n  \"baseName\": \"reports\",\n  \"type\": \"Array<GetReportsReports>\"\n}];\nclass GetReportsReports {\n  static getAttributeTypeMap() {\n    return GetReportsReports.attributeTypeMap;\n  }\n}\nexports.GetReportsReports = GetReportsReports;\nGetReportsReports.discriminator = undefined;\nGetReportsReports.attributeTypeMap = [{\n  \"name\": \"date\",\n  \"baseName\": \"date\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"requests\",\n  \"baseName\": \"requests\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"delivered\",\n  \"baseName\": \"delivered\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"hardBounces\",\n  \"baseName\": \"hardBounces\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"softBounces\",\n  \"baseName\": \"softBounces\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"clicks\",\n  \"baseName\": \"clicks\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"uniqueClicks\",\n  \"baseName\": \"uniqueClicks\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"opens\",\n  \"baseName\": \"opens\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"uniqueOpens\",\n  \"baseName\": \"uniqueOpens\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"spamReports\",\n  \"baseName\": \"spamReports\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"blocked\",\n  \"baseName\": \"blocked\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"invalid\",\n  \"baseName\": \"invalid\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"unsubscribed\",\n  \"baseName\": \"unsubscribed\",\n  \"type\": \"number\"\n}];\nclass GetScheduledEmailByBatchId {\n  static getAttributeTypeMap() {\n    return GetScheduledEmailByBatchId.attributeTypeMap;\n  }\n}\nexports.GetScheduledEmailByBatchId = GetScheduledEmailByBatchId;\nGetScheduledEmailByBatchId.discriminator = undefined;\nGetScheduledEmailByBatchId.attributeTypeMap = [{\n  \"name\": \"count\",\n  \"baseName\": \"count\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"batches\",\n  \"baseName\": \"batches\",\n  \"type\": \"Array<GetScheduledEmailByBatchIdBatches>\"\n}];\nclass GetScheduledEmailByBatchIdBatches {\n  static getAttributeTypeMap() {\n    return GetScheduledEmailByBatchIdBatches.attributeTypeMap;\n  }\n}\nexports.GetScheduledEmailByBatchIdBatches = GetScheduledEmailByBatchIdBatches;\nGetScheduledEmailByBatchIdBatches.discriminator = undefined;\nGetScheduledEmailByBatchIdBatches.attributeTypeMap = [{\n  \"name\": \"scheduledAt\",\n  \"baseName\": \"scheduledAt\",\n  \"type\": \"String\"\n}, {\n  \"name\": \"createdAt\",\n  \"baseName\": \"createdAt\",\n  \"type\": \"String\"\n}, {\n  \"name\": \"status\",\n  \"baseName\": \"status\",\n  \"type\": \"GetScheduledEmailByBatchIdBatches.StatusEnum\"\n}];\n(function (GetScheduledEmailByBatchIdBatches) {\n  let StatusEnum;\n  (function (StatusEnum) {\n    StatusEnum[StatusEnum[\"InProgress\"] = 'inProgress'] = \"InProgress\";\n    StatusEnum[StatusEnum[\"Queued\"] = 'queued'] = \"Queued\";\n    StatusEnum[StatusEnum[\"Processed\"] = 'processed'] = \"Processed\";\n    StatusEnum[StatusEnum[\"Error\"] = 'error'] = \"Error\";\n  })(StatusEnum = GetScheduledEmailByBatchIdBatches.StatusEnum || (GetScheduledEmailByBatchIdBatches.StatusEnum = {}));\n})(GetScheduledEmailByBatchIdBatches = exports.GetScheduledEmailByBatchIdBatches || (exports.GetScheduledEmailByBatchIdBatches = {}));\nclass GetScheduledEmailByMessageId {\n  static getAttributeTypeMap() {\n    return GetScheduledEmailByMessageId.attributeTypeMap;\n  }\n}\nexports.GetScheduledEmailByMessageId = GetScheduledEmailByMessageId;\nGetScheduledEmailByMessageId.discriminator = undefined;\nGetScheduledEmailByMessageId.attributeTypeMap = [{\n  \"name\": \"scheduledAt\",\n  \"baseName\": \"scheduledAt\",\n  \"type\": \"String\"\n}, {\n  \"name\": \"createdAt\",\n  \"baseName\": \"createdAt\",\n  \"type\": \"String\"\n}, {\n  \"name\": \"status\",\n  \"baseName\": \"status\",\n  \"type\": \"GetScheduledEmailByMessageId.StatusEnum\"\n}];\n(function (GetScheduledEmailByMessageId) {\n  let StatusEnum;\n  (function (StatusEnum) {\n    StatusEnum[StatusEnum[\"InProgress\"] = 'inProgress'] = \"InProgress\";\n    StatusEnum[StatusEnum[\"Queued\"] = 'queued'] = \"Queued\";\n    StatusEnum[StatusEnum[\"Processed\"] = 'processed'] = \"Processed\";\n    StatusEnum[StatusEnum[\"Error\"] = 'error'] = \"Error\";\n  })(StatusEnum = GetScheduledEmailByMessageId.StatusEnum || (GetScheduledEmailByMessageId.StatusEnum = {}));\n})(GetScheduledEmailByMessageId = exports.GetScheduledEmailByMessageId || (exports.GetScheduledEmailByMessageId = {}));\nclass GetSendersList {\n  static getAttributeTypeMap() {\n    return GetSendersList.attributeTypeMap;\n  }\n}\nexports.GetSendersList = GetSendersList;\nGetSendersList.discriminator = undefined;\nGetSendersList.attributeTypeMap = [{\n  \"name\": \"senders\",\n  \"baseName\": \"senders\",\n  \"type\": \"Array<GetSendersListSenders>\"\n}];\nclass GetSendersListIps {\n  static getAttributeTypeMap() {\n    return GetSendersListIps.attributeTypeMap;\n  }\n}\nexports.GetSendersListIps = GetSendersListIps;\nGetSendersListIps.discriminator = undefined;\nGetSendersListIps.attributeTypeMap = [{\n  \"name\": \"ip\",\n  \"baseName\": \"ip\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"domain\",\n  \"baseName\": \"domain\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"weight\",\n  \"baseName\": \"weight\",\n  \"type\": \"number\"\n}];\nclass GetSendersListSenders {\n  static getAttributeTypeMap() {\n    return GetSendersListSenders.attributeTypeMap;\n  }\n}\nexports.GetSendersListSenders = GetSendersListSenders;\nGetSendersListSenders.discriminator = undefined;\nGetSendersListSenders.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"active\",\n  \"baseName\": \"active\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"ips\",\n  \"baseName\": \"ips\",\n  \"type\": \"Array<GetSendersListIps>\"\n}];\nclass GetSharedTemplateUrl {\n  static getAttributeTypeMap() {\n    return GetSharedTemplateUrl.attributeTypeMap;\n  }\n}\nexports.GetSharedTemplateUrl = GetSharedTemplateUrl;\nGetSharedTemplateUrl.discriminator = undefined;\nGetSharedTemplateUrl.attributeTypeMap = [{\n  \"name\": \"sharedUrl\",\n  \"baseName\": \"sharedUrl\",\n  \"type\": \"string\"\n}];\nclass GetSmsCampaignOverview {\n  static getAttributeTypeMap() {\n    return GetSmsCampaignOverview.attributeTypeMap;\n  }\n}\nexports.GetSmsCampaignOverview = GetSmsCampaignOverview;\nGetSmsCampaignOverview.discriminator = undefined;\nGetSmsCampaignOverview.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"status\",\n  \"baseName\": \"status\",\n  \"type\": \"GetSmsCampaignOverview.StatusEnum\"\n}, {\n  \"name\": \"content\",\n  \"baseName\": \"content\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"scheduledAt\",\n  \"baseName\": \"scheduledAt\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"sender\",\n  \"baseName\": \"sender\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"createdAt\",\n  \"baseName\": \"createdAt\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"modifiedAt\",\n  \"baseName\": \"modifiedAt\",\n  \"type\": \"string\"\n}];\nclass GetSmsCampaign extends GetSmsCampaignOverview {\n  static getAttributeTypeMap() {\n    return super.getAttributeTypeMap().concat(GetSmsCampaign.attributeTypeMap);\n  }\n}\nexports.GetSmsCampaign = GetSmsCampaign;\nGetSmsCampaign.discriminator = undefined;\nGetSmsCampaign.attributeTypeMap = [{\n  \"name\": \"recipients\",\n  \"baseName\": \"recipients\",\n  \"type\": \"GetSmsCampaignRecipients\"\n}, {\n  \"name\": \"statistics\",\n  \"baseName\": \"statistics\",\n  \"type\": \"GetSmsCampaignRecipients\"\n}];\n(function (GetSmsCampaignOverview) {\n  let StatusEnum;\n  (function (StatusEnum) {\n    StatusEnum[StatusEnum[\"Draft\"] = 'draft'] = \"Draft\";\n    StatusEnum[StatusEnum[\"Sent\"] = 'sent'] = \"Sent\";\n    StatusEnum[StatusEnum[\"Archive\"] = 'archive'] = \"Archive\";\n    StatusEnum[StatusEnum[\"Queued\"] = 'queued'] = \"Queued\";\n    StatusEnum[StatusEnum[\"Suspended\"] = 'suspended'] = \"Suspended\";\n    StatusEnum[StatusEnum[\"InProcess\"] = 'inProcess'] = \"InProcess\";\n  })(StatusEnum = GetSmsCampaignOverview.StatusEnum || (GetSmsCampaignOverview.StatusEnum = {}));\n})(GetSmsCampaignOverview = exports.GetSmsCampaignOverview || (exports.GetSmsCampaignOverview = {}));\nclass GetSmsCampaignRecipients {\n  static getAttributeTypeMap() {\n    return GetSmsCampaignRecipients.attributeTypeMap;\n  }\n}\nexports.GetSmsCampaignRecipients = GetSmsCampaignRecipients;\nGetSmsCampaignRecipients.discriminator = undefined;\nGetSmsCampaignRecipients.attributeTypeMap = [];\nclass GetSmsCampaignStats {\n  static getAttributeTypeMap() {\n    return GetSmsCampaignStats.attributeTypeMap;\n  }\n}\nexports.GetSmsCampaignStats = GetSmsCampaignStats;\nGetSmsCampaignStats.discriminator = undefined;\nGetSmsCampaignStats.attributeTypeMap = [{\n  \"name\": \"delivered\",\n  \"baseName\": \"delivered\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"sent\",\n  \"baseName\": \"sent\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"processing\",\n  \"baseName\": \"processing\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"softBounces\",\n  \"baseName\": \"softBounces\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"hardBounces\",\n  \"baseName\": \"hardBounces\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"unsubscriptions\",\n  \"baseName\": \"unsubscriptions\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"answered\",\n  \"baseName\": \"answered\",\n  \"type\": \"number\"\n}];\nclass GetSmsCampaigns {\n  static getAttributeTypeMap() {\n    return GetSmsCampaigns.attributeTypeMap;\n  }\n}\nexports.GetSmsCampaigns = GetSmsCampaigns;\nGetSmsCampaigns.discriminator = undefined;\nGetSmsCampaigns.attributeTypeMap = [{\n  \"name\": \"campaigns\",\n  \"baseName\": \"campaigns\",\n  \"type\": \"Array<any>\"\n}, {\n  \"name\": \"count\",\n  \"baseName\": \"count\",\n  \"type\": \"number\"\n}];\nclass GetSmsEventReport {\n  static getAttributeTypeMap() {\n    return GetSmsEventReport.attributeTypeMap;\n  }\n}\nexports.GetSmsEventReport = GetSmsEventReport;\nGetSmsEventReport.discriminator = undefined;\nGetSmsEventReport.attributeTypeMap = [{\n  \"name\": \"events\",\n  \"baseName\": \"events\",\n  \"type\": \"Array<GetSmsEventReportEvents>\"\n}];\nclass GetSmsEventReportEvents {\n  static getAttributeTypeMap() {\n    return GetSmsEventReportEvents.attributeTypeMap;\n  }\n}\nexports.GetSmsEventReportEvents = GetSmsEventReportEvents;\nGetSmsEventReportEvents.discriminator = undefined;\nGetSmsEventReportEvents.attributeTypeMap = [{\n  \"name\": \"phoneNumber\",\n  \"baseName\": \"phoneNumber\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"date\",\n  \"baseName\": \"date\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"messageId\",\n  \"baseName\": \"messageId\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"event\",\n  \"baseName\": \"event\",\n  \"type\": \"GetSmsEventReportEvents.EventEnum\"\n}, {\n  \"name\": \"reason\",\n  \"baseName\": \"reason\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"reply\",\n  \"baseName\": \"reply\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"tag\",\n  \"baseName\": \"tag\",\n  \"type\": \"string\"\n}];\n(function (GetSmsEventReportEvents) {\n  let EventEnum;\n  (function (EventEnum) {\n    EventEnum[EventEnum[\"Bounces\"] = 'bounces'] = \"Bounces\";\n    EventEnum[EventEnum[\"HardBounces\"] = 'hardBounces'] = \"HardBounces\";\n    EventEnum[EventEnum[\"SoftBounces\"] = 'softBounces'] = \"SoftBounces\";\n    EventEnum[EventEnum[\"Delivered\"] = 'delivered'] = \"Delivered\";\n    EventEnum[EventEnum[\"Sent\"] = 'sent'] = \"Sent\";\n    EventEnum[EventEnum[\"Accepted\"] = 'accepted'] = \"Accepted\";\n    EventEnum[EventEnum[\"Unsubscription\"] = 'unsubscription'] = \"Unsubscription\";\n    EventEnum[EventEnum[\"Replies\"] = 'replies'] = \"Replies\";\n    EventEnum[EventEnum[\"Blocked\"] = 'blocked'] = \"Blocked\";\n    EventEnum[EventEnum[\"Rejected\"] = 'rejected'] = \"Rejected\";\n  })(EventEnum = GetSmsEventReportEvents.EventEnum || (GetSmsEventReportEvents.EventEnum = {}));\n})(GetSmsEventReportEvents = exports.GetSmsEventReportEvents || (exports.GetSmsEventReportEvents = {}));\nclass GetSmtpTemplateOverview {\n  static getAttributeTypeMap() {\n    return GetSmtpTemplateOverview.attributeTypeMap;\n  }\n}\nexports.GetSmtpTemplateOverview = GetSmtpTemplateOverview;\nGetSmtpTemplateOverview.discriminator = undefined;\nGetSmtpTemplateOverview.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"subject\",\n  \"baseName\": \"subject\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"isActive\",\n  \"baseName\": \"isActive\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"testSent\",\n  \"baseName\": \"testSent\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"sender\",\n  \"baseName\": \"sender\",\n  \"type\": \"GetSmtpTemplateOverviewSender\"\n}, {\n  \"name\": \"replyTo\",\n  \"baseName\": \"replyTo\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"toField\",\n  \"baseName\": \"toField\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"tag\",\n  \"baseName\": \"tag\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"htmlContent\",\n  \"baseName\": \"htmlContent\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"createdAt\",\n  \"baseName\": \"createdAt\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"modifiedAt\",\n  \"baseName\": \"modifiedAt\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"doiTemplate\",\n  \"baseName\": \"doiTemplate\",\n  \"type\": \"boolean\"\n}];\nclass GetSmtpTemplateOverviewSender {\n  static getAttributeTypeMap() {\n    return GetSmtpTemplateOverviewSender.attributeTypeMap;\n  }\n}\nexports.GetSmtpTemplateOverviewSender = GetSmtpTemplateOverviewSender;\nGetSmtpTemplateOverviewSender.discriminator = undefined;\nGetSmtpTemplateOverviewSender.attributeTypeMap = [{\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"string\"\n}];\nclass GetSmtpTemplates {\n  static getAttributeTypeMap() {\n    return GetSmtpTemplates.attributeTypeMap;\n  }\n}\nexports.GetSmtpTemplates = GetSmtpTemplates;\nGetSmtpTemplates.discriminator = undefined;\nGetSmtpTemplates.attributeTypeMap = [{\n  \"name\": \"count\",\n  \"baseName\": \"count\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"templates\",\n  \"baseName\": \"templates\",\n  \"type\": \"Array<GetSmtpTemplateOverview>\"\n}];\nclass GetSsoToken {\n  static getAttributeTypeMap() {\n    return GetSsoToken.attributeTypeMap;\n  }\n}\nexports.GetSsoToken = GetSsoToken;\nGetSsoToken.discriminator = undefined;\nGetSsoToken.attributeTypeMap = [{\n  \"name\": \"token\",\n  \"baseName\": \"token\",\n  \"type\": \"string\"\n}];\nclass GetStatsByBrowser extends null {\n  static getAttributeTypeMap() {\n    return super.getAttributeTypeMap().concat(GetStatsByBrowser.attributeTypeMap);\n  }\n}\nexports.GetStatsByBrowser = GetStatsByBrowser;\nGetStatsByBrowser.discriminator = undefined;\nGetStatsByBrowser.attributeTypeMap = [];\nclass GetStatsByDevice {\n  static getAttributeTypeMap() {\n    return GetStatsByDevice.attributeTypeMap;\n  }\n}\nexports.GetStatsByDevice = GetStatsByDevice;\nGetStatsByDevice.discriminator = undefined;\nGetStatsByDevice.attributeTypeMap = [{\n  \"name\": \"desktop\",\n  \"baseName\": \"desktop\",\n  \"type\": \"{ [key: string]: GetDeviceBrowserStats; }\"\n}, {\n  \"name\": \"mobile\",\n  \"baseName\": \"mobile\",\n  \"type\": \"{ [key: string]: GetDeviceBrowserStats; }\"\n}, {\n  \"name\": \"tablet\",\n  \"baseName\": \"tablet\",\n  \"type\": \"{ [key: string]: GetDeviceBrowserStats; }\"\n}, {\n  \"name\": \"unknown\",\n  \"baseName\": \"unknown\",\n  \"type\": \"{ [key: string]: GetDeviceBrowserStats; }\"\n}];\nclass GetStatsByDomain extends null {\n  static getAttributeTypeMap() {\n    return super.getAttributeTypeMap().concat(GetStatsByDomain.attributeTypeMap);\n  }\n}\nexports.GetStatsByDomain = GetStatsByDomain;\nGetStatsByDomain.discriminator = undefined;\nGetStatsByDomain.attributeTypeMap = [];\nclass GetTransacAggregatedSmsReport {\n  static getAttributeTypeMap() {\n    return GetTransacAggregatedSmsReport.attributeTypeMap;\n  }\n}\nexports.GetTransacAggregatedSmsReport = GetTransacAggregatedSmsReport;\nGetTransacAggregatedSmsReport.discriminator = undefined;\nGetTransacAggregatedSmsReport.attributeTypeMap = [{\n  \"name\": \"range\",\n  \"baseName\": \"range\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"requests\",\n  \"baseName\": \"requests\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"delivered\",\n  \"baseName\": \"delivered\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"hardBounces\",\n  \"baseName\": \"hardBounces\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"softBounces\",\n  \"baseName\": \"softBounces\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"blocked\",\n  \"baseName\": \"blocked\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"unsubscribed\",\n  \"baseName\": \"unsubscribed\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"replied\",\n  \"baseName\": \"replied\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"accepted\",\n  \"baseName\": \"accepted\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"rejected\",\n  \"baseName\": \"rejected\",\n  \"type\": \"number\"\n}];\nclass GetTransacBlockedContacts {\n  static getAttributeTypeMap() {\n    return GetTransacBlockedContacts.attributeTypeMap;\n  }\n}\nexports.GetTransacBlockedContacts = GetTransacBlockedContacts;\nGetTransacBlockedContacts.discriminator = undefined;\nGetTransacBlockedContacts.attributeTypeMap = [{\n  \"name\": \"count\",\n  \"baseName\": \"count\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"contacts\",\n  \"baseName\": \"contacts\",\n  \"type\": \"Array<GetTransacBlockedContactsContacts>\"\n}];\nclass GetTransacBlockedContactsContacts {\n  static getAttributeTypeMap() {\n    return GetTransacBlockedContactsContacts.attributeTypeMap;\n  }\n}\nexports.GetTransacBlockedContactsContacts = GetTransacBlockedContactsContacts;\nGetTransacBlockedContactsContacts.discriminator = undefined;\nGetTransacBlockedContactsContacts.attributeTypeMap = [{\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"senderEmail\",\n  \"baseName\": \"senderEmail\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"reason\",\n  \"baseName\": \"reason\",\n  \"type\": \"GetTransacBlockedContactsReason\"\n}, {\n  \"name\": \"blockedAt\",\n  \"baseName\": \"blockedAt\",\n  \"type\": \"string\"\n}];\nclass GetTransacBlockedContactsReason {\n  static getAttributeTypeMap() {\n    return GetTransacBlockedContactsReason.attributeTypeMap;\n  }\n}\nexports.GetTransacBlockedContactsReason = GetTransacBlockedContactsReason;\nGetTransacBlockedContactsReason.discriminator = undefined;\nGetTransacBlockedContactsReason.attributeTypeMap = [{\n  \"name\": \"code\",\n  \"baseName\": \"code\",\n  \"type\": \"GetTransacBlockedContactsReason.CodeEnum\"\n}, {\n  \"name\": \"message\",\n  \"baseName\": \"message\",\n  \"type\": \"string\"\n}];\n(function (GetTransacBlockedContactsReason) {\n  let CodeEnum;\n  (function (CodeEnum) {\n    CodeEnum[CodeEnum[\"UnsubscribedViaMA\"] = 'unsubscribedViaMA'] = \"UnsubscribedViaMA\";\n    CodeEnum[CodeEnum[\"UnsubscribedViaEmail\"] = 'unsubscribedViaEmail'] = \"UnsubscribedViaEmail\";\n    CodeEnum[CodeEnum[\"AdminBlocked\"] = 'adminBlocked'] = \"AdminBlocked\";\n    CodeEnum[CodeEnum[\"UnsubscribedViaApi\"] = 'unsubscribedViaApi'] = \"UnsubscribedViaApi\";\n    CodeEnum[CodeEnum[\"HardBounce\"] = 'hardBounce'] = \"HardBounce\";\n    CodeEnum[CodeEnum[\"ContactFlaggedAsSpam\"] = 'contactFlaggedAsSpam'] = \"ContactFlaggedAsSpam\";\n  })(CodeEnum = GetTransacBlockedContactsReason.CodeEnum || (GetTransacBlockedContactsReason.CodeEnum = {}));\n})(GetTransacBlockedContactsReason = exports.GetTransacBlockedContactsReason || (exports.GetTransacBlockedContactsReason = {}));\nclass GetTransacEmailContent {\n  static getAttributeTypeMap() {\n    return GetTransacEmailContent.attributeTypeMap;\n  }\n}\nexports.GetTransacEmailContent = GetTransacEmailContent;\nGetTransacEmailContent.discriminator = undefined;\nGetTransacEmailContent.attributeTypeMap = [{\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"subject\",\n  \"baseName\": \"subject\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"templateId\",\n  \"baseName\": \"templateId\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"date\",\n  \"baseName\": \"date\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"events\",\n  \"baseName\": \"events\",\n  \"type\": \"Array<GetTransacEmailContentEvents>\"\n}, {\n  \"name\": \"body\",\n  \"baseName\": \"body\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"attachmentCount\",\n  \"baseName\": \"attachmentCount\",\n  \"type\": \"number\"\n}];\nclass GetTransacEmailContentEvents {\n  static getAttributeTypeMap() {\n    return GetTransacEmailContentEvents.attributeTypeMap;\n  }\n}\nexports.GetTransacEmailContentEvents = GetTransacEmailContentEvents;\nGetTransacEmailContentEvents.discriminator = undefined;\nGetTransacEmailContentEvents.attributeTypeMap = [{\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"time\",\n  \"baseName\": \"time\",\n  \"type\": \"string\"\n}];\nclass GetTransacEmailsList {\n  static getAttributeTypeMap() {\n    return GetTransacEmailsList.attributeTypeMap;\n  }\n}\nexports.GetTransacEmailsList = GetTransacEmailsList;\nGetTransacEmailsList.discriminator = undefined;\nGetTransacEmailsList.attributeTypeMap = [{\n  \"name\": \"count\",\n  \"baseName\": \"count\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"transactionalEmails\",\n  \"baseName\": \"transactionalEmails\",\n  \"type\": \"Array<GetTransacEmailsListTransactionalEmails>\"\n}];\nclass GetTransacEmailsListTransactionalEmails {\n  static getAttributeTypeMap() {\n    return GetTransacEmailsListTransactionalEmails.attributeTypeMap;\n  }\n}\nexports.GetTransacEmailsListTransactionalEmails = GetTransacEmailsListTransactionalEmails;\nGetTransacEmailsListTransactionalEmails.discriminator = undefined;\nGetTransacEmailsListTransactionalEmails.attributeTypeMap = [{\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"subject\",\n  \"baseName\": \"subject\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"templateId\",\n  \"baseName\": \"templateId\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"messageId\",\n  \"baseName\": \"messageId\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"uuid\",\n  \"baseName\": \"uuid\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"date\",\n  \"baseName\": \"date\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"from\",\n  \"baseName\": \"from\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"tags\",\n  \"baseName\": \"tags\",\n  \"type\": \"Array<string>\"\n}];\nclass GetTransacSmsReport {\n  static getAttributeTypeMap() {\n    return GetTransacSmsReport.attributeTypeMap;\n  }\n}\nexports.GetTransacSmsReport = GetTransacSmsReport;\nGetTransacSmsReport.discriminator = undefined;\nGetTransacSmsReport.attributeTypeMap = [{\n  \"name\": \"reports\",\n  \"baseName\": \"reports\",\n  \"type\": \"Array<GetTransacSmsReportReports>\"\n}];\nclass GetTransacSmsReportReports {\n  static getAttributeTypeMap() {\n    return GetTransacSmsReportReports.attributeTypeMap;\n  }\n}\nexports.GetTransacSmsReportReports = GetTransacSmsReportReports;\nGetTransacSmsReportReports.discriminator = undefined;\nGetTransacSmsReportReports.attributeTypeMap = [{\n  \"name\": \"date\",\n  \"baseName\": \"date\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"requests\",\n  \"baseName\": \"requests\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"delivered\",\n  \"baseName\": \"delivered\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"hardBounces\",\n  \"baseName\": \"hardBounces\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"softBounces\",\n  \"baseName\": \"softBounces\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"blocked\",\n  \"baseName\": \"blocked\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"unsubscribed\",\n  \"baseName\": \"unsubscribed\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"replied\",\n  \"baseName\": \"replied\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"accepted\",\n  \"baseName\": \"accepted\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"rejected\",\n  \"baseName\": \"rejected\",\n  \"type\": \"number\"\n}];\nclass GetWebhook {\n  static getAttributeTypeMap() {\n    return GetWebhook.attributeTypeMap;\n  }\n}\nexports.GetWebhook = GetWebhook;\nGetWebhook.discriminator = undefined;\nGetWebhook.attributeTypeMap = [{\n  \"name\": \"url\",\n  \"baseName\": \"url\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"description\",\n  \"baseName\": \"description\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"events\",\n  \"baseName\": \"events\",\n  \"type\": \"Array<string>\"\n}, {\n  \"name\": \"type\",\n  \"baseName\": \"type\",\n  \"type\": \"GetWebhook.TypeEnum\"\n}, {\n  \"name\": \"createdAt\",\n  \"baseName\": \"createdAt\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"modifiedAt\",\n  \"baseName\": \"modifiedAt\",\n  \"type\": \"string\"\n}];\n(function (GetWebhook) {\n  let TypeEnum;\n  (function (TypeEnum) {\n    TypeEnum[TypeEnum[\"Marketing\"] = 'marketing'] = \"Marketing\";\n    TypeEnum[TypeEnum[\"Transactional\"] = 'transactional'] = \"Transactional\";\n  })(TypeEnum = GetWebhook.TypeEnum || (GetWebhook.TypeEnum = {}));\n})(GetWebhook = exports.GetWebhook || (exports.GetWebhook = {}));\nclass GetWebhooks {\n  static getAttributeTypeMap() {\n    return GetWebhooks.attributeTypeMap;\n  }\n}\nexports.GetWebhooks = GetWebhooks;\nGetWebhooks.discriminator = undefined;\nGetWebhooks.attributeTypeMap = [{\n  \"name\": \"webhooks\",\n  \"baseName\": \"webhooks\",\n  \"type\": \"Array<any>\"\n}];\nclass GetWhatsappCampaignOverview {\n  static getAttributeTypeMap() {\n    return GetWhatsappCampaignOverview.attributeTypeMap;\n  }\n}\nexports.GetWhatsappCampaignOverview = GetWhatsappCampaignOverview;\nGetWhatsappCampaignOverview.discriminator = undefined;\nGetWhatsappCampaignOverview.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"campaignName\",\n  \"baseName\": \"campaignName\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"campaignStatus\",\n  \"baseName\": \"campaignStatus\",\n  \"type\": \"GetWhatsappCampaignOverview.CampaignStatusEnum\"\n}, {\n  \"name\": \"scheduledAt\",\n  \"baseName\": \"scheduledAt\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"senderNumber\",\n  \"baseName\": \"senderNumber\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"stats\",\n  \"baseName\": \"stats\",\n  \"type\": \"WhatsappCampStats\"\n}, {\n  \"name\": \"template\",\n  \"baseName\": \"template\",\n  \"type\": \"WhatsappCampTemplate\"\n}, {\n  \"name\": \"createdAt\",\n  \"baseName\": \"createdAt\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"modifiedAt\",\n  \"baseName\": \"modifiedAt\",\n  \"type\": \"string\"\n}];\n(function (GetWhatsappCampaignOverview) {\n  let CampaignStatusEnum;\n  (function (CampaignStatusEnum) {\n    CampaignStatusEnum[CampaignStatusEnum[\"Draft\"] = 'draft'] = \"Draft\";\n    CampaignStatusEnum[CampaignStatusEnum[\"Scheduled\"] = 'scheduled'] = \"Scheduled\";\n    CampaignStatusEnum[CampaignStatusEnum[\"Pending\"] = 'pending'] = \"Pending\";\n    CampaignStatusEnum[CampaignStatusEnum[\"Approved\"] = 'approved'] = \"Approved\";\n    CampaignStatusEnum[CampaignStatusEnum[\"Running\"] = 'running'] = \"Running\";\n    CampaignStatusEnum[CampaignStatusEnum[\"Suspended\"] = 'suspended'] = \"Suspended\";\n    CampaignStatusEnum[CampaignStatusEnum[\"Rejected\"] = 'rejected'] = \"Rejected\";\n    CampaignStatusEnum[CampaignStatusEnum[\"Sent\"] = 'sent'] = \"Sent\";\n  })(CampaignStatusEnum = GetWhatsappCampaignOverview.CampaignStatusEnum || (GetWhatsappCampaignOverview.CampaignStatusEnum = {}));\n})(GetWhatsappCampaignOverview = exports.GetWhatsappCampaignOverview || (exports.GetWhatsappCampaignOverview = {}));\nclass InlineResponse200 {\n  static getAttributeTypeMap() {\n    return InlineResponse200.attributeTypeMap;\n  }\n}\nexports.InlineResponse200 = InlineResponse200;\nInlineResponse200.discriminator = undefined;\nInlineResponse200.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"string\"\n}];\nclass InlineResponse201 {\n  static getAttributeTypeMap() {\n    return InlineResponse201.attributeTypeMap;\n  }\n}\nexports.InlineResponse201 = InlineResponse201;\nInlineResponse201.discriminator = undefined;\nInlineResponse201.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"string\"\n}];\nclass InlineResponse2011 {\n  static getAttributeTypeMap() {\n    return InlineResponse2011.attributeTypeMap;\n  }\n}\nexports.InlineResponse2011 = InlineResponse2011;\nInlineResponse2011.discriminator = undefined;\nInlineResponse2011.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"string\"\n}];\nclass ManageIp {\n  static getAttributeTypeMap() {\n    return ManageIp.attributeTypeMap;\n  }\n}\nexports.ManageIp = ManageIp;\nManageIp.discriminator = undefined;\nManageIp.attributeTypeMap = [{\n  \"name\": \"ip\",\n  \"baseName\": \"ip\",\n  \"type\": \"string\"\n}];\nclass MasterDetailsResponse {\n  static getAttributeTypeMap() {\n    return MasterDetailsResponse.attributeTypeMap;\n  }\n}\nexports.MasterDetailsResponse = MasterDetailsResponse;\nMasterDetailsResponse.discriminator = undefined;\nMasterDetailsResponse.attributeTypeMap = [{\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"companyName\",\n  \"baseName\": \"companyName\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"currencyCode\",\n  \"baseName\": \"currencyCode\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"timezone\",\n  \"baseName\": \"timezone\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"billingInfo\",\n  \"baseName\": \"billingInfo\",\n  \"type\": \"MasterDetailsResponseBillingInfo\"\n}, {\n  \"name\": \"planInfo\",\n  \"baseName\": \"planInfo\",\n  \"type\": \"MasterDetailsResponsePlanInfo\"\n}];\nclass MasterDetailsResponseBillingInfo {\n  static getAttributeTypeMap() {\n    return MasterDetailsResponseBillingInfo.attributeTypeMap;\n  }\n}\nexports.MasterDetailsResponseBillingInfo = MasterDetailsResponseBillingInfo;\nMasterDetailsResponseBillingInfo.discriminator = undefined;\nMasterDetailsResponseBillingInfo.attributeTypeMap = [{\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"companyName\",\n  \"baseName\": \"companyName\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"MasterDetailsResponseBillingInfoName\"\n}, {\n  \"name\": \"address\",\n  \"baseName\": \"address\",\n  \"type\": \"MasterDetailsResponseBillingInfoAddress\"\n}];\nclass MasterDetailsResponseBillingInfoAddress {\n  static getAttributeTypeMap() {\n    return MasterDetailsResponseBillingInfoAddress.attributeTypeMap;\n  }\n}\nexports.MasterDetailsResponseBillingInfoAddress = MasterDetailsResponseBillingInfoAddress;\nMasterDetailsResponseBillingInfoAddress.discriminator = undefined;\nMasterDetailsResponseBillingInfoAddress.attributeTypeMap = [{\n  \"name\": \"streetAddress\",\n  \"baseName\": \"streetAddress\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"locality\",\n  \"baseName\": \"locality\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"postalCode\",\n  \"baseName\": \"postalCode\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"stateCode\",\n  \"baseName\": \"stateCode\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"countryCode\",\n  \"baseName\": \"countryCode\",\n  \"type\": \"string\"\n}];\nclass MasterDetailsResponseBillingInfoName {\n  static getAttributeTypeMap() {\n    return MasterDetailsResponseBillingInfoName.attributeTypeMap;\n  }\n}\nexports.MasterDetailsResponseBillingInfoName = MasterDetailsResponseBillingInfoName;\nMasterDetailsResponseBillingInfoName.discriminator = undefined;\nMasterDetailsResponseBillingInfoName.attributeTypeMap = [{\n  \"name\": \"givenName\",\n  \"baseName\": \"givenName\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"familyName\",\n  \"baseName\": \"familyName\",\n  \"type\": \"string\"\n}];\nclass MasterDetailsResponsePlanInfo {\n  static getAttributeTypeMap() {\n    return MasterDetailsResponsePlanInfo.attributeTypeMap;\n  }\n}\nexports.MasterDetailsResponsePlanInfo = MasterDetailsResponsePlanInfo;\nMasterDetailsResponsePlanInfo.discriminator = undefined;\nMasterDetailsResponsePlanInfo.attributeTypeMap = [{\n  \"name\": \"currencyCode\",\n  \"baseName\": \"currencyCode\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"nextBillingAt\",\n  \"baseName\": \"nextBillingAt\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"price\",\n  \"baseName\": \"price\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"planPeriod\",\n  \"baseName\": \"planPeriod\",\n  \"type\": \"MasterDetailsResponsePlanInfo.PlanPeriodEnum\"\n}, {\n  \"name\": \"subAccounts\",\n  \"baseName\": \"subAccounts\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"features\",\n  \"baseName\": \"features\",\n  \"type\": \"Array<MasterDetailsResponsePlanInfoFeatures>\"\n}];\n(function (MasterDetailsResponsePlanInfo) {\n  let PlanPeriodEnum;\n  (function (PlanPeriodEnum) {\n    PlanPeriodEnum[PlanPeriodEnum[\"Month\"] = 'month'] = \"Month\";\n    PlanPeriodEnum[PlanPeriodEnum[\"Year\"] = 'year'] = \"Year\";\n  })(PlanPeriodEnum = MasterDetailsResponsePlanInfo.PlanPeriodEnum || (MasterDetailsResponsePlanInfo.PlanPeriodEnum = {}));\n})(MasterDetailsResponsePlanInfo = exports.MasterDetailsResponsePlanInfo || (exports.MasterDetailsResponsePlanInfo = {}));\nclass MasterDetailsResponsePlanInfoFeatures {\n  static getAttributeTypeMap() {\n    return MasterDetailsResponsePlanInfoFeatures.attributeTypeMap;\n  }\n}\nexports.MasterDetailsResponsePlanInfoFeatures = MasterDetailsResponsePlanInfoFeatures;\nMasterDetailsResponsePlanInfoFeatures.discriminator = undefined;\nMasterDetailsResponsePlanInfoFeatures.attributeTypeMap = [{\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"unitValue\",\n  \"baseName\": \"unitValue\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"quantity\",\n  \"baseName\": \"quantity\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"used\",\n  \"baseName\": \"used\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"remaining\",\n  \"baseName\": \"remaining\",\n  \"type\": \"number\"\n}];\nclass Note {\n  static getAttributeTypeMap() {\n    return Note.attributeTypeMap;\n  }\n}\nexports.Note = Note;\nNote.discriminator = undefined;\nNote.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"text\",\n  \"baseName\": \"text\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"contactIds\",\n  \"baseName\": \"contactIds\",\n  \"type\": \"Array<number>\"\n}, {\n  \"name\": \"dealIds\",\n  \"baseName\": \"dealIds\",\n  \"type\": \"Array<string>\"\n}, {\n  \"name\": \"authorId\",\n  \"baseName\": \"authorId\",\n  \"type\": \"any\"\n}, {\n  \"name\": \"createdAt\",\n  \"baseName\": \"createdAt\",\n  \"type\": \"Date\"\n}, {\n  \"name\": \"updatedAt\",\n  \"baseName\": \"updatedAt\",\n  \"type\": \"Date\"\n}];\nclass NoteData {\n  static getAttributeTypeMap() {\n    return NoteData.attributeTypeMap;\n  }\n}\nexports.NoteData = NoteData;\nNoteData.discriminator = undefined;\nNoteData.attributeTypeMap = [{\n  \"name\": \"text\",\n  \"baseName\": \"text\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"contactIds\",\n  \"baseName\": \"contactIds\",\n  \"type\": \"Array<number>\"\n}, {\n  \"name\": \"dealIds\",\n  \"baseName\": \"dealIds\",\n  \"type\": \"Array<string>\"\n}, {\n  \"name\": \"companyIds\",\n  \"baseName\": \"companyIds\",\n  \"type\": \"Array<string>\"\n}];\nclass NoteId {\n  static getAttributeTypeMap() {\n    return NoteId.attributeTypeMap;\n  }\n}\nexports.NoteId = NoteId;\nNoteId.discriminator = undefined;\nNoteId.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"string\"\n}];\nclass NoteList extends Array {}\nexports.NoteList = NoteList;\nNoteList.discriminator = undefined;\nclass Order {\n  static getAttributeTypeMap() {\n    return Order.attributeTypeMap;\n  }\n}\nexports.Order = Order;\nOrder.discriminator = undefined;\nOrder.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"createdAt\",\n  \"baseName\": \"createdAt\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"updatedAt\",\n  \"baseName\": \"updatedAt\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"status\",\n  \"baseName\": \"status\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"amount\",\n  \"baseName\": \"amount\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"products\",\n  \"baseName\": \"products\",\n  \"type\": \"Array<OrderProducts>\"\n}, {\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"billing\",\n  \"baseName\": \"billing\",\n  \"type\": \"OrderBilling\"\n}, {\n  \"name\": \"coupons\",\n  \"baseName\": \"coupons\",\n  \"type\": \"Array<string>\"\n}];\nclass OrderBatch {\n  static getAttributeTypeMap() {\n    return OrderBatch.attributeTypeMap;\n  }\n}\nexports.OrderBatch = OrderBatch;\nOrderBatch.discriminator = undefined;\nOrderBatch.attributeTypeMap = [{\n  \"name\": \"orders\",\n  \"baseName\": \"orders\",\n  \"type\": \"Array<Order>\"\n}, {\n  \"name\": \"notifyUrl\",\n  \"baseName\": \"notifyUrl\",\n  \"type\": \"string\"\n}];\nclass OrderBilling {\n  static getAttributeTypeMap() {\n    return OrderBilling.attributeTypeMap;\n  }\n}\nexports.OrderBilling = OrderBilling;\nOrderBilling.discriminator = undefined;\nOrderBilling.attributeTypeMap = [{\n  \"name\": \"address\",\n  \"baseName\": \"address\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"city\",\n  \"baseName\": \"city\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"countryCode\",\n  \"baseName\": \"countryCode\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"phone\",\n  \"baseName\": \"phone\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"postCode\",\n  \"baseName\": \"postCode\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"paymentMethod\",\n  \"baseName\": \"paymentMethod\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"region\",\n  \"baseName\": \"region\",\n  \"type\": \"string\"\n}];\nclass OrderProducts {\n  static getAttributeTypeMap() {\n    return OrderProducts.attributeTypeMap;\n  }\n}\nexports.OrderProducts = OrderProducts;\nOrderProducts.discriminator = undefined;\nOrderProducts.attributeTypeMap = [{\n  \"name\": \"productId\",\n  \"baseName\": \"productId\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"quantity\",\n  \"baseName\": \"quantity\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"variantId\",\n  \"baseName\": \"variantId\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"price\",\n  \"baseName\": \"price\",\n  \"type\": \"number\"\n}];\nclass Pipeline {\n  static getAttributeTypeMap() {\n    return Pipeline.attributeTypeMap;\n  }\n}\nexports.Pipeline = Pipeline;\nPipeline.discriminator = undefined;\nPipeline.attributeTypeMap = [{\n  \"name\": \"stages\",\n  \"baseName\": \"stages\",\n  \"type\": \"Array<PipelineStage>\"\n}];\nclass PipelineStage {\n  static getAttributeTypeMap() {\n    return PipelineStage.attributeTypeMap;\n  }\n}\nexports.PipelineStage = PipelineStage;\nPipelineStage.discriminator = undefined;\nPipelineStage.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}];\nclass PostContactInfo {\n  static getAttributeTypeMap() {\n    return PostContactInfo.attributeTypeMap;\n  }\n}\nexports.PostContactInfo = PostContactInfo;\nPostContactInfo.discriminator = undefined;\nPostContactInfo.attributeTypeMap = [{\n  \"name\": \"contacts\",\n  \"baseName\": \"contacts\",\n  \"type\": \"PostContactInfoContacts\"\n}];\nclass PostContactInfoContacts {\n  static getAttributeTypeMap() {\n    return PostContactInfoContacts.attributeTypeMap;\n  }\n}\nexports.PostContactInfoContacts = PostContactInfoContacts;\nPostContactInfoContacts.discriminator = undefined;\nPostContactInfoContacts.attributeTypeMap = [{\n  \"name\": \"success\",\n  \"baseName\": \"success\",\n  \"type\": \"Array<string>\"\n}, {\n  \"name\": \"failure\",\n  \"baseName\": \"failure\",\n  \"type\": \"Array<string>\"\n}, {\n  \"name\": \"total\",\n  \"baseName\": \"total\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"processId\",\n  \"baseName\": \"processId\",\n  \"type\": \"number\"\n}];\nclass PostSendFailed {\n  static getAttributeTypeMap() {\n    return PostSendFailed.attributeTypeMap;\n  }\n}\nexports.PostSendFailed = PostSendFailed;\nPostSendFailed.discriminator = undefined;\nPostSendFailed.attributeTypeMap = [{\n  \"name\": \"code\",\n  \"baseName\": \"code\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"message\",\n  \"baseName\": \"message\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"unexistingEmails\",\n  \"baseName\": \"unexistingEmails\",\n  \"type\": \"Array<string>\"\n}, {\n  \"name\": \"withoutListEmails\",\n  \"baseName\": \"withoutListEmails\",\n  \"type\": \"Array<string>\"\n}, {\n  \"name\": \"blackListedEmails\",\n  \"baseName\": \"blackListedEmails\",\n  \"type\": \"Array<string>\"\n}];\nclass PostSendSmsTestFailed {\n  static getAttributeTypeMap() {\n    return PostSendSmsTestFailed.attributeTypeMap;\n  }\n}\nexports.PostSendSmsTestFailed = PostSendSmsTestFailed;\nPostSendSmsTestFailed.discriminator = undefined;\nPostSendSmsTestFailed.attributeTypeMap = [{\n  \"name\": \"code\",\n  \"baseName\": \"code\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"message\",\n  \"baseName\": \"message\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"unexistingSms\",\n  \"baseName\": \"unexistingSms\",\n  \"type\": \"Array<string>\"\n}, {\n  \"name\": \"withoutListSms\",\n  \"baseName\": \"withoutListSms\",\n  \"type\": \"Array<string>\"\n}];\nclass RemainingCreditModel {\n  static getAttributeTypeMap() {\n    return RemainingCreditModel.attributeTypeMap;\n  }\n}\nexports.RemainingCreditModel = RemainingCreditModel;\nRemainingCreditModel.discriminator = undefined;\nRemainingCreditModel.attributeTypeMap = [{\n  \"name\": \"child\",\n  \"baseName\": \"child\",\n  \"type\": \"RemainingCreditModelChild\"\n}, {\n  \"name\": \"reseller\",\n  \"baseName\": \"reseller\",\n  \"type\": \"RemainingCreditModelReseller\"\n}];\nclass RemainingCreditModelChild {\n  static getAttributeTypeMap() {\n    return RemainingCreditModelChild.attributeTypeMap;\n  }\n}\nexports.RemainingCreditModelChild = RemainingCreditModelChild;\nRemainingCreditModelChild.discriminator = undefined;\nRemainingCreditModelChild.attributeTypeMap = [{\n  \"name\": \"sms\",\n  \"baseName\": \"sms\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"number\"\n}];\nclass RemainingCreditModelReseller {\n  static getAttributeTypeMap() {\n    return RemainingCreditModelReseller.attributeTypeMap;\n  }\n}\nexports.RemainingCreditModelReseller = RemainingCreditModelReseller;\nRemainingCreditModelReseller.discriminator = undefined;\nRemainingCreditModelReseller.attributeTypeMap = [{\n  \"name\": \"sms\",\n  \"baseName\": \"sms\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"number\"\n}];\nclass RemoveContactFromList {\n  static getAttributeTypeMap() {\n    return RemoveContactFromList.attributeTypeMap;\n  }\n}\nexports.RemoveContactFromList = RemoveContactFromList;\nRemoveContactFromList.discriminator = undefined;\nRemoveContactFromList.attributeTypeMap = [{\n  \"name\": \"emails\",\n  \"baseName\": \"emails\",\n  \"type\": \"Array<string>\"\n}, {\n  \"name\": \"ids\",\n  \"baseName\": \"ids\",\n  \"type\": \"Array<number>\"\n}, {\n  \"name\": \"all\",\n  \"baseName\": \"all\",\n  \"type\": \"boolean\"\n}];\nclass RemoveCredits {\n  static getAttributeTypeMap() {\n    return RemoveCredits.attributeTypeMap;\n  }\n}\nexports.RemoveCredits = RemoveCredits;\nRemoveCredits.discriminator = undefined;\nRemoveCredits.attributeTypeMap = [{\n  \"name\": \"sms\",\n  \"baseName\": \"sms\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"number\"\n}];\nclass RequestContactExport {\n  static getAttributeTypeMap() {\n    return RequestContactExport.attributeTypeMap;\n  }\n}\nexports.RequestContactExport = RequestContactExport;\nRequestContactExport.discriminator = undefined;\nRequestContactExport.attributeTypeMap = [{\n  \"name\": \"exportAttributes\",\n  \"baseName\": \"exportAttributes\",\n  \"type\": \"Array<string>\"\n}, {\n  \"name\": \"customContactFilter\",\n  \"baseName\": \"customContactFilter\",\n  \"type\": \"RequestContactExportCustomContactFilter\"\n}, {\n  \"name\": \"notifyUrl\",\n  \"baseName\": \"notifyUrl\",\n  \"type\": \"string\"\n}];\nclass RequestContactExportCustomContactFilter {\n  static getAttributeTypeMap() {\n    return RequestContactExportCustomContactFilter.attributeTypeMap;\n  }\n}\nexports.RequestContactExportCustomContactFilter = RequestContactExportCustomContactFilter;\nRequestContactExportCustomContactFilter.discriminator = undefined;\nRequestContactExportCustomContactFilter.attributeTypeMap = [{\n  \"name\": \"actionForContacts\",\n  \"baseName\": \"actionForContacts\",\n  \"type\": \"RequestContactExportCustomContactFilter.ActionForContactsEnum\"\n}, {\n  \"name\": \"actionForEmailCampaigns\",\n  \"baseName\": \"actionForEmailCampaigns\",\n  \"type\": \"RequestContactExportCustomContactFilter.ActionForEmailCampaignsEnum\"\n}, {\n  \"name\": \"actionForSmsCampaigns\",\n  \"baseName\": \"actionForSmsCampaigns\",\n  \"type\": \"RequestContactExportCustomContactFilter.ActionForSmsCampaignsEnum\"\n}, {\n  \"name\": \"listId\",\n  \"baseName\": \"listId\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"emailCampaignId\",\n  \"baseName\": \"emailCampaignId\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"smsCampaignId\",\n  \"baseName\": \"smsCampaignId\",\n  \"type\": \"number\"\n}];\n(function (RequestContactExportCustomContactFilter) {\n  let ActionForContactsEnum;\n  (function (ActionForContactsEnum) {\n    ActionForContactsEnum[ActionForContactsEnum[\"AllContacts\"] = 'allContacts'] = \"AllContacts\";\n    ActionForContactsEnum[ActionForContactsEnum[\"Subscribed\"] = 'subscribed'] = \"Subscribed\";\n    ActionForContactsEnum[ActionForContactsEnum[\"Unsubscribed\"] = 'unsubscribed'] = \"Unsubscribed\";\n    ActionForContactsEnum[ActionForContactsEnum[\"UnsubscribedPerList\"] = 'unsubscribedPerList'] = \"UnsubscribedPerList\";\n  })(ActionForContactsEnum = RequestContactExportCustomContactFilter.ActionForContactsEnum || (RequestContactExportCustomContactFilter.ActionForContactsEnum = {}));\n  let ActionForEmailCampaignsEnum;\n  (function (ActionForEmailCampaignsEnum) {\n    ActionForEmailCampaignsEnum[ActionForEmailCampaignsEnum[\"Openers\"] = 'openers'] = \"Openers\";\n    ActionForEmailCampaignsEnum[ActionForEmailCampaignsEnum[\"NonOpeners\"] = 'nonOpeners'] = \"NonOpeners\";\n    ActionForEmailCampaignsEnum[ActionForEmailCampaignsEnum[\"Clickers\"] = 'clickers'] = \"Clickers\";\n    ActionForEmailCampaignsEnum[ActionForEmailCampaignsEnum[\"NonClickers\"] = 'nonClickers'] = \"NonClickers\";\n    ActionForEmailCampaignsEnum[ActionForEmailCampaignsEnum[\"Unsubscribed\"] = 'unsubscribed'] = \"Unsubscribed\";\n    ActionForEmailCampaignsEnum[ActionForEmailCampaignsEnum[\"HardBounces\"] = 'hardBounces'] = \"HardBounces\";\n    ActionForEmailCampaignsEnum[ActionForEmailCampaignsEnum[\"SoftBounces\"] = 'softBounces'] = \"SoftBounces\";\n  })(ActionForEmailCampaignsEnum = RequestContactExportCustomContactFilter.ActionForEmailCampaignsEnum || (RequestContactExportCustomContactFilter.ActionForEmailCampaignsEnum = {}));\n  let ActionForSmsCampaignsEnum;\n  (function (ActionForSmsCampaignsEnum) {\n    ActionForSmsCampaignsEnum[ActionForSmsCampaignsEnum[\"HardBounces\"] = 'hardBounces'] = \"HardBounces\";\n    ActionForSmsCampaignsEnum[ActionForSmsCampaignsEnum[\"SoftBounces\"] = 'softBounces'] = \"SoftBounces\";\n    ActionForSmsCampaignsEnum[ActionForSmsCampaignsEnum[\"Unsubscribed\"] = 'unsubscribed'] = \"Unsubscribed\";\n  })(ActionForSmsCampaignsEnum = RequestContactExportCustomContactFilter.ActionForSmsCampaignsEnum || (RequestContactExportCustomContactFilter.ActionForSmsCampaignsEnum = {}));\n})(RequestContactExportCustomContactFilter = exports.RequestContactExportCustomContactFilter || (exports.RequestContactExportCustomContactFilter = {}));\nclass RequestContactImport {\n  static getAttributeTypeMap() {\n    return RequestContactImport.attributeTypeMap;\n  }\n}\nexports.RequestContactImport = RequestContactImport;\nRequestContactImport.discriminator = undefined;\nRequestContactImport.attributeTypeMap = [{\n  \"name\": \"fileUrl\",\n  \"baseName\": \"fileUrl\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"fileBody\",\n  \"baseName\": \"fileBody\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"jsonBody\",\n  \"baseName\": \"jsonBody\",\n  \"type\": \"Array<{ [key: string]: any; }>\"\n}, {\n  \"name\": \"listIds\",\n  \"baseName\": \"listIds\",\n  \"type\": \"Array<number>\"\n}, {\n  \"name\": \"notifyUrl\",\n  \"baseName\": \"notifyUrl\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"newList\",\n  \"baseName\": \"newList\",\n  \"type\": \"RequestContactImportNewList\"\n}, {\n  \"name\": \"emailBlacklist\",\n  \"baseName\": \"emailBlacklist\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"smsBlacklist\",\n  \"baseName\": \"smsBlacklist\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"updateExistingContacts\",\n  \"baseName\": \"updateExistingContacts\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"emptyContactsAttributes\",\n  \"baseName\": \"emptyContactsAttributes\",\n  \"type\": \"boolean\"\n}];\nclass RequestContactImportNewList {\n  static getAttributeTypeMap() {\n    return RequestContactImportNewList.attributeTypeMap;\n  }\n}\nexports.RequestContactImportNewList = RequestContactImportNewList;\nRequestContactImportNewList.discriminator = undefined;\nRequestContactImportNewList.attributeTypeMap = [{\n  \"name\": \"listName\",\n  \"baseName\": \"listName\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"folderId\",\n  \"baseName\": \"folderId\",\n  \"type\": \"number\"\n}];\nclass RequestSmsRecipientExport {\n  static getAttributeTypeMap() {\n    return RequestSmsRecipientExport.attributeTypeMap;\n  }\n}\nexports.RequestSmsRecipientExport = RequestSmsRecipientExport;\nRequestSmsRecipientExport.discriminator = undefined;\nRequestSmsRecipientExport.attributeTypeMap = [{\n  \"name\": \"notifyURL\",\n  \"baseName\": \"notifyURL\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"recipientsType\",\n  \"baseName\": \"recipientsType\",\n  \"type\": \"RequestSmsRecipientExport.RecipientsTypeEnum\"\n}];\n(function (RequestSmsRecipientExport) {\n  let RecipientsTypeEnum;\n  (function (RecipientsTypeEnum) {\n    RecipientsTypeEnum[RecipientsTypeEnum[\"All\"] = 'all'] = \"All\";\n    RecipientsTypeEnum[RecipientsTypeEnum[\"Delivered\"] = 'delivered'] = \"Delivered\";\n    RecipientsTypeEnum[RecipientsTypeEnum[\"Answered\"] = 'answered'] = \"Answered\";\n    RecipientsTypeEnum[RecipientsTypeEnum[\"SoftBounces\"] = 'softBounces'] = \"SoftBounces\";\n    RecipientsTypeEnum[RecipientsTypeEnum[\"HardBounces\"] = 'hardBounces'] = \"HardBounces\";\n    RecipientsTypeEnum[RecipientsTypeEnum[\"Unsubscribed\"] = 'unsubscribed'] = \"Unsubscribed\";\n  })(RecipientsTypeEnum = RequestSmsRecipientExport.RecipientsTypeEnum || (RequestSmsRecipientExport.RecipientsTypeEnum = {}));\n})(RequestSmsRecipientExport = exports.RequestSmsRecipientExport || (exports.RequestSmsRecipientExport = {}));\nclass ScheduleSmtpEmail {\n  static getAttributeTypeMap() {\n    return ScheduleSmtpEmail.attributeTypeMap;\n  }\n}\nexports.ScheduleSmtpEmail = ScheduleSmtpEmail;\nScheduleSmtpEmail.discriminator = undefined;\nScheduleSmtpEmail.attributeTypeMap = [{\n  \"name\": \"messageId\",\n  \"baseName\": \"messageId\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"messageIds\",\n  \"baseName\": \"messageIds\",\n  \"type\": \"Array<string>\"\n}, {\n  \"name\": \"batchId\",\n  \"baseName\": \"batchId\",\n  \"type\": \"string\"\n}];\nclass SendReport {\n  static getAttributeTypeMap() {\n    return SendReport.attributeTypeMap;\n  }\n}\nexports.SendReport = SendReport;\nSendReport.discriminator = undefined;\nSendReport.attributeTypeMap = [{\n  \"name\": \"language\",\n  \"baseName\": \"language\",\n  \"type\": \"SendReport.LanguageEnum\"\n}, {\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"SendReportEmail\"\n}];\n(function (SendReport) {\n  let LanguageEnum;\n  (function (LanguageEnum) {\n    LanguageEnum[LanguageEnum[\"Fr\"] = 'fr'] = \"Fr\";\n    LanguageEnum[LanguageEnum[\"Es\"] = 'es'] = \"Es\";\n    LanguageEnum[LanguageEnum[\"Pt\"] = 'pt'] = \"Pt\";\n    LanguageEnum[LanguageEnum[\"It\"] = 'it'] = \"It\";\n    LanguageEnum[LanguageEnum[\"De\"] = 'de'] = \"De\";\n    LanguageEnum[LanguageEnum[\"En\"] = 'en'] = \"En\";\n  })(LanguageEnum = SendReport.LanguageEnum || (SendReport.LanguageEnum = {}));\n})(SendReport = exports.SendReport || (exports.SendReport = {}));\nclass SendReportEmail {\n  static getAttributeTypeMap() {\n    return SendReportEmail.attributeTypeMap;\n  }\n}\nexports.SendReportEmail = SendReportEmail;\nSendReportEmail.discriminator = undefined;\nSendReportEmail.attributeTypeMap = [{\n  \"name\": \"to\",\n  \"baseName\": \"to\",\n  \"type\": \"Array<string>\"\n}, {\n  \"name\": \"body\",\n  \"baseName\": \"body\",\n  \"type\": \"string\"\n}];\nclass SendSms {\n  static getAttributeTypeMap() {\n    return SendSms.attributeTypeMap;\n  }\n}\nexports.SendSms = SendSms;\nSendSms.discriminator = undefined;\nSendSms.attributeTypeMap = [{\n  \"name\": \"reference\",\n  \"baseName\": \"reference\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"messageId\",\n  \"baseName\": \"messageId\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"smsCount\",\n  \"baseName\": \"smsCount\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"usedCredits\",\n  \"baseName\": \"usedCredits\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"remainingCredits\",\n  \"baseName\": \"remainingCredits\",\n  \"type\": \"number\"\n}];\nclass SendSmtpEmail {\n  static getAttributeTypeMap() {\n    return SendSmtpEmail.attributeTypeMap;\n  }\n}\nexports.SendSmtpEmail = SendSmtpEmail;\nSendSmtpEmail.discriminator = undefined;\nSendSmtpEmail.attributeTypeMap = [{\n  \"name\": \"sender\",\n  \"baseName\": \"sender\",\n  \"type\": \"SendSmtpEmailSender\"\n}, {\n  \"name\": \"to\",\n  \"baseName\": \"to\",\n  \"type\": \"Array<SendSmtpEmailTo>\"\n}, {\n  \"name\": \"bcc\",\n  \"baseName\": \"bcc\",\n  \"type\": \"Array<SendSmtpEmailBcc>\"\n}, {\n  \"name\": \"cc\",\n  \"baseName\": \"cc\",\n  \"type\": \"Array<SendSmtpEmailCc>\"\n}, {\n  \"name\": \"htmlContent\",\n  \"baseName\": \"htmlContent\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"textContent\",\n  \"baseName\": \"textContent\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"subject\",\n  \"baseName\": \"subject\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"replyTo\",\n  \"baseName\": \"replyTo\",\n  \"type\": \"SendSmtpEmailReplyTo\"\n}, {\n  \"name\": \"attachment\",\n  \"baseName\": \"attachment\",\n  \"type\": \"Array<SendSmtpEmailAttachment>\"\n}, {\n  \"name\": \"headers\",\n  \"baseName\": \"headers\",\n  \"type\": \"any\"\n}, {\n  \"name\": \"templateId\",\n  \"baseName\": \"templateId\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"params\",\n  \"baseName\": \"params\",\n  \"type\": \"any\"\n}, {\n  \"name\": \"messageVersions\",\n  \"baseName\": \"messageVersions\",\n  \"type\": \"Array<SendSmtpEmailMessageVersions>\"\n}, {\n  \"name\": \"tags\",\n  \"baseName\": \"tags\",\n  \"type\": \"Array<string>\"\n}, {\n  \"name\": \"scheduledAt\",\n  \"baseName\": \"scheduledAt\",\n  \"type\": \"String\"\n}, {\n  \"name\": \"batchId\",\n  \"baseName\": \"batchId\",\n  \"type\": \"string\"\n}];\nclass SendSmtpEmailAttachment {\n  static getAttributeTypeMap() {\n    return SendSmtpEmailAttachment.attributeTypeMap;\n  }\n}\nexports.SendSmtpEmailAttachment = SendSmtpEmailAttachment;\nSendSmtpEmailAttachment.discriminator = undefined;\nSendSmtpEmailAttachment.attributeTypeMap = [{\n  \"name\": \"url\",\n  \"baseName\": \"url\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"content\",\n  \"baseName\": \"content\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}];\nclass SendSmtpEmailBcc {\n  static getAttributeTypeMap() {\n    return SendSmtpEmailBcc.attributeTypeMap;\n  }\n}\nexports.SendSmtpEmailBcc = SendSmtpEmailBcc;\nSendSmtpEmailBcc.discriminator = undefined;\nSendSmtpEmailBcc.attributeTypeMap = [{\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}];\nclass SendSmtpEmailCc {\n  static getAttributeTypeMap() {\n    return SendSmtpEmailCc.attributeTypeMap;\n  }\n}\nexports.SendSmtpEmailCc = SendSmtpEmailCc;\nSendSmtpEmailCc.discriminator = undefined;\nSendSmtpEmailCc.attributeTypeMap = [{\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}];\nclass SendSmtpEmailMessageVersions {\n  static getAttributeTypeMap() {\n    return SendSmtpEmailMessageVersions.attributeTypeMap;\n  }\n}\nexports.SendSmtpEmailMessageVersions = SendSmtpEmailMessageVersions;\nSendSmtpEmailMessageVersions.discriminator = undefined;\nSendSmtpEmailMessageVersions.attributeTypeMap = [{\n  \"name\": \"to\",\n  \"baseName\": \"to\",\n  \"type\": \"Array<SendSmtpEmailTo1>\"\n}, {\n  \"name\": \"params\",\n  \"baseName\": \"params\",\n  \"type\": \"{ [key: string]: any; }\"\n}, {\n  \"name\": \"bcc\",\n  \"baseName\": \"bcc\",\n  \"type\": \"Array<SendSmtpEmailBcc>\"\n}, {\n  \"name\": \"cc\",\n  \"baseName\": \"cc\",\n  \"type\": \"Array<SendSmtpEmailCc>\"\n}, {\n  \"name\": \"replyTo\",\n  \"baseName\": \"replyTo\",\n  \"type\": \"SendSmtpEmailReplyTo1\"\n}, {\n  \"name\": \"subject\",\n  \"baseName\": \"subject\",\n  \"type\": \"string\"\n}];\nclass SendSmtpEmailReplyTo {\n  static getAttributeTypeMap() {\n    return SendSmtpEmailReplyTo.attributeTypeMap;\n  }\n}\nexports.SendSmtpEmailReplyTo = SendSmtpEmailReplyTo;\nSendSmtpEmailReplyTo.discriminator = undefined;\nSendSmtpEmailReplyTo.attributeTypeMap = [{\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}];\nclass SendSmtpEmailReplyTo1 {\n  static getAttributeTypeMap() {\n    return SendSmtpEmailReplyTo1.attributeTypeMap;\n  }\n}\nexports.SendSmtpEmailReplyTo1 = SendSmtpEmailReplyTo1;\nSendSmtpEmailReplyTo1.discriminator = undefined;\nSendSmtpEmailReplyTo1.attributeTypeMap = [{\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}];\nclass SendSmtpEmailSender {\n  static getAttributeTypeMap() {\n    return SendSmtpEmailSender.attributeTypeMap;\n  }\n}\nexports.SendSmtpEmailSender = SendSmtpEmailSender;\nSendSmtpEmailSender.discriminator = undefined;\nSendSmtpEmailSender.attributeTypeMap = [{\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"number\"\n}];\nclass SendSmtpEmailTo {\n  static getAttributeTypeMap() {\n    return SendSmtpEmailTo.attributeTypeMap;\n  }\n}\nexports.SendSmtpEmailTo = SendSmtpEmailTo;\nSendSmtpEmailTo.discriminator = undefined;\nSendSmtpEmailTo.attributeTypeMap = [{\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}];\nclass SendSmtpEmailTo1 {\n  static getAttributeTypeMap() {\n    return SendSmtpEmailTo1.attributeTypeMap;\n  }\n}\nexports.SendSmtpEmailTo1 = SendSmtpEmailTo1;\nSendSmtpEmailTo1.discriminator = undefined;\nSendSmtpEmailTo1.attributeTypeMap = [{\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}];\nclass SendTestEmail {\n  static getAttributeTypeMap() {\n    return SendTestEmail.attributeTypeMap;\n  }\n}\nexports.SendTestEmail = SendTestEmail;\nSendTestEmail.discriminator = undefined;\nSendTestEmail.attributeTypeMap = [{\n  \"name\": \"emailTo\",\n  \"baseName\": \"emailTo\",\n  \"type\": \"Array<string>\"\n}];\nclass SendTestSms {\n  static getAttributeTypeMap() {\n    return SendTestSms.attributeTypeMap;\n  }\n}\nexports.SendTestSms = SendTestSms;\nSendTestSms.discriminator = undefined;\nSendTestSms.attributeTypeMap = [{\n  \"name\": \"phoneNumber\",\n  \"baseName\": \"phoneNumber\",\n  \"type\": \"string\"\n}];\nclass SendTransacSms {\n  static getAttributeTypeMap() {\n    return SendTransacSms.attributeTypeMap;\n  }\n}\nexports.SendTransacSms = SendTransacSms;\nSendTransacSms.discriminator = undefined;\nSendTransacSms.attributeTypeMap = [{\n  \"name\": \"sender\",\n  \"baseName\": \"sender\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"recipient\",\n  \"baseName\": \"recipient\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"content\",\n  \"baseName\": \"content\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"type\",\n  \"baseName\": \"type\",\n  \"type\": \"SendTransacSms.TypeEnum\"\n}, {\n  \"name\": \"tag\",\n  \"baseName\": \"tag\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"webUrl\",\n  \"baseName\": \"webUrl\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"unicodeEnabled\",\n  \"baseName\": \"unicodeEnabled\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"organisationPrefix\",\n  \"baseName\": \"organisationPrefix\",\n  \"type\": \"string\"\n}];\n(function (SendTransacSms) {\n  let TypeEnum;\n  (function (TypeEnum) {\n    TypeEnum[TypeEnum[\"Transactional\"] = 'transactional'] = \"Transactional\";\n    TypeEnum[TypeEnum[\"Marketing\"] = 'marketing'] = \"Marketing\";\n  })(TypeEnum = SendTransacSms.TypeEnum || (SendTransacSms.TypeEnum = {}));\n})(SendTransacSms = exports.SendTransacSms || (exports.SendTransacSms = {}));\nclass SsoTokenRequest {\n  static getAttributeTypeMap() {\n    return SsoTokenRequest.attributeTypeMap;\n  }\n}\nexports.SsoTokenRequest = SsoTokenRequest;\nSsoTokenRequest.discriminator = undefined;\nSsoTokenRequest.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"target\",\n  \"baseName\": \"target\",\n  \"type\": \"SsoTokenRequest.TargetEnum\"\n}];\n(function (SsoTokenRequest) {\n  let TargetEnum;\n  (function (TargetEnum) {\n    TargetEnum[TargetEnum[\"Automation\"] = 'automation'] = \"Automation\";\n    TargetEnum[TargetEnum[\"EmailCampaign\"] = 'email_campaign'] = \"EmailCampaign\";\n    TargetEnum[TargetEnum[\"Contacts\"] = 'contacts'] = \"Contacts\";\n    TargetEnum[TargetEnum[\"LandingPages\"] = 'landing_pages'] = \"LandingPages\";\n    TargetEnum[TargetEnum[\"EmailTransactional\"] = 'email_transactional'] = \"EmailTransactional\";\n    TargetEnum[TargetEnum[\"Senders\"] = 'senders'] = \"Senders\";\n    TargetEnum[TargetEnum[\"SmsCampaign\"] = 'sms_campaign'] = \"SmsCampaign\";\n    TargetEnum[TargetEnum[\"SmsTransactional\"] = 'sms_transactional'] = \"SmsTransactional\";\n  })(TargetEnum = SsoTokenRequest.TargetEnum || (SsoTokenRequest.TargetEnum = {}));\n})(SsoTokenRequest = exports.SsoTokenRequest || (exports.SsoTokenRequest = {}));\nclass SubAccountDetailsResponse {\n  static getAttributeTypeMap() {\n    return SubAccountDetailsResponse.attributeTypeMap;\n  }\n}\nexports.SubAccountDetailsResponse = SubAccountDetailsResponse;\nSubAccountDetailsResponse.discriminator = undefined;\nSubAccountDetailsResponse.attributeTypeMap = [{\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"companyName\",\n  \"baseName\": \"companyName\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"planInfo\",\n  \"baseName\": \"planInfo\",\n  \"type\": \"SubAccountDetailsResponsePlanInfo\"\n}];\nclass SubAccountDetailsResponsePlanInfo {\n  static getAttributeTypeMap() {\n    return SubAccountDetailsResponsePlanInfo.attributeTypeMap;\n  }\n}\nexports.SubAccountDetailsResponsePlanInfo = SubAccountDetailsResponsePlanInfo;\nSubAccountDetailsResponsePlanInfo.discriminator = undefined;\nSubAccountDetailsResponsePlanInfo.attributeTypeMap = [{\n  \"name\": \"credits\",\n  \"baseName\": \"credits\",\n  \"type\": \"SubAccountDetailsResponsePlanInfoCredits\"\n}, {\n  \"name\": \"features\",\n  \"baseName\": \"features\",\n  \"type\": \"SubAccountDetailsResponsePlanInfoFeatures\"\n}, {\n  \"name\": \"planType\",\n  \"baseName\": \"planType\",\n  \"type\": \"string\"\n}];\nclass SubAccountDetailsResponsePlanInfoCredits {\n  static getAttributeTypeMap() {\n    return SubAccountDetailsResponsePlanInfoCredits.attributeTypeMap;\n  }\n}\nexports.SubAccountDetailsResponsePlanInfoCredits = SubAccountDetailsResponsePlanInfoCredits;\nSubAccountDetailsResponsePlanInfoCredits.discriminator = undefined;\nSubAccountDetailsResponsePlanInfoCredits.attributeTypeMap = [{\n  \"name\": \"sms\",\n  \"baseName\": \"sms\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"emails\",\n  \"baseName\": \"emails\",\n  \"type\": \"SubAccountDetailsResponsePlanInfoCreditsEmails\"\n}];\nclass SubAccountDetailsResponsePlanInfoCreditsEmails {\n  static getAttributeTypeMap() {\n    return SubAccountDetailsResponsePlanInfoCreditsEmails.attributeTypeMap;\n  }\n}\nexports.SubAccountDetailsResponsePlanInfoCreditsEmails = SubAccountDetailsResponsePlanInfoCreditsEmails;\nSubAccountDetailsResponsePlanInfoCreditsEmails.discriminator = undefined;\nSubAccountDetailsResponsePlanInfoCreditsEmails.attributeTypeMap = [{\n  \"name\": \"quantity\",\n  \"baseName\": \"quantity\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"remaining\",\n  \"baseName\": \"remaining\",\n  \"type\": \"number\"\n}];\nclass SubAccountDetailsResponsePlanInfoFeatures {\n  static getAttributeTypeMap() {\n    return SubAccountDetailsResponsePlanInfoFeatures.attributeTypeMap;\n  }\n}\nexports.SubAccountDetailsResponsePlanInfoFeatures = SubAccountDetailsResponsePlanInfoFeatures;\nSubAccountDetailsResponsePlanInfoFeatures.discriminator = undefined;\nSubAccountDetailsResponsePlanInfoFeatures.attributeTypeMap = [{\n  \"name\": \"inbox\",\n  \"baseName\": \"inbox\",\n  \"type\": \"SubAccountDetailsResponsePlanInfoFeaturesInbox\"\n}, {\n  \"name\": \"landingPage\",\n  \"baseName\": \"landingPage\",\n  \"type\": \"SubAccountDetailsResponsePlanInfoFeaturesLandingPage\"\n}, {\n  \"name\": \"users\",\n  \"baseName\": \"users\",\n  \"type\": \"SubAccountDetailsResponsePlanInfoFeaturesUsers\"\n}];\nclass SubAccountDetailsResponsePlanInfoFeaturesInbox {\n  static getAttributeTypeMap() {\n    return SubAccountDetailsResponsePlanInfoFeaturesInbox.attributeTypeMap;\n  }\n}\nexports.SubAccountDetailsResponsePlanInfoFeaturesInbox = SubAccountDetailsResponsePlanInfoFeaturesInbox;\nSubAccountDetailsResponsePlanInfoFeaturesInbox.discriminator = undefined;\nSubAccountDetailsResponsePlanInfoFeaturesInbox.attributeTypeMap = [{\n  \"name\": \"quantity\",\n  \"baseName\": \"quantity\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"remaining\",\n  \"baseName\": \"remaining\",\n  \"type\": \"number\"\n}];\nclass SubAccountDetailsResponsePlanInfoFeaturesLandingPage {\n  static getAttributeTypeMap() {\n    return SubAccountDetailsResponsePlanInfoFeaturesLandingPage.attributeTypeMap;\n  }\n}\nexports.SubAccountDetailsResponsePlanInfoFeaturesLandingPage = SubAccountDetailsResponsePlanInfoFeaturesLandingPage;\nSubAccountDetailsResponsePlanInfoFeaturesLandingPage.discriminator = undefined;\nSubAccountDetailsResponsePlanInfoFeaturesLandingPage.attributeTypeMap = [{\n  \"name\": \"quantity\",\n  \"baseName\": \"quantity\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"remaining\",\n  \"baseName\": \"remaining\",\n  \"type\": \"number\"\n}];\nclass SubAccountDetailsResponsePlanInfoFeaturesUsers {\n  static getAttributeTypeMap() {\n    return SubAccountDetailsResponsePlanInfoFeaturesUsers.attributeTypeMap;\n  }\n}\nexports.SubAccountDetailsResponsePlanInfoFeaturesUsers = SubAccountDetailsResponsePlanInfoFeaturesUsers;\nSubAccountDetailsResponsePlanInfoFeaturesUsers.discriminator = undefined;\nSubAccountDetailsResponsePlanInfoFeaturesUsers.attributeTypeMap = [{\n  \"name\": \"quantity\",\n  \"baseName\": \"quantity\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"remaining\",\n  \"baseName\": \"remaining\",\n  \"type\": \"number\"\n}];\nclass SubAccountUpdatePlanRequest {\n  static getAttributeTypeMap() {\n    return SubAccountUpdatePlanRequest.attributeTypeMap;\n  }\n}\nexports.SubAccountUpdatePlanRequest = SubAccountUpdatePlanRequest;\nSubAccountUpdatePlanRequest.discriminator = undefined;\nSubAccountUpdatePlanRequest.attributeTypeMap = [{\n  \"name\": \"credits\",\n  \"baseName\": \"credits\",\n  \"type\": \"SubAccountUpdatePlanRequestCredits\"\n}, {\n  \"name\": \"features\",\n  \"baseName\": \"features\",\n  \"type\": \"SubAccountUpdatePlanRequestFeatures\"\n}];\nclass SubAccountUpdatePlanRequestCredits {\n  static getAttributeTypeMap() {\n    return SubAccountUpdatePlanRequestCredits.attributeTypeMap;\n  }\n}\nexports.SubAccountUpdatePlanRequestCredits = SubAccountUpdatePlanRequestCredits;\nSubAccountUpdatePlanRequestCredits.discriminator = undefined;\nSubAccountUpdatePlanRequestCredits.attributeTypeMap = [{\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"number\"\n}];\nclass SubAccountUpdatePlanRequestFeatures {\n  static getAttributeTypeMap() {\n    return SubAccountUpdatePlanRequestFeatures.attributeTypeMap;\n  }\n}\nexports.SubAccountUpdatePlanRequestFeatures = SubAccountUpdatePlanRequestFeatures;\nSubAccountUpdatePlanRequestFeatures.discriminator = undefined;\nSubAccountUpdatePlanRequestFeatures.attributeTypeMap = [{\n  \"name\": \"users\",\n  \"baseName\": \"users\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"landingPage\",\n  \"baseName\": \"landingPage\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"inbox\",\n  \"baseName\": \"inbox\",\n  \"type\": \"number\"\n}];\nclass SubAccountsResponse {\n  static getAttributeTypeMap() {\n    return SubAccountsResponse.attributeTypeMap;\n  }\n}\nexports.SubAccountsResponse = SubAccountsResponse;\nSubAccountsResponse.discriminator = undefined;\nSubAccountsResponse.attributeTypeMap = [{\n  \"name\": \"count\",\n  \"baseName\": \"count\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"subAccounts\",\n  \"baseName\": \"subAccounts\",\n  \"type\": \"Array<SubAccountsResponseSubAccounts>\"\n}];\nclass SubAccountsResponseSubAccounts {\n  static getAttributeTypeMap() {\n    return SubAccountsResponseSubAccounts.attributeTypeMap;\n  }\n}\nexports.SubAccountsResponseSubAccounts = SubAccountsResponseSubAccounts;\nSubAccountsResponseSubAccounts.discriminator = undefined;\nSubAccountsResponseSubAccounts.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"companyName\",\n  \"baseName\": \"companyName\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"active\",\n  \"baseName\": \"active\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"createdAt\",\n  \"baseName\": \"createdAt\",\n  \"type\": \"number\"\n}];\nclass Task {\n  static getAttributeTypeMap() {\n    return Task.attributeTypeMap;\n  }\n}\nexports.Task = Task;\nTask.discriminator = undefined;\nTask.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"taskTypeId\",\n  \"baseName\": \"taskTypeId\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"contactsIds\",\n  \"baseName\": \"contactsIds\",\n  \"type\": \"Array<number>\"\n}, {\n  \"name\": \"dealsIds\",\n  \"baseName\": \"dealsIds\",\n  \"type\": \"Array<string>\"\n}, {\n  \"name\": \"companiesIds\",\n  \"baseName\": \"companiesIds\",\n  \"type\": \"Array<string>\"\n}];\nclass TaskList {\n  static getAttributeTypeMap() {\n    return TaskList.attributeTypeMap;\n  }\n}\nexports.TaskList = TaskList;\nTaskList.discriminator = undefined;\nTaskList.attributeTypeMap = [{\n  \"name\": \"items\",\n  \"baseName\": \"items\",\n  \"type\": \"Array<Task>\"\n}];\nclass TaskReminder {\n  static getAttributeTypeMap() {\n    return TaskReminder.attributeTypeMap;\n  }\n}\nexports.TaskReminder = TaskReminder;\nTaskReminder.discriminator = undefined;\nTaskReminder.attributeTypeMap = [{\n  \"name\": \"value\",\n  \"baseName\": \"value\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"unit\",\n  \"baseName\": \"unit\",\n  \"type\": \"TaskReminder.UnitEnum\"\n}, {\n  \"name\": \"types\",\n  \"baseName\": \"types\",\n  \"type\": \"Array<string>\"\n}];\n(function (TaskReminder) {\n  let UnitEnum;\n  (function (UnitEnum) {\n    UnitEnum[UnitEnum[\"Minutes\"] = 'minutes'] = \"Minutes\";\n    UnitEnum[UnitEnum[\"Hours\"] = 'hours'] = \"Hours\";\n    UnitEnum[UnitEnum[\"Weeks\"] = 'weeks'] = \"Weeks\";\n    UnitEnum[UnitEnum[\"Days\"] = 'days'] = \"Days\";\n  })(UnitEnum = TaskReminder.UnitEnum || (TaskReminder.UnitEnum = {}));\n})(TaskReminder = exports.TaskReminder || (exports.TaskReminder = {}));\nclass TaskTypes {\n  static getAttributeTypeMap() {\n    return TaskTypes.attributeTypeMap;\n  }\n}\nexports.TaskTypes = TaskTypes;\nTaskTypes.discriminator = undefined;\nTaskTypes.attributeTypeMap = [{\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"title\",\n  \"baseName\": \"title\",\n  \"type\": \"string\"\n}];\nclass UpdateAttribute {\n  static getAttributeTypeMap() {\n    return UpdateAttribute.attributeTypeMap;\n  }\n}\nexports.UpdateAttribute = UpdateAttribute;\nUpdateAttribute.discriminator = undefined;\nUpdateAttribute.attributeTypeMap = [{\n  \"name\": \"value\",\n  \"baseName\": \"value\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"enumeration\",\n  \"baseName\": \"enumeration\",\n  \"type\": \"Array<UpdateAttributeEnumeration>\"\n}];\nclass UpdateAttributeEnumeration {\n  static getAttributeTypeMap() {\n    return UpdateAttributeEnumeration.attributeTypeMap;\n  }\n}\nexports.UpdateAttributeEnumeration = UpdateAttributeEnumeration;\nUpdateAttributeEnumeration.discriminator = undefined;\nUpdateAttributeEnumeration.attributeTypeMap = [{\n  \"name\": \"value\",\n  \"baseName\": \"value\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"label\",\n  \"baseName\": \"label\",\n  \"type\": \"string\"\n}];\nclass UpdateBatchContacts {\n  static getAttributeTypeMap() {\n    return UpdateBatchContacts.attributeTypeMap;\n  }\n}\nexports.UpdateBatchContacts = UpdateBatchContacts;\nUpdateBatchContacts.discriminator = undefined;\nUpdateBatchContacts.attributeTypeMap = [{\n  \"name\": \"contacts\",\n  \"baseName\": \"contacts\",\n  \"type\": \"Array<UpdateBatchContactsContacts>\"\n}];\nclass UpdateBatchContactsContacts {\n  static getAttributeTypeMap() {\n    return UpdateBatchContactsContacts.attributeTypeMap;\n  }\n}\nexports.UpdateBatchContactsContacts = UpdateBatchContactsContacts;\nUpdateBatchContactsContacts.discriminator = undefined;\nUpdateBatchContactsContacts.attributeTypeMap = [{\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"sms\",\n  \"baseName\": \"sms\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"attributes\",\n  \"baseName\": \"attributes\",\n  \"type\": \"{ [key: string]: any; }\"\n}, {\n  \"name\": \"emailBlacklisted\",\n  \"baseName\": \"emailBlacklisted\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"smsBlacklisted\",\n  \"baseName\": \"smsBlacklisted\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"listIds\",\n  \"baseName\": \"listIds\",\n  \"type\": \"Array<number>\"\n}, {\n  \"name\": \"unlinkListIds\",\n  \"baseName\": \"unlinkListIds\",\n  \"type\": \"Array<number>\"\n}, {\n  \"name\": \"smtpBlacklistSender\",\n  \"baseName\": \"smtpBlacklistSender\",\n  \"type\": \"Array<string>\"\n}];\nclass UpdateBatchContactsModel {\n  static getAttributeTypeMap() {\n    return UpdateBatchContactsModel.attributeTypeMap;\n  }\n}\nexports.UpdateBatchContactsModel = UpdateBatchContactsModel;\nUpdateBatchContactsModel.discriminator = undefined;\nUpdateBatchContactsModel.attributeTypeMap = [{\n  \"name\": \"successIds\",\n  \"baseName\": \"successIds\",\n  \"type\": \"Array<number>\"\n}, {\n  \"name\": \"failureIds\",\n  \"baseName\": \"failureIds\",\n  \"type\": \"Array<number>\"\n}];\nclass UpdateCampaignStatus {\n  static getAttributeTypeMap() {\n    return UpdateCampaignStatus.attributeTypeMap;\n  }\n}\nexports.UpdateCampaignStatus = UpdateCampaignStatus;\nUpdateCampaignStatus.discriminator = undefined;\nUpdateCampaignStatus.attributeTypeMap = [{\n  \"name\": \"status\",\n  \"baseName\": \"status\",\n  \"type\": \"UpdateCampaignStatus.StatusEnum\"\n}];\n(function (UpdateCampaignStatus) {\n  let StatusEnum;\n  (function (StatusEnum) {\n    StatusEnum[StatusEnum[\"Suspended\"] = 'suspended'] = \"Suspended\";\n    StatusEnum[StatusEnum[\"Archive\"] = 'archive'] = \"Archive\";\n    StatusEnum[StatusEnum[\"Darchive\"] = 'darchive'] = \"Darchive\";\n    StatusEnum[StatusEnum[\"Sent\"] = 'sent'] = \"Sent\";\n    StatusEnum[StatusEnum[\"Queued\"] = 'queued'] = \"Queued\";\n    StatusEnum[StatusEnum[\"Replicate\"] = 'replicate'] = \"Replicate\";\n    StatusEnum[StatusEnum[\"ReplicateTemplate\"] = 'replicateTemplate'] = \"ReplicateTemplate\";\n    StatusEnum[StatusEnum[\"Draft\"] = 'draft'] = \"Draft\";\n  })(StatusEnum = UpdateCampaignStatus.StatusEnum || (UpdateCampaignStatus.StatusEnum = {}));\n})(UpdateCampaignStatus = exports.UpdateCampaignStatus || (exports.UpdateCampaignStatus = {}));\nclass UpdateChild {\n  static getAttributeTypeMap() {\n    return UpdateChild.attributeTypeMap;\n  }\n}\nexports.UpdateChild = UpdateChild;\nUpdateChild.discriminator = undefined;\nUpdateChild.attributeTypeMap = [{\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"firstName\",\n  \"baseName\": \"firstName\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"lastName\",\n  \"baseName\": \"lastName\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"companyName\",\n  \"baseName\": \"companyName\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"password\",\n  \"baseName\": \"password\",\n  \"type\": \"string\"\n}];\nclass UpdateChildAccountStatus {\n  static getAttributeTypeMap() {\n    return UpdateChildAccountStatus.attributeTypeMap;\n  }\n}\nexports.UpdateChildAccountStatus = UpdateChildAccountStatus;\nUpdateChildAccountStatus.discriminator = undefined;\nUpdateChildAccountStatus.attributeTypeMap = [{\n  \"name\": \"transactionalEmail\",\n  \"baseName\": \"transactionalEmail\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"transactionalSms\",\n  \"baseName\": \"transactionalSms\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"marketingAutomation\",\n  \"baseName\": \"marketingAutomation\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"smsCampaign\",\n  \"baseName\": \"smsCampaign\",\n  \"type\": \"boolean\"\n}];\nclass UpdateChildDomain {\n  static getAttributeTypeMap() {\n    return UpdateChildDomain.attributeTypeMap;\n  }\n}\nexports.UpdateChildDomain = UpdateChildDomain;\nUpdateChildDomain.discriminator = undefined;\nUpdateChildDomain.attributeTypeMap = [{\n  \"name\": \"domain\",\n  \"baseName\": \"domain\",\n  \"type\": \"string\"\n}];\nclass UpdateContact {\n  static getAttributeTypeMap() {\n    return UpdateContact.attributeTypeMap;\n  }\n}\nexports.UpdateContact = UpdateContact;\nUpdateContact.discriminator = undefined;\nUpdateContact.attributeTypeMap = [{\n  \"name\": \"attributes\",\n  \"baseName\": \"attributes\",\n  \"type\": \"any\"\n}, {\n  \"name\": \"emailBlacklisted\",\n  \"baseName\": \"emailBlacklisted\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"smsBlacklisted\",\n  \"baseName\": \"smsBlacklisted\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"listIds\",\n  \"baseName\": \"listIds\",\n  \"type\": \"Array<number>\"\n}, {\n  \"name\": \"unlinkListIds\",\n  \"baseName\": \"unlinkListIds\",\n  \"type\": \"Array<number>\"\n}, {\n  \"name\": \"smtpBlacklistSender\",\n  \"baseName\": \"smtpBlacklistSender\",\n  \"type\": \"Array<string>\"\n}];\nclass UpdateEmailCampaign {\n  static getAttributeTypeMap() {\n    return UpdateEmailCampaign.attributeTypeMap;\n  }\n}\nexports.UpdateEmailCampaign = UpdateEmailCampaign;\nUpdateEmailCampaign.discriminator = undefined;\nUpdateEmailCampaign.attributeTypeMap = [{\n  \"name\": \"tag\",\n  \"baseName\": \"tag\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"sender\",\n  \"baseName\": \"sender\",\n  \"type\": \"UpdateEmailCampaignSender\"\n}, {\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"htmlContent\",\n  \"baseName\": \"htmlContent\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"htmlUrl\",\n  \"baseName\": \"htmlUrl\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"scheduledAt\",\n  \"baseName\": \"scheduledAt\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"subject\",\n  \"baseName\": \"subject\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"replyTo\",\n  \"baseName\": \"replyTo\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"toField\",\n  \"baseName\": \"toField\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"recipients\",\n  \"baseName\": \"recipients\",\n  \"type\": \"UpdateEmailCampaignRecipients\"\n}, {\n  \"name\": \"attachmentUrl\",\n  \"baseName\": \"attachmentUrl\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"inlineImageActivation\",\n  \"baseName\": \"inlineImageActivation\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"mirrorActive\",\n  \"baseName\": \"mirrorActive\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"recurring\",\n  \"baseName\": \"recurring\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"footer\",\n  \"baseName\": \"footer\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"header\",\n  \"baseName\": \"header\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"utmCampaign\",\n  \"baseName\": \"utmCampaign\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"params\",\n  \"baseName\": \"params\",\n  \"type\": \"any\"\n}, {\n  \"name\": \"sendAtBestTime\",\n  \"baseName\": \"sendAtBestTime\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"abTesting\",\n  \"baseName\": \"abTesting\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"subjectA\",\n  \"baseName\": \"subjectA\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"subjectB\",\n  \"baseName\": \"subjectB\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"splitRule\",\n  \"baseName\": \"splitRule\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"winnerCriteria\",\n  \"baseName\": \"winnerCriteria\",\n  \"type\": \"UpdateEmailCampaign.WinnerCriteriaEnum\"\n}, {\n  \"name\": \"winnerDelay\",\n  \"baseName\": \"winnerDelay\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"ipWarmupEnable\",\n  \"baseName\": \"ipWarmupEnable\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"initialQuota\",\n  \"baseName\": \"initialQuota\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"increaseRate\",\n  \"baseName\": \"increaseRate\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"unsubscriptionPageId\",\n  \"baseName\": \"unsubscriptionPageId\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"updateFormId\",\n  \"baseName\": \"updateFormId\",\n  \"type\": \"string\"\n}];\n(function (UpdateEmailCampaign) {\n  let WinnerCriteriaEnum;\n  (function (WinnerCriteriaEnum) {\n    WinnerCriteriaEnum[WinnerCriteriaEnum[\"Open\"] = 'open'] = \"Open\";\n    WinnerCriteriaEnum[WinnerCriteriaEnum[\"Click\"] = 'click'] = \"Click\";\n  })(WinnerCriteriaEnum = UpdateEmailCampaign.WinnerCriteriaEnum || (UpdateEmailCampaign.WinnerCriteriaEnum = {}));\n})(UpdateEmailCampaign = exports.UpdateEmailCampaign || (exports.UpdateEmailCampaign = {}));\nclass UpdateEmailCampaignRecipients {\n  static getAttributeTypeMap() {\n    return UpdateEmailCampaignRecipients.attributeTypeMap;\n  }\n}\nexports.UpdateEmailCampaignRecipients = UpdateEmailCampaignRecipients;\nUpdateEmailCampaignRecipients.discriminator = undefined;\nUpdateEmailCampaignRecipients.attributeTypeMap = [{\n  \"name\": \"exclusionListIds\",\n  \"baseName\": \"exclusionListIds\",\n  \"type\": \"Array<number>\"\n}, {\n  \"name\": \"listIds\",\n  \"baseName\": \"listIds\",\n  \"type\": \"Array<number>\"\n}, {\n  \"name\": \"segmentIds\",\n  \"baseName\": \"segmentIds\",\n  \"type\": \"Array<number>\"\n}];\nclass UpdateEmailCampaignSender {\n  static getAttributeTypeMap() {\n    return UpdateEmailCampaignSender.attributeTypeMap;\n  }\n}\nexports.UpdateEmailCampaignSender = UpdateEmailCampaignSender;\nUpdateEmailCampaignSender.discriminator = undefined;\nUpdateEmailCampaignSender.attributeTypeMap = [{\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"number\"\n}];\nclass UpdateList {\n  static getAttributeTypeMap() {\n    return UpdateList.attributeTypeMap;\n  }\n}\nexports.UpdateList = UpdateList;\nUpdateList.discriminator = undefined;\nUpdateList.attributeTypeMap = [{\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"folderId\",\n  \"baseName\": \"folderId\",\n  \"type\": \"number\"\n}];\nclass UpdateSender {\n  static getAttributeTypeMap() {\n    return UpdateSender.attributeTypeMap;\n  }\n}\nexports.UpdateSender = UpdateSender;\nUpdateSender.discriminator = undefined;\nUpdateSender.attributeTypeMap = [{\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"ips\",\n  \"baseName\": \"ips\",\n  \"type\": \"Array<CreateSenderIps>\"\n}];\nclass UpdateSmsCampaign {\n  static getAttributeTypeMap() {\n    return UpdateSmsCampaign.attributeTypeMap;\n  }\n}\nexports.UpdateSmsCampaign = UpdateSmsCampaign;\nUpdateSmsCampaign.discriminator = undefined;\nUpdateSmsCampaign.attributeTypeMap = [{\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"sender\",\n  \"baseName\": \"sender\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"content\",\n  \"baseName\": \"content\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"recipients\",\n  \"baseName\": \"recipients\",\n  \"type\": \"CreateSmsCampaignRecipients\"\n}, {\n  \"name\": \"scheduledAt\",\n  \"baseName\": \"scheduledAt\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"unicodeEnabled\",\n  \"baseName\": \"unicodeEnabled\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"organisationPrefix\",\n  \"baseName\": \"organisationPrefix\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"unsubscribeInstruction\",\n  \"baseName\": \"unsubscribeInstruction\",\n  \"type\": \"string\"\n}];\nclass UpdateSmtpTemplate {\n  static getAttributeTypeMap() {\n    return UpdateSmtpTemplate.attributeTypeMap;\n  }\n}\nexports.UpdateSmtpTemplate = UpdateSmtpTemplate;\nUpdateSmtpTemplate.discriminator = undefined;\nUpdateSmtpTemplate.attributeTypeMap = [{\n  \"name\": \"tag\",\n  \"baseName\": \"tag\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"sender\",\n  \"baseName\": \"sender\",\n  \"type\": \"UpdateSmtpTemplateSender\"\n}, {\n  \"name\": \"templateName\",\n  \"baseName\": \"templateName\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"htmlContent\",\n  \"baseName\": \"htmlContent\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"htmlUrl\",\n  \"baseName\": \"htmlUrl\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"subject\",\n  \"baseName\": \"subject\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"replyTo\",\n  \"baseName\": \"replyTo\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"toField\",\n  \"baseName\": \"toField\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"attachmentUrl\",\n  \"baseName\": \"attachmentUrl\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"isActive\",\n  \"baseName\": \"isActive\",\n  \"type\": \"boolean\"\n}];\nclass UpdateSmtpTemplateSender {\n  static getAttributeTypeMap() {\n    return UpdateSmtpTemplateSender.attributeTypeMap;\n  }\n}\nexports.UpdateSmtpTemplateSender = UpdateSmtpTemplateSender;\nUpdateSmtpTemplateSender.discriminator = undefined;\nUpdateSmtpTemplateSender.attributeTypeMap = [{\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"email\",\n  \"baseName\": \"email\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"id\",\n  \"baseName\": \"id\",\n  \"type\": \"number\"\n}];\nclass UpdateWebhook {\n  static getAttributeTypeMap() {\n    return UpdateWebhook.attributeTypeMap;\n  }\n}\nexports.UpdateWebhook = UpdateWebhook;\nUpdateWebhook.discriminator = undefined;\nUpdateWebhook.attributeTypeMap = [{\n  \"name\": \"url\",\n  \"baseName\": \"url\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"description\",\n  \"baseName\": \"description\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"events\",\n  \"baseName\": \"events\",\n  \"type\": \"Array<UpdateWebhook.EventsEnum>\"\n}, {\n  \"name\": \"domain\",\n  \"baseName\": \"domain\",\n  \"type\": \"string\"\n}];\n(function (UpdateWebhook) {\n  let EventsEnum;\n  (function (EventsEnum) {\n    EventsEnum[EventsEnum[\"Sent\"] = 'sent'] = \"Sent\";\n    EventsEnum[EventsEnum[\"HardBounce\"] = 'hardBounce'] = \"HardBounce\";\n    EventsEnum[EventsEnum[\"SoftBounce\"] = 'softBounce'] = \"SoftBounce\";\n    EventsEnum[EventsEnum[\"Blocked\"] = 'blocked'] = \"Blocked\";\n    EventsEnum[EventsEnum[\"Spam\"] = 'spam'] = \"Spam\";\n    EventsEnum[EventsEnum[\"Delivered\"] = 'delivered'] = \"Delivered\";\n    EventsEnum[EventsEnum[\"Request\"] = 'request'] = \"Request\";\n    EventsEnum[EventsEnum[\"Click\"] = 'click'] = \"Click\";\n    EventsEnum[EventsEnum[\"Invalid\"] = 'invalid'] = \"Invalid\";\n    EventsEnum[EventsEnum[\"Deferred\"] = 'deferred'] = \"Deferred\";\n    EventsEnum[EventsEnum[\"Opened\"] = 'opened'] = \"Opened\";\n    EventsEnum[EventsEnum[\"UniqueOpened\"] = 'uniqueOpened'] = \"UniqueOpened\";\n    EventsEnum[EventsEnum[\"Unsubscribed\"] = 'unsubscribed'] = \"Unsubscribed\";\n    EventsEnum[EventsEnum[\"ListAddition\"] = 'listAddition'] = \"ListAddition\";\n    EventsEnum[EventsEnum[\"ContactUpdated\"] = 'contactUpdated'] = \"ContactUpdated\";\n    EventsEnum[EventsEnum[\"ContactDeleted\"] = 'contactDeleted'] = \"ContactDeleted\";\n    EventsEnum[EventsEnum[\"InboundEmailProcessed\"] = 'inboundEmailProcessed'] = \"InboundEmailProcessed\";\n  })(EventsEnum = UpdateWebhook.EventsEnum || (UpdateWebhook.EventsEnum = {}));\n})(UpdateWebhook = exports.UpdateWebhook || (exports.UpdateWebhook = {}));\nclass UploadImageModel {\n  static getAttributeTypeMap() {\n    return UploadImageModel.attributeTypeMap;\n  }\n}\nexports.UploadImageModel = UploadImageModel;\nUploadImageModel.discriminator = undefined;\nUploadImageModel.attributeTypeMap = [{\n  \"name\": \"url\",\n  \"baseName\": \"url\",\n  \"type\": \"string\"\n}];\nclass UploadImageToGallery {\n  static getAttributeTypeMap() {\n    return UploadImageToGallery.attributeTypeMap;\n  }\n}\nexports.UploadImageToGallery = UploadImageToGallery;\nUploadImageToGallery.discriminator = undefined;\nUploadImageToGallery.attributeTypeMap = [{\n  \"name\": \"imageUrl\",\n  \"baseName\": \"imageUrl\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}];\nclass VariablesItems {\n  static getAttributeTypeMap() {\n    return VariablesItems.attributeTypeMap;\n  }\n}\nexports.VariablesItems = VariablesItems;\nVariablesItems.discriminator = undefined;\nVariablesItems.attributeTypeMap = [{\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"_default\",\n  \"baseName\": \"default\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"datatype\",\n  \"baseName\": \"datatype\",\n  \"type\": \"string\"\n}];\nclass WhatsappCampStats {\n  static getAttributeTypeMap() {\n    return WhatsappCampStats.attributeTypeMap;\n  }\n}\nexports.WhatsappCampStats = WhatsappCampStats;\nWhatsappCampStats.discriminator = undefined;\nWhatsappCampStats.attributeTypeMap = [{\n  \"name\": \"sent\",\n  \"baseName\": \"sent\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"delivered\",\n  \"baseName\": \"delivered\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"read\",\n  \"baseName\": \"read\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"unsubscribe\",\n  \"baseName\": \"unsubscribe\",\n  \"type\": \"number\"\n}, {\n  \"name\": \"notSent\",\n  \"baseName\": \"not_sent\",\n  \"type\": \"number\"\n}];\nclass WhatsappCampTemplate {\n  static getAttributeTypeMap() {\n    return WhatsappCampTemplate.attributeTypeMap;\n  }\n}\nexports.WhatsappCampTemplate = WhatsappCampTemplate;\nWhatsappCampTemplate.discriminator = undefined;\nWhatsappCampTemplate.attributeTypeMap = [{\n  \"name\": \"name\",\n  \"baseName\": \"name\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"category\",\n  \"baseName\": \"category\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"language\",\n  \"baseName\": \"language\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"containsButton\",\n  \"baseName\": \"contains_button\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"displayHeader\",\n  \"baseName\": \"display_header\",\n  \"type\": \"boolean\"\n}, {\n  \"name\": \"headerType\",\n  \"baseName\": \"header_type\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"components\",\n  \"baseName\": \"components\",\n  \"type\": \"Array<ComponentItems>\"\n}, {\n  \"name\": \"headerVariables\",\n  \"baseName\": \"header_variables\",\n  \"type\": \"Array<VariablesItems>\"\n}, {\n  \"name\": \"bodyVariables\",\n  \"baseName\": \"body_variables\",\n  \"type\": \"Array<VariablesItems>\"\n}, {\n  \"name\": \"buttonType\",\n  \"baseName\": \"button_type\",\n  \"type\": \"string\"\n}, {\n  \"name\": \"hideFooter\",\n  \"baseName\": \"hide_footer\",\n  \"type\": \"boolean\"\n}];\nconst enumsMap = {\n  \"AbTestCampaignResult.WinningVersionEnum\": AbTestCampaignResult.WinningVersionEnum,\n  \"AbTestCampaignResult.WinningCriteriaEnum\": AbTestCampaignResult.WinningCriteriaEnum,\n  \"ConversationsMessage.TypeEnum\": ConversationsMessage.TypeEnum,\n  \"CreateAttribute.TypeEnum\": CreateAttribute.TypeEnum,\n  \"CreateChild.LanguageEnum\": CreateChild.LanguageEnum,\n  \"CreateEmailCampaign.WinnerCriteriaEnum\": CreateEmailCampaign.WinnerCriteriaEnum,\n  \"CreateSubAccount.LanguageEnum\": CreateSubAccount.LanguageEnum,\n  \"CreateWebhook.EventsEnum\": CreateWebhook.EventsEnum,\n  \"CreateWebhook.TypeEnum\": CreateWebhook.TypeEnum,\n  \"EmailExportRecipients.RecipientsTypeEnum\": EmailExportRecipients.RecipientsTypeEnum,\n  \"ErrorModel.CodeEnum\": ErrorModel.CodeEnum,\n  \"GetAccountPlan.TypeEnum\": GetAccountPlan.TypeEnum,\n  \"GetAccountPlan.CreditsTypeEnum\": GetAccountPlan.CreditsTypeEnum,\n  \"GetAttributesAttributes.CategoryEnum\": GetAttributesAttributes.CategoryEnum,\n  \"GetAttributesAttributes.TypeEnum\": GetAttributesAttributes.TypeEnum,\n  \"GetCampaignOverview.TypeEnum\": GetCampaignOverview.TypeEnum,\n  \"GetCampaignOverview.StatusEnum\": GetCampaignOverview.StatusEnum,\n  \"GetEmailEventReportEvents.EventEnum\": GetEmailEventReportEvents.EventEnum,\n  \"GetInboundEmailEventsByUuidLogs.TypeEnum\": GetInboundEmailEventsByUuidLogs.TypeEnum,\n  \"GetProcess.StatusEnum\": GetProcess.StatusEnum,\n  \"GetScheduledEmailByBatchIdBatches.StatusEnum\": GetScheduledEmailByBatchIdBatches.StatusEnum,\n  \"GetScheduledEmailByMessageId.StatusEnum\": GetScheduledEmailByMessageId.StatusEnum,\n  \"GetSmsCampaignOverview.StatusEnum\": GetSmsCampaignOverview.StatusEnum,\n  \"GetSmsEventReportEvents.EventEnum\": GetSmsEventReportEvents.EventEnum,\n  \"GetTransacBlockedContactsReason.CodeEnum\": GetTransacBlockedContactsReason.CodeEnum,\n  \"GetWebhook.TypeEnum\": GetWebhook.TypeEnum,\n  \"GetWhatsappCampaignOverview.CampaignStatusEnum\": GetWhatsappCampaignOverview.CampaignStatusEnum,\n  \"MasterDetailsResponsePlanInfo.PlanPeriodEnum\": MasterDetailsResponsePlanInfo.PlanPeriodEnum,\n  \"RequestContactExportCustomContactFilter.ActionForContactsEnum\": RequestContactExportCustomContactFilter.ActionForContactsEnum,\n  \"RequestContactExportCustomContactFilter.ActionForEmailCampaignsEnum\": RequestContactExportCustomContactFilter.ActionForEmailCampaignsEnum,\n  \"RequestContactExportCustomContactFilter.ActionForSmsCampaignsEnum\": RequestContactExportCustomContactFilter.ActionForSmsCampaignsEnum,\n  \"RequestSmsRecipientExport.RecipientsTypeEnum\": RequestSmsRecipientExport.RecipientsTypeEnum,\n  \"SendReport.LanguageEnum\": SendReport.LanguageEnum,\n  \"SendTransacSms.TypeEnum\": SendTransacSms.TypeEnum,\n  \"SsoTokenRequest.TargetEnum\": SsoTokenRequest.TargetEnum,\n  \"TaskReminder.UnitEnum\": TaskReminder.UnitEnum,\n  \"UpdateCampaignStatus.StatusEnum\": UpdateCampaignStatus.StatusEnum,\n  \"UpdateEmailCampaign.WinnerCriteriaEnum\": UpdateEmailCampaign.WinnerCriteriaEnum,\n  \"UpdateWebhook.EventsEnum\": UpdateWebhook.EventsEnum\n};\nconst typeMap = {\n  \"AbTestCampaignResult\": AbTestCampaignResult,\n  \"AbTestCampaignResultClickedLinks\": AbTestCampaignResultClickedLinks,\n  \"AbTestCampaignResultStatistics\": AbTestCampaignResultStatistics,\n  \"AbTestVersionClicks\": AbTestVersionClicks,\n  \"AbTestVersionClicksInner\": AbTestVersionClicksInner,\n  \"AbTestVersionStats\": AbTestVersionStats,\n  \"AddChildDomain\": AddChildDomain,\n  \"AddContactToList\": AddContactToList,\n  \"AddCredits\": AddCredits,\n  \"BlockDomain\": BlockDomain,\n  \"Body\": Body,\n  \"Body1\": Body1,\n  \"Body10\": Body10,\n  \"Body11\": Body11,\n  \"Body12\": Body12,\n  \"Body2\": Body2,\n  \"Body3\": Body3,\n  \"Body4\": Body4,\n  \"Body5\": Body5,\n  \"Body6\": Body6,\n  \"Body7\": Body7,\n  \"Body8\": Body8,\n  \"Body9\": Body9,\n  \"BodyVariablesItems\": BodyVariablesItems,\n  \"CompaniesList\": CompaniesList,\n  \"Company\": Company,\n  \"CompanyAttributes\": CompanyAttributes,\n  \"CompanyAttributesInner\": CompanyAttributesInner,\n  \"ComponentItems\": ComponentItems,\n  \"ConversationsMessage\": ConversationsMessage,\n  \"ConversationsMessageFile\": ConversationsMessageFile,\n  \"ConversationsMessageFileImageInfo\": ConversationsMessageFileImageInfo,\n  \"CreateApiKeyRequest\": CreateApiKeyRequest,\n  \"CreateApiKeyResponse\": CreateApiKeyResponse,\n  \"CreateAttribute\": CreateAttribute,\n  \"CreateAttributeEnumeration\": CreateAttributeEnumeration,\n  \"CreateCategoryModel\": CreateCategoryModel,\n  \"CreateChild\": CreateChild,\n  \"CreateContact\": CreateContact,\n  \"CreateDoiContact\": CreateDoiContact,\n  \"CreateEmailCampaign\": CreateEmailCampaign,\n  \"CreateEmailCampaignRecipients\": CreateEmailCampaignRecipients,\n  \"CreateEmailCampaignSender\": CreateEmailCampaignSender,\n  \"CreateList\": CreateList,\n  \"CreateModel\": CreateModel,\n  \"CreateProductModel\": CreateProductModel,\n  \"CreateReseller\": CreateReseller,\n  \"CreateSender\": CreateSender,\n  \"CreateSenderIps\": CreateSenderIps,\n  \"CreateSenderModel\": CreateSenderModel,\n  \"CreateSmsCampaign\": CreateSmsCampaign,\n  \"CreateSmsCampaignRecipients\": CreateSmsCampaignRecipients,\n  \"CreateSmtpEmail\": CreateSmtpEmail,\n  \"CreateSmtpTemplate\": CreateSmtpTemplate,\n  \"CreateSmtpTemplateSender\": CreateSmtpTemplateSender,\n  \"CreateSubAccount\": CreateSubAccount,\n  \"CreateSubAccountResponse\": CreateSubAccountResponse,\n  \"CreateUpdateBatchCategory\": CreateUpdateBatchCategory,\n  \"CreateUpdateBatchCategoryModel\": CreateUpdateBatchCategoryModel,\n  \"CreateUpdateBatchProducts\": CreateUpdateBatchProducts,\n  \"CreateUpdateBatchProductsModel\": CreateUpdateBatchProductsModel,\n  \"CreateUpdateCategories\": CreateUpdateCategories,\n  \"CreateUpdateCategory\": CreateUpdateCategory,\n  \"CreateUpdateContactModel\": CreateUpdateContactModel,\n  \"CreateUpdateFolder\": CreateUpdateFolder,\n  \"CreateUpdateProduct\": CreateUpdateProduct,\n  \"CreateUpdateProducts\": CreateUpdateProducts,\n  \"CreateWebhook\": CreateWebhook,\n  \"CreatedBatchId\": CreatedBatchId,\n  \"CreatedProcessId\": CreatedProcessId,\n  \"Deal\": Deal,\n  \"DealAttributes\": DealAttributes,\n  \"DealAttributesInner\": DealAttributesInner,\n  \"DealsList\": DealsList,\n  \"DeleteHardbounces\": DeleteHardbounces,\n  \"EmailExportRecipients\": EmailExportRecipients,\n  \"ErrorModel\": ErrorModel,\n  \"FileData\": FileData,\n  \"FileDownloadableLink\": FileDownloadableLink,\n  \"FileList\": FileList,\n  \"GetAccount\": GetAccount,\n  \"GetAccountMarketingAutomation\": GetAccountMarketingAutomation,\n  \"GetAccountPlan\": GetAccountPlan,\n  \"GetAccountRelay\": GetAccountRelay,\n  \"GetAccountRelayData\": GetAccountRelayData,\n  \"GetAggregatedReport\": GetAggregatedReport,\n  \"GetAttributes\": GetAttributes,\n  \"GetAttributesAttributes\": GetAttributesAttributes,\n  \"GetAttributesEnumeration\": GetAttributesEnumeration,\n  \"GetBlockedDomains\": GetBlockedDomains,\n  \"GetCampaignOverview\": GetCampaignOverview,\n  \"GetCampaignRecipients\": GetCampaignRecipients,\n  \"GetCampaignStats\": GetCampaignStats,\n  \"GetCategories\": GetCategories,\n  \"GetCategoryDetails\": GetCategoryDetails,\n  \"GetChildAccountCreationStatus\": GetChildAccountCreationStatus,\n  \"GetChildDomain\": GetChildDomain,\n  \"GetChildDomains\": GetChildDomains,\n  \"GetChildInfo\": GetChildInfo,\n  \"GetChildInfoApiKeys\": GetChildInfoApiKeys,\n  \"GetChildInfoApiKeysV2\": GetChildInfoApiKeysV2,\n  \"GetChildInfoApiKeysV3\": GetChildInfoApiKeysV3,\n  \"GetChildInfoCredits\": GetChildInfoCredits,\n  \"GetChildInfoStatistics\": GetChildInfoStatistics,\n  \"GetChildrenList\": GetChildrenList,\n  \"GetClient\": GetClient,\n  \"GetContactCampaignStats\": GetContactCampaignStats,\n  \"GetContactCampaignStatsClicked\": GetContactCampaignStatsClicked,\n  \"GetContactCampaignStatsOpened\": GetContactCampaignStatsOpened,\n  \"GetContactCampaignStatsTransacAttributes\": GetContactCampaignStatsTransacAttributes,\n  \"GetContactCampaignStatsUnsubscriptions\": GetContactCampaignStatsUnsubscriptions,\n  \"GetContactDetails\": GetContactDetails,\n  \"GetContacts\": GetContacts,\n  \"GetDeviceBrowserStats\": GetDeviceBrowserStats,\n  \"GetEmailCampaign\": GetEmailCampaign,\n  \"GetEmailCampaigns\": GetEmailCampaigns,\n  \"GetEmailEventReport\": GetEmailEventReport,\n  \"GetEmailEventReportEvents\": GetEmailEventReportEvents,\n  \"GetExtendedCampaignOverview\": GetExtendedCampaignOverview,\n  \"GetExtendedCampaignOverviewSender\": GetExtendedCampaignOverviewSender,\n  \"GetExtendedCampaignStats\": GetExtendedCampaignStats,\n  \"GetExtendedCampaignStatsGlobalStats\": GetExtendedCampaignStatsGlobalStats,\n  \"GetExtendedClient\": GetExtendedClient,\n  \"GetExtendedClientAddress\": GetExtendedClientAddress,\n  \"GetExtendedContactDetails\": GetExtendedContactDetails,\n  \"GetExtendedContactDetailsStatistics\": GetExtendedContactDetailsStatistics,\n  \"GetExtendedContactDetailsStatisticsClicked\": GetExtendedContactDetailsStatisticsClicked,\n  \"GetExtendedContactDetailsStatisticsLinks\": GetExtendedContactDetailsStatisticsLinks,\n  \"GetExtendedContactDetailsStatisticsMessagesSent\": GetExtendedContactDetailsStatisticsMessagesSent,\n  \"GetExtendedContactDetailsStatisticsOpened\": GetExtendedContactDetailsStatisticsOpened,\n  \"GetExtendedContactDetailsStatisticsUnsubscriptions\": GetExtendedContactDetailsStatisticsUnsubscriptions,\n  \"GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription\": GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription,\n  \"GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription\": GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription,\n  \"GetExtendedList\": GetExtendedList,\n  \"GetExtendedListCampaignStats\": GetExtendedListCampaignStats,\n  \"GetFolder\": GetFolder,\n  \"GetFolderLists\": GetFolderLists,\n  \"GetFolders\": GetFolders,\n  \"GetInboundEmailEvents\": GetInboundEmailEvents,\n  \"GetInboundEmailEventsByUuid\": GetInboundEmailEventsByUuid,\n  \"GetInboundEmailEventsByUuidAttachments\": GetInboundEmailEventsByUuidAttachments,\n  \"GetInboundEmailEventsByUuidLogs\": GetInboundEmailEventsByUuidLogs,\n  \"GetInboundEmailEventsEvents\": GetInboundEmailEventsEvents,\n  \"GetIp\": GetIp,\n  \"GetIpFromSender\": GetIpFromSender,\n  \"GetIps\": GetIps,\n  \"GetIpsFromSender\": GetIpsFromSender,\n  \"GetList\": GetList,\n  \"GetLists\": GetLists,\n  \"GetProcess\": GetProcess,\n  \"GetProcesses\": GetProcesses,\n  \"GetProductDetails\": GetProductDetails,\n  \"GetProducts\": GetProducts,\n  \"GetReports\": GetReports,\n  \"GetReportsReports\": GetReportsReports,\n  \"GetScheduledEmailByBatchId\": GetScheduledEmailByBatchId,\n  \"GetScheduledEmailByBatchIdBatches\": GetScheduledEmailByBatchIdBatches,\n  \"GetScheduledEmailByMessageId\": GetScheduledEmailByMessageId,\n  \"GetSendersList\": GetSendersList,\n  \"GetSendersListIps\": GetSendersListIps,\n  \"GetSendersListSenders\": GetSendersListSenders,\n  \"GetSharedTemplateUrl\": GetSharedTemplateUrl,\n  \"GetSmsCampaign\": GetSmsCampaign,\n  \"GetSmsCampaignOverview\": GetSmsCampaignOverview,\n  \"GetSmsCampaignRecipients\": GetSmsCampaignRecipients,\n  \"GetSmsCampaignStats\": GetSmsCampaignStats,\n  \"GetSmsCampaigns\": GetSmsCampaigns,\n  \"GetSmsEventReport\": GetSmsEventReport,\n  \"GetSmsEventReportEvents\": GetSmsEventReportEvents,\n  \"GetSmtpTemplateOverview\": GetSmtpTemplateOverview,\n  \"GetSmtpTemplateOverviewSender\": GetSmtpTemplateOverviewSender,\n  \"GetSmtpTemplates\": GetSmtpTemplates,\n  \"GetSsoToken\": GetSsoToken,\n  \"GetStatsByBrowser\": GetStatsByBrowser,\n  \"GetStatsByDevice\": GetStatsByDevice,\n  \"GetStatsByDomain\": GetStatsByDomain,\n  \"GetTransacAggregatedSmsReport\": GetTransacAggregatedSmsReport,\n  \"GetTransacBlockedContacts\": GetTransacBlockedContacts,\n  \"GetTransacBlockedContactsContacts\": GetTransacBlockedContactsContacts,\n  \"GetTransacBlockedContactsReason\": GetTransacBlockedContactsReason,\n  \"GetTransacEmailContent\": GetTransacEmailContent,\n  \"GetTransacEmailContentEvents\": GetTransacEmailContentEvents,\n  \"GetTransacEmailsList\": GetTransacEmailsList,\n  \"GetTransacEmailsListTransactionalEmails\": GetTransacEmailsListTransactionalEmails,\n  \"GetTransacSmsReport\": GetTransacSmsReport,\n  \"GetTransacSmsReportReports\": GetTransacSmsReportReports,\n  \"GetWebhook\": GetWebhook,\n  \"GetWebhooks\": GetWebhooks,\n  \"GetWhatsappCampaignOverview\": GetWhatsappCampaignOverview,\n  \"InlineResponse200\": InlineResponse200,\n  \"InlineResponse201\": InlineResponse201,\n  \"InlineResponse2011\": InlineResponse2011,\n  \"ManageIp\": ManageIp,\n  \"MasterDetailsResponse\": MasterDetailsResponse,\n  \"MasterDetailsResponseBillingInfo\": MasterDetailsResponseBillingInfo,\n  \"MasterDetailsResponseBillingInfoAddress\": MasterDetailsResponseBillingInfoAddress,\n  \"MasterDetailsResponseBillingInfoName\": MasterDetailsResponseBillingInfoName,\n  \"MasterDetailsResponsePlanInfo\": MasterDetailsResponsePlanInfo,\n  \"MasterDetailsResponsePlanInfoFeatures\": MasterDetailsResponsePlanInfoFeatures,\n  \"Note\": Note,\n  \"NoteData\": NoteData,\n  \"NoteId\": NoteId,\n  \"NoteList\": NoteList,\n  \"Order\": Order,\n  \"OrderBatch\": OrderBatch,\n  \"OrderBilling\": OrderBilling,\n  \"OrderProducts\": OrderProducts,\n  \"Pipeline\": Pipeline,\n  \"PipelineStage\": PipelineStage,\n  \"PostContactInfo\": PostContactInfo,\n  \"PostContactInfoContacts\": PostContactInfoContacts,\n  \"PostSendFailed\": PostSendFailed,\n  \"PostSendSmsTestFailed\": PostSendSmsTestFailed,\n  \"RemainingCreditModel\": RemainingCreditModel,\n  \"RemainingCreditModelChild\": RemainingCreditModelChild,\n  \"RemainingCreditModelReseller\": RemainingCreditModelReseller,\n  \"RemoveContactFromList\": RemoveContactFromList,\n  \"RemoveCredits\": RemoveCredits,\n  \"RequestContactExport\": RequestContactExport,\n  \"RequestContactExportCustomContactFilter\": RequestContactExportCustomContactFilter,\n  \"RequestContactImport\": RequestContactImport,\n  \"RequestContactImportNewList\": RequestContactImportNewList,\n  \"RequestSmsRecipientExport\": RequestSmsRecipientExport,\n  \"ScheduleSmtpEmail\": ScheduleSmtpEmail,\n  \"SendReport\": SendReport,\n  \"SendReportEmail\": SendReportEmail,\n  \"SendSms\": SendSms,\n  \"SendSmtpEmail\": SendSmtpEmail,\n  \"SendSmtpEmailAttachment\": SendSmtpEmailAttachment,\n  \"SendSmtpEmailBcc\": SendSmtpEmailBcc,\n  \"SendSmtpEmailCc\": SendSmtpEmailCc,\n  \"SendSmtpEmailMessageVersions\": SendSmtpEmailMessageVersions,\n  \"SendSmtpEmailReplyTo\": SendSmtpEmailReplyTo,\n  \"SendSmtpEmailReplyTo1\": SendSmtpEmailReplyTo1,\n  \"SendSmtpEmailSender\": SendSmtpEmailSender,\n  \"SendSmtpEmailTo\": SendSmtpEmailTo,\n  \"SendSmtpEmailTo1\": SendSmtpEmailTo1,\n  \"SendTestEmail\": SendTestEmail,\n  \"SendTestSms\": SendTestSms,\n  \"SendTransacSms\": SendTransacSms,\n  \"SsoTokenRequest\": SsoTokenRequest,\n  \"SubAccountDetailsResponse\": SubAccountDetailsResponse,\n  \"SubAccountDetailsResponsePlanInfo\": SubAccountDetailsResponsePlanInfo,\n  \"SubAccountDetailsResponsePlanInfoCredits\": SubAccountDetailsResponsePlanInfoCredits,\n  \"SubAccountDetailsResponsePlanInfoCreditsEmails\": SubAccountDetailsResponsePlanInfoCreditsEmails,\n  \"SubAccountDetailsResponsePlanInfoFeatures\": SubAccountDetailsResponsePlanInfoFeatures,\n  \"SubAccountDetailsResponsePlanInfoFeaturesInbox\": SubAccountDetailsResponsePlanInfoFeaturesInbox,\n  \"SubAccountDetailsResponsePlanInfoFeaturesLandingPage\": SubAccountDetailsResponsePlanInfoFeaturesLandingPage,\n  \"SubAccountDetailsResponsePlanInfoFeaturesUsers\": SubAccountDetailsResponsePlanInfoFeaturesUsers,\n  \"SubAccountUpdatePlanRequest\": SubAccountUpdatePlanRequest,\n  \"SubAccountUpdatePlanRequestCredits\": SubAccountUpdatePlanRequestCredits,\n  \"SubAccountUpdatePlanRequestFeatures\": SubAccountUpdatePlanRequestFeatures,\n  \"SubAccountsResponse\": SubAccountsResponse,\n  \"SubAccountsResponseSubAccounts\": SubAccountsResponseSubAccounts,\n  \"Task\": Task,\n  \"TaskList\": TaskList,\n  \"TaskReminder\": TaskReminder,\n  \"TaskTypes\": TaskTypes,\n  \"UpdateAttribute\": UpdateAttribute,\n  \"UpdateAttributeEnumeration\": UpdateAttributeEnumeration,\n  \"UpdateBatchContacts\": UpdateBatchContacts,\n  \"UpdateBatchContactsContacts\": UpdateBatchContactsContacts,\n  \"UpdateBatchContactsModel\": UpdateBatchContactsModel,\n  \"UpdateCampaignStatus\": UpdateCampaignStatus,\n  \"UpdateChild\": UpdateChild,\n  \"UpdateChildAccountStatus\": UpdateChildAccountStatus,\n  \"UpdateChildDomain\": UpdateChildDomain,\n  \"UpdateContact\": UpdateContact,\n  \"UpdateEmailCampaign\": UpdateEmailCampaign,\n  \"UpdateEmailCampaignRecipients\": UpdateEmailCampaignRecipients,\n  \"UpdateEmailCampaignSender\": UpdateEmailCampaignSender,\n  \"UpdateList\": UpdateList,\n  \"UpdateSender\": UpdateSender,\n  \"UpdateSmsCampaign\": UpdateSmsCampaign,\n  \"UpdateSmtpTemplate\": UpdateSmtpTemplate,\n  \"UpdateSmtpTemplateSender\": UpdateSmtpTemplateSender,\n  \"UpdateWebhook\": UpdateWebhook,\n  \"UploadImageModel\": UploadImageModel,\n  \"UploadImageToGallery\": UploadImageToGallery,\n  \"VariablesItems\": VariablesItems,\n  \"WhatsappCampStats\": WhatsappCampStats,\n  \"WhatsappCampTemplate\": WhatsappCampTemplate\n};\nclass HttpBasicAuth {\n  constructor() {\n    this.username = '';\n    this.password = '';\n  }\n  applyToRequest(requestOptions) {\n    requestOptions.auth = {\n      username: this.username,\n      password: this.password\n    };\n  }\n}\nexports.HttpBasicAuth = HttpBasicAuth;\nclass ApiKeyAuth {\n  constructor(location, paramName) {\n    this.location = location;\n    this.paramName = paramName;\n    this.apiKey = '';\n  }\n  applyToRequest(requestOptions) {\n    if (this.location == \"query\") {\n      requestOptions.qs[this.paramName] = this.apiKey;\n    } else if (this.location == \"header\" && requestOptions && requestOptions.headers) {\n      requestOptions.headers[this.paramName] = this.apiKey;\n    }\n  }\n}\nexports.ApiKeyAuth = ApiKeyAuth;\nclass OAuth {\n  constructor() {\n    this.accessToken = '';\n  }\n  applyToRequest(requestOptions) {\n    if (requestOptions && requestOptions.headers) {\n      requestOptions.headers[\"Authorization\"] = \"Bearer \" + this.accessToken;\n    }\n  }\n}\nexports.OAuth = OAuth;\nclass VoidAuth {\n  constructor() {\n    this.username = '';\n    this.password = '';\n  }\n  applyToRequest(_) {}\n}\nexports.VoidAuth = VoidAuth;\nvar AccountApiApiKeys;\n(function (AccountApiApiKeys) {\n  AccountApiApiKeys[AccountApiApiKeys[\"apiKey\"] = 0] = \"apiKey\";\n  AccountApiApiKeys[AccountApiApiKeys[\"partnerKey\"] = 1] = \"partnerKey\";\n})(AccountApiApiKeys = exports.AccountApiApiKeys || (exports.AccountApiApiKeys = {}));\nclass AccountApi {\n  constructor(basePathOrUsername, password, basePath) {\n    this._basePath = defaultBasePath;\n    this.defaultHeaders = {\n      'user-agent': `sendinblue_clientAPI/v${version}/ts-node`\n    };\n    this._useQuerystring = false;\n    this.authentications = {\n      'default': new VoidAuth(),\n      'apiKey': new ApiKeyAuth('header', 'api-key'),\n      'partnerKey': new ApiKeyAuth('header', 'partner-key')\n    };\n    if (password) {\n      if (basePath) {\n        this.basePath = basePath;\n      }\n    } else {\n      if (basePathOrUsername) {\n        this.basePath = basePathOrUsername;\n      }\n    }\n  }\n  set useQuerystring(value) {\n    this._useQuerystring = value;\n  }\n  set basePath(basePath) {\n    this._basePath = basePath;\n  }\n  get basePath() {\n    return this._basePath;\n  }\n  setDefaultAuthentication(auth) {\n    this.authentications.default = auth;\n  }\n  setApiKey(key, value) {\n    this.authentications[AccountApiApiKeys[key]].apiKey = value;\n  }\n  getAccount(options = {}) {\n    const localVarPath = this.basePath + '/account';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetAccount\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n}\nexports.AccountApi = AccountApi;\nvar CompaniesApiApiKeys;\n(function (CompaniesApiApiKeys) {\n  CompaniesApiApiKeys[CompaniesApiApiKeys[\"apiKey\"] = 0] = \"apiKey\";\n  CompaniesApiApiKeys[CompaniesApiApiKeys[\"partnerKey\"] = 1] = \"partnerKey\";\n})(CompaniesApiApiKeys = exports.CompaniesApiApiKeys || (exports.CompaniesApiApiKeys = {}));\nclass CompaniesApi {\n  constructor(basePathOrUsername, password, basePath) {\n    this._basePath = defaultBasePath;\n    this.defaultHeaders = {\n      'user-agent': `sendinblue_clientAPI/v${version}/ts-node`\n    };\n    this._useQuerystring = false;\n    this.authentications = {\n      'default': new VoidAuth(),\n      'apiKey': new ApiKeyAuth('header', 'api-key'),\n      'partnerKey': new ApiKeyAuth('header', 'partner-key')\n    };\n    if (password) {\n      if (basePath) {\n        this.basePath = basePath;\n      }\n    } else {\n      if (basePathOrUsername) {\n        this.basePath = basePathOrUsername;\n      }\n    }\n  }\n  set useQuerystring(value) {\n    this._useQuerystring = value;\n  }\n  set basePath(basePath) {\n    this._basePath = basePath;\n  }\n  get basePath() {\n    return this._basePath;\n  }\n  setDefaultAuthentication(auth) {\n    this.authentications.default = auth;\n  }\n  setApiKey(key, value) {\n    this.authentications[CompaniesApiApiKeys[key]].apiKey = value;\n  }\n  companiesAttributesGet(options = {}) {\n    const localVarPath = this.basePath + '/companies/attributes';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"CompanyAttributes\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  companiesGet(filters, linkedContactsIds, linkedDealsIds, page, limit, sort, sortBy, options = {}) {\n    const localVarPath = this.basePath + '/companies';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (filters !== undefined) {\n      localVarQueryParameters['filters'] = ObjectSerializer.serialize(filters, \"string\");\n    }\n    if (linkedContactsIds !== undefined) {\n      localVarQueryParameters['linkedContactsIds'] = ObjectSerializer.serialize(linkedContactsIds, \"number\");\n    }\n    if (linkedDealsIds !== undefined) {\n      localVarQueryParameters['linkedDealsIds'] = ObjectSerializer.serialize(linkedDealsIds, \"string\");\n    }\n    if (page !== undefined) {\n      localVarQueryParameters['page'] = ObjectSerializer.serialize(page, \"number\");\n    }\n    if (limit !== undefined) {\n      localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, \"number\");\n    }\n    if (sort !== undefined) {\n      localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, \"'asc' | 'desc'\");\n    }\n    if (sortBy !== undefined) {\n      localVarQueryParameters['sortBy'] = ObjectSerializer.serialize(sortBy, \"string\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"CompaniesList\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  companiesIdDelete(id, options = {}) {\n    const localVarPath = this.basePath + '/companies/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling companiesIdDelete.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'DELETE',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  companiesIdGet(id, options = {}) {\n    const localVarPath = this.basePath + '/companies/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling companiesIdGet.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"Company\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  companiesIdPatch(id, body, options = {}) {\n    const localVarPath = this.basePath + '/companies/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling companiesIdPatch.');\n    }\n    if (body === null || body === undefined) {\n      throw new Error('Required parameter body was null or undefined when calling companiesIdPatch.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'PATCH',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(body, \"Body1\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"Company\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  companiesLinkUnlinkIdPatch(id, body, options = {}) {\n    const localVarPath = this.basePath + '/companies/link-unlink/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling companiesLinkUnlinkIdPatch.');\n    }\n    if (body === null || body === undefined) {\n      throw new Error('Required parameter body was null or undefined when calling companiesLinkUnlinkIdPatch.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'PATCH',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(body, \"Body2\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  companiesPost(body, options = {}) {\n    const localVarPath = this.basePath + '/companies';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (body === null || body === undefined) {\n      throw new Error('Required parameter body was null or undefined when calling companiesPost.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(body, \"Body\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"InlineResponse200\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n}\nexports.CompaniesApi = CompaniesApi;\nvar ContactsApiApiKeys;\n(function (ContactsApiApiKeys) {\n  ContactsApiApiKeys[ContactsApiApiKeys[\"apiKey\"] = 0] = \"apiKey\";\n  ContactsApiApiKeys[ContactsApiApiKeys[\"partnerKey\"] = 1] = \"partnerKey\";\n})(ContactsApiApiKeys = exports.ContactsApiApiKeys || (exports.ContactsApiApiKeys = {}));\nclass ContactsApi {\n  constructor(basePathOrUsername, password, basePath) {\n    this._basePath = defaultBasePath;\n    this.defaultHeaders = {\n      'user-agent': `sendinblue_clientAPI/v${version}/ts-node`\n    };\n    this._useQuerystring = false;\n    this.authentications = {\n      'default': new VoidAuth(),\n      'apiKey': new ApiKeyAuth('header', 'api-key'),\n      'partnerKey': new ApiKeyAuth('header', 'partner-key')\n    };\n    if (password) {\n      if (basePath) {\n        this.basePath = basePath;\n      }\n    } else {\n      if (basePathOrUsername) {\n        this.basePath = basePathOrUsername;\n      }\n    }\n  }\n  set useQuerystring(value) {\n    this._useQuerystring = value;\n  }\n  set basePath(basePath) {\n    this._basePath = basePath;\n  }\n  get basePath() {\n    return this._basePath;\n  }\n  setDefaultAuthentication(auth) {\n    this.authentications.default = auth;\n  }\n  setApiKey(key, value) {\n    this.authentications[ContactsApiApiKeys[key]].apiKey = value;\n  }\n  addContactToList(listId, contactEmails, options = {}) {\n    const localVarPath = this.basePath + '/contacts/lists/{listId}/contacts/add'.replace('{' + 'listId' + '}', encodeURIComponent(String(listId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (listId === null || listId === undefined) {\n      throw new Error('Required parameter listId was null or undefined when calling addContactToList.');\n    }\n    if (contactEmails === null || contactEmails === undefined) {\n      throw new Error('Required parameter contactEmails was null or undefined when calling addContactToList.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(contactEmails, \"AddContactToList\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"PostContactInfo\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  createAttribute(attributeCategory, attributeName, createAttribute, options = {}) {\n    const localVarPath = this.basePath + '/contacts/attributes/{attributeCategory}/{attributeName}'.replace('{' + 'attributeCategory' + '}', encodeURIComponent(String(attributeCategory))).replace('{' + 'attributeName' + '}', encodeURIComponent(String(attributeName)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (attributeCategory === null || attributeCategory === undefined) {\n      throw new Error('Required parameter attributeCategory was null or undefined when calling createAttribute.');\n    }\n    if (attributeName === null || attributeName === undefined) {\n      throw new Error('Required parameter attributeName was null or undefined when calling createAttribute.');\n    }\n    if (createAttribute === null || createAttribute === undefined) {\n      throw new Error('Required parameter createAttribute was null or undefined when calling createAttribute.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(createAttribute, \"CreateAttribute\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  createContact(createContact, options = {}) {\n    const localVarPath = this.basePath + '/contacts';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (createContact === null || createContact === undefined) {\n      throw new Error('Required parameter createContact was null or undefined when calling createContact.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(createContact, \"CreateContact\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"CreateUpdateContactModel\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  createDoiContact(createDoiContact, options = {}) {\n    const localVarPath = this.basePath + '/contacts/doubleOptinConfirmation';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (createDoiContact === null || createDoiContact === undefined) {\n      throw new Error('Required parameter createDoiContact was null or undefined when calling createDoiContact.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(createDoiContact, \"CreateDoiContact\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  createFolder(createFolder, options = {}) {\n    const localVarPath = this.basePath + '/contacts/folders';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (createFolder === null || createFolder === undefined) {\n      throw new Error('Required parameter createFolder was null or undefined when calling createFolder.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(createFolder, \"CreateUpdateFolder\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"CreateModel\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  createList(createList, options = {}) {\n    const localVarPath = this.basePath + '/contacts/lists';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (createList === null || createList === undefined) {\n      throw new Error('Required parameter createList was null or undefined when calling createList.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(createList, \"CreateList\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"CreateModel\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  deleteAttribute(attributeCategory, attributeName, options = {}) {\n    const localVarPath = this.basePath + '/contacts/attributes/{attributeCategory}/{attributeName}'.replace('{' + 'attributeCategory' + '}', encodeURIComponent(String(attributeCategory))).replace('{' + 'attributeName' + '}', encodeURIComponent(String(attributeName)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (attributeCategory === null || attributeCategory === undefined) {\n      throw new Error('Required parameter attributeCategory was null or undefined when calling deleteAttribute.');\n    }\n    if (attributeName === null || attributeName === undefined) {\n      throw new Error('Required parameter attributeName was null or undefined when calling deleteAttribute.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'DELETE',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  deleteContact(identifier, options = {}) {\n    const localVarPath = this.basePath + '/contacts/{identifier}'.replace('{' + 'identifier' + '}', encodeURIComponent(String(identifier)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (identifier === null || identifier === undefined) {\n      throw new Error('Required parameter identifier was null or undefined when calling deleteContact.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'DELETE',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  deleteFolder(folderId, options = {}) {\n    const localVarPath = this.basePath + '/contacts/folders/{folderId}'.replace('{' + 'folderId' + '}', encodeURIComponent(String(folderId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (folderId === null || folderId === undefined) {\n      throw new Error('Required parameter folderId was null or undefined when calling deleteFolder.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'DELETE',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  deleteList(listId, options = {}) {\n    const localVarPath = this.basePath + '/contacts/lists/{listId}'.replace('{' + 'listId' + '}', encodeURIComponent(String(listId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (listId === null || listId === undefined) {\n      throw new Error('Required parameter listId was null or undefined when calling deleteList.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'DELETE',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getAttributes(options = {}) {\n    const localVarPath = this.basePath + '/contacts/attributes';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetAttributes\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getContactInfo(identifier, startDate, endDate, options = {}) {\n    const localVarPath = this.basePath + '/contacts/{identifier}'.replace('{' + 'identifier' + '}', encodeURIComponent(String(identifier)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (identifier === null || identifier === undefined) {\n      throw new Error('Required parameter identifier was null or undefined when calling getContactInfo.');\n    }\n    if (startDate !== undefined) {\n      localVarQueryParameters['startDate'] = ObjectSerializer.serialize(startDate, \"any\");\n    }\n    if (endDate !== undefined) {\n      localVarQueryParameters['endDate'] = ObjectSerializer.serialize(endDate, \"any\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetExtendedContactDetails\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getContactStats(identifier, startDate, endDate, options = {}) {\n    const localVarPath = this.basePath + '/contacts/{identifier}/campaignStats'.replace('{' + 'identifier' + '}', encodeURIComponent(String(identifier)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (identifier === null || identifier === undefined) {\n      throw new Error('Required parameter identifier was null or undefined when calling getContactStats.');\n    }\n    if (startDate !== undefined) {\n      localVarQueryParameters['startDate'] = ObjectSerializer.serialize(startDate, \"string\");\n    }\n    if (endDate !== undefined) {\n      localVarQueryParameters['endDate'] = ObjectSerializer.serialize(endDate, \"string\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetContactCampaignStats\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getContacts(limit, offset, modifiedSince, sort, options = {}) {\n    const localVarPath = this.basePath + '/contacts';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (limit !== undefined) {\n      localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, \"number\");\n    }\n    if (offset !== undefined) {\n      localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, \"number\");\n    }\n    if (modifiedSince !== undefined) {\n      localVarQueryParameters['modifiedSince'] = ObjectSerializer.serialize(modifiedSince, \"string\");\n    }\n    if (sort !== undefined) {\n      localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, \"'asc' | 'desc'\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetContacts\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getContactsFromList(listId, modifiedSince, limit, offset, sort, options = {}) {\n    const localVarPath = this.basePath + '/contacts/lists/{listId}/contacts'.replace('{' + 'listId' + '}', encodeURIComponent(String(listId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (listId === null || listId === undefined) {\n      throw new Error('Required parameter listId was null or undefined when calling getContactsFromList.');\n    }\n    if (modifiedSince !== undefined) {\n      localVarQueryParameters['modifiedSince'] = ObjectSerializer.serialize(modifiedSince, \"string\");\n    }\n    if (limit !== undefined) {\n      localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, \"number\");\n    }\n    if (offset !== undefined) {\n      localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, \"number\");\n    }\n    if (sort !== undefined) {\n      localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, \"'asc' | 'desc'\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetContacts\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getFolder(folderId, options = {}) {\n    const localVarPath = this.basePath + '/contacts/folders/{folderId}'.replace('{' + 'folderId' + '}', encodeURIComponent(String(folderId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (folderId === null || folderId === undefined) {\n      throw new Error('Required parameter folderId was null or undefined when calling getFolder.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetFolder\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getFolderLists(folderId, limit, offset, sort, options = {}) {\n    const localVarPath = this.basePath + '/contacts/folders/{folderId}/lists'.replace('{' + 'folderId' + '}', encodeURIComponent(String(folderId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (folderId === null || folderId === undefined) {\n      throw new Error('Required parameter folderId was null or undefined when calling getFolderLists.');\n    }\n    if (limit !== undefined) {\n      localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, \"number\");\n    }\n    if (offset !== undefined) {\n      localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, \"number\");\n    }\n    if (sort !== undefined) {\n      localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, \"'asc' | 'desc'\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetFolderLists\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getFolders(limit, offset, sort, options = {}) {\n    const localVarPath = this.basePath + '/contacts/folders';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (limit === null || limit === undefined) {\n      throw new Error('Required parameter limit was null or undefined when calling getFolders.');\n    }\n    if (offset === null || offset === undefined) {\n      throw new Error('Required parameter offset was null or undefined when calling getFolders.');\n    }\n    if (limit !== undefined) {\n      localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, \"number\");\n    }\n    if (offset !== undefined) {\n      localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, \"number\");\n    }\n    if (sort !== undefined) {\n      localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, \"'asc' | 'desc'\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetFolders\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getList(listId, options = {}) {\n    const localVarPath = this.basePath + '/contacts/lists/{listId}'.replace('{' + 'listId' + '}', encodeURIComponent(String(listId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (listId === null || listId === undefined) {\n      throw new Error('Required parameter listId was null or undefined when calling getList.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetExtendedList\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getLists(limit, offset, sort, options = {}) {\n    const localVarPath = this.basePath + '/contacts/lists';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (limit !== undefined) {\n      localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, \"number\");\n    }\n    if (offset !== undefined) {\n      localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, \"number\");\n    }\n    if (sort !== undefined) {\n      localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, \"'asc' | 'desc'\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetLists\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  importContacts(requestContactImport, options = {}) {\n    const localVarPath = this.basePath + '/contacts/import';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (requestContactImport === null || requestContactImport === undefined) {\n      throw new Error('Required parameter requestContactImport was null or undefined when calling importContacts.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(requestContactImport, \"RequestContactImport\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"CreatedProcessId\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  removeContactFromList(listId, contactEmails, options = {}) {\n    const localVarPath = this.basePath + '/contacts/lists/{listId}/contacts/remove'.replace('{' + 'listId' + '}', encodeURIComponent(String(listId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (listId === null || listId === undefined) {\n      throw new Error('Required parameter listId was null or undefined when calling removeContactFromList.');\n    }\n    if (contactEmails === null || contactEmails === undefined) {\n      throw new Error('Required parameter contactEmails was null or undefined when calling removeContactFromList.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(contactEmails, \"RemoveContactFromList\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"PostContactInfo\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  requestContactExport(requestContactExport, options = {}) {\n    const localVarPath = this.basePath + '/contacts/export';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (requestContactExport === null || requestContactExport === undefined) {\n      throw new Error('Required parameter requestContactExport was null or undefined when calling requestContactExport.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(requestContactExport, \"RequestContactExport\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"CreatedProcessId\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  updateAttribute(attributeCategory, attributeName, updateAttribute, options = {}) {\n    const localVarPath = this.basePath + '/contacts/attributes/{attributeCategory}/{attributeName}'.replace('{' + 'attributeCategory' + '}', encodeURIComponent(String(attributeCategory))).replace('{' + 'attributeName' + '}', encodeURIComponent(String(attributeName)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (attributeCategory === null || attributeCategory === undefined) {\n      throw new Error('Required parameter attributeCategory was null or undefined when calling updateAttribute.');\n    }\n    if (attributeName === null || attributeName === undefined) {\n      throw new Error('Required parameter attributeName was null or undefined when calling updateAttribute.');\n    }\n    if (updateAttribute === null || updateAttribute === undefined) {\n      throw new Error('Required parameter updateAttribute was null or undefined when calling updateAttribute.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'PUT',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(updateAttribute, \"UpdateAttribute\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  updateBatchContacts(updateBatchContacts, options = {}) {\n    const localVarPath = this.basePath + '/contacts/batch';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (updateBatchContacts === null || updateBatchContacts === undefined) {\n      throw new Error('Required parameter updateBatchContacts was null or undefined when calling updateBatchContacts.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(updateBatchContacts, \"UpdateBatchContacts\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  updateContact(identifier, updateContact, options = {}) {\n    const localVarPath = this.basePath + '/contacts/{identifier}'.replace('{' + 'identifier' + '}', encodeURIComponent(String(identifier)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (identifier === null || identifier === undefined) {\n      throw new Error('Required parameter identifier was null or undefined when calling updateContact.');\n    }\n    if (updateContact === null || updateContact === undefined) {\n      throw new Error('Required parameter updateContact was null or undefined when calling updateContact.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'PUT',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(updateContact, \"UpdateContact\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  updateFolder(folderId, updateFolder, options = {}) {\n    const localVarPath = this.basePath + '/contacts/folders/{folderId}'.replace('{' + 'folderId' + '}', encodeURIComponent(String(folderId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (folderId === null || folderId === undefined) {\n      throw new Error('Required parameter folderId was null or undefined when calling updateFolder.');\n    }\n    if (updateFolder === null || updateFolder === undefined) {\n      throw new Error('Required parameter updateFolder was null or undefined when calling updateFolder.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'PUT',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(updateFolder, \"CreateUpdateFolder\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  updateList(listId, updateList, options = {}) {\n    const localVarPath = this.basePath + '/contacts/lists/{listId}'.replace('{' + 'listId' + '}', encodeURIComponent(String(listId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (listId === null || listId === undefined) {\n      throw new Error('Required parameter listId was null or undefined when calling updateList.');\n    }\n    if (updateList === null || updateList === undefined) {\n      throw new Error('Required parameter updateList was null or undefined when calling updateList.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'PUT',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(updateList, \"UpdateList\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n}\nexports.ContactsApi = ContactsApi;\nvar ConversationsApiApiKeys;\n(function (ConversationsApiApiKeys) {\n  ConversationsApiApiKeys[ConversationsApiApiKeys[\"apiKey\"] = 0] = \"apiKey\";\n  ConversationsApiApiKeys[ConversationsApiApiKeys[\"partnerKey\"] = 1] = \"partnerKey\";\n})(ConversationsApiApiKeys = exports.ConversationsApiApiKeys || (exports.ConversationsApiApiKeys = {}));\nclass ConversationsApi {\n  constructor(basePathOrUsername, password, basePath) {\n    this._basePath = defaultBasePath;\n    this.defaultHeaders = {\n      'user-agent': `sendinblue_clientAPI/v${version}/ts-node`\n    };\n    this._useQuerystring = false;\n    this.authentications = {\n      'default': new VoidAuth(),\n      'apiKey': new ApiKeyAuth('header', 'api-key'),\n      'partnerKey': new ApiKeyAuth('header', 'partner-key')\n    };\n    if (password) {\n      if (basePath) {\n        this.basePath = basePath;\n      }\n    } else {\n      if (basePathOrUsername) {\n        this.basePath = basePathOrUsername;\n      }\n    }\n  }\n  set useQuerystring(value) {\n    this._useQuerystring = value;\n  }\n  set basePath(basePath) {\n    this._basePath = basePath;\n  }\n  get basePath() {\n    return this._basePath;\n  }\n  setDefaultAuthentication(auth) {\n    this.authentications.default = auth;\n  }\n  setApiKey(key, value) {\n    this.authentications[ConversationsApiApiKeys[key]].apiKey = value;\n  }\n  conversationsAgentOnlinePingPost(body, options = {}) {\n    const localVarPath = this.basePath + '/conversations/agentOnlinePing';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (body === null || body === undefined) {\n      throw new Error('Required parameter body was null or undefined when calling conversationsAgentOnlinePingPost.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(body, \"Body12\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  conversationsMessagesIdDelete(id, options = {}) {\n    const localVarPath = this.basePath + '/conversations/messages/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling conversationsMessagesIdDelete.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'DELETE',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  conversationsMessagesIdGet(id, options = {}) {\n    const localVarPath = this.basePath + '/conversations/messages/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling conversationsMessagesIdGet.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"ConversationsMessage\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  conversationsMessagesIdPut(id, body, options = {}) {\n    const localVarPath = this.basePath + '/conversations/messages/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling conversationsMessagesIdPut.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'PUT',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(body, \"Body9\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"ConversationsMessage\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  conversationsMessagesPost(body, options = {}) {\n    const localVarPath = this.basePath + '/conversations/messages';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (body === null || body === undefined) {\n      throw new Error('Required parameter body was null or undefined when calling conversationsMessagesPost.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(body, \"Body8\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"ConversationsMessage\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  conversationsPushedMessagesIdDelete(id, options = {}) {\n    const localVarPath = this.basePath + '/conversations/pushedMessages/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling conversationsPushedMessagesIdDelete.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'DELETE',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  conversationsPushedMessagesIdGet(id, options = {}) {\n    const localVarPath = this.basePath + '/conversations/pushedMessages/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling conversationsPushedMessagesIdGet.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"ConversationsMessage\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  conversationsPushedMessagesIdPut(id, body, options = {}) {\n    const localVarPath = this.basePath + '/conversations/pushedMessages/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling conversationsPushedMessagesIdPut.');\n    }\n    if (body === null || body === undefined) {\n      throw new Error('Required parameter body was null or undefined when calling conversationsPushedMessagesIdPut.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'PUT',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(body, \"Body11\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"ConversationsMessage\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  conversationsPushedMessagesPost(body, options = {}) {\n    const localVarPath = this.basePath + '/conversations/pushedMessages';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (body === null || body === undefined) {\n      throw new Error('Required parameter body was null or undefined when calling conversationsPushedMessagesPost.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(body, \"Body10\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"ConversationsMessage\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n}\nexports.ConversationsApi = ConversationsApi;\nvar DealsApiApiKeys;\n(function (DealsApiApiKeys) {\n  DealsApiApiKeys[DealsApiApiKeys[\"apiKey\"] = 0] = \"apiKey\";\n  DealsApiApiKeys[DealsApiApiKeys[\"partnerKey\"] = 1] = \"partnerKey\";\n})(DealsApiApiKeys = exports.DealsApiApiKeys || (exports.DealsApiApiKeys = {}));\nclass DealsApi {\n  constructor(basePathOrUsername, password, basePath) {\n    this._basePath = defaultBasePath;\n    this.defaultHeaders = {\n      'user-agent': `sendinblue_clientAPI/v${version}/ts-node`\n    };\n    this._useQuerystring = false;\n    this.authentications = {\n      'default': new VoidAuth(),\n      'apiKey': new ApiKeyAuth('header', 'api-key'),\n      'partnerKey': new ApiKeyAuth('header', 'partner-key')\n    };\n    if (password) {\n      if (basePath) {\n        this.basePath = basePath;\n      }\n    } else {\n      if (basePathOrUsername) {\n        this.basePath = basePathOrUsername;\n      }\n    }\n  }\n  set useQuerystring(value) {\n    this._useQuerystring = value;\n  }\n  set basePath(basePath) {\n    this._basePath = basePath;\n  }\n  get basePath() {\n    return this._basePath;\n  }\n  setDefaultAuthentication(auth) {\n    this.authentications.default = auth;\n  }\n  setApiKey(key, value) {\n    this.authentications[DealsApiApiKeys[key]].apiKey = value;\n  }\n  crmAttributesDealsGet(options = {}) {\n    const localVarPath = this.basePath + '/crm/attributes/deals';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"DealAttributes\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  crmDealsGet(filtersAttributes, filtersLinkedCompaniesIds, filtersLinkedContactsIds, offset, limit, sort, sortBy, options = {}) {\n    const localVarPath = this.basePath + '/crm/deals';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (filtersAttributes !== undefined) {\n      localVarQueryParameters['filters[attributes]'] = ObjectSerializer.serialize(filtersAttributes, \"string\");\n    }\n    if (filtersLinkedCompaniesIds !== undefined) {\n      localVarQueryParameters['filters[linkedCompaniesIds]'] = ObjectSerializer.serialize(filtersLinkedCompaniesIds, \"string\");\n    }\n    if (filtersLinkedContactsIds !== undefined) {\n      localVarQueryParameters['filters[linkedContactsIds]'] = ObjectSerializer.serialize(filtersLinkedContactsIds, \"string\");\n    }\n    if (offset !== undefined) {\n      localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, \"number\");\n    }\n    if (limit !== undefined) {\n      localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, \"number\");\n    }\n    if (sort !== undefined) {\n      localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, \"'asc' | 'desc'\");\n    }\n    if (sortBy !== undefined) {\n      localVarQueryParameters['sortBy'] = ObjectSerializer.serialize(sortBy, \"string\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"DealsList\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  crmDealsIdDelete(id, options = {}) {\n    const localVarPath = this.basePath + '/crm/deals/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling crmDealsIdDelete.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'DELETE',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  crmDealsIdGet(id, options = {}) {\n    const localVarPath = this.basePath + '/crm/deals/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling crmDealsIdGet.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"Deal\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  crmDealsIdPatch(id, body, options = {}) {\n    const localVarPath = this.basePath + '/crm/deals/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling crmDealsIdPatch.');\n    }\n    if (body === null || body === undefined) {\n      throw new Error('Required parameter body was null or undefined when calling crmDealsIdPatch.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'PATCH',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(body, \"Body4\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  crmDealsLinkUnlinkIdPatch(id, body, options = {}) {\n    const localVarPath = this.basePath + '/crm/deals/link-unlink/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling crmDealsLinkUnlinkIdPatch.');\n    }\n    if (body === null || body === undefined) {\n      throw new Error('Required parameter body was null or undefined when calling crmDealsLinkUnlinkIdPatch.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'PATCH',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(body, \"Body5\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  crmDealsPost(body, options = {}) {\n    const localVarPath = this.basePath + '/crm/deals';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (body === null || body === undefined) {\n      throw new Error('Required parameter body was null or undefined when calling crmDealsPost.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(body, \"Body3\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"InlineResponse201\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  crmPipelineDetailsGet(options = {}) {\n    const localVarPath = this.basePath + '/crm/pipeline/details';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"Pipeline\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n}\nexports.DealsApi = DealsApi;\nvar EcommerceApiApiKeys;\n(function (EcommerceApiApiKeys) {\n  EcommerceApiApiKeys[EcommerceApiApiKeys[\"apiKey\"] = 0] = \"apiKey\";\n  EcommerceApiApiKeys[EcommerceApiApiKeys[\"partnerKey\"] = 1] = \"partnerKey\";\n})(EcommerceApiApiKeys = exports.EcommerceApiApiKeys || (exports.EcommerceApiApiKeys = {}));\nclass EcommerceApi {\n  constructor(basePathOrUsername, password, basePath) {\n    this._basePath = defaultBasePath;\n    this.defaultHeaders = {\n      'user-agent': `sendinblue_clientAPI/v${version}/ts-node`\n    };\n    this._useQuerystring = false;\n    this.authentications = {\n      'default': new VoidAuth(),\n      'apiKey': new ApiKeyAuth('header', 'api-key'),\n      'partnerKey': new ApiKeyAuth('header', 'partner-key')\n    };\n    if (password) {\n      if (basePath) {\n        this.basePath = basePath;\n      }\n    } else {\n      if (basePathOrUsername) {\n        this.basePath = basePathOrUsername;\n      }\n    }\n  }\n  set useQuerystring(value) {\n    this._useQuerystring = value;\n  }\n  set basePath(basePath) {\n    this._basePath = basePath;\n  }\n  get basePath() {\n    return this._basePath;\n  }\n  setDefaultAuthentication(auth) {\n    this.authentications.default = auth;\n  }\n  setApiKey(key, value) {\n    this.authentications[EcommerceApiApiKeys[key]].apiKey = value;\n  }\n  createBatchOrder(orderBatch, options = {}) {\n    const localVarPath = this.basePath + '/orders/status/batch';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (orderBatch === null || orderBatch === undefined) {\n      throw new Error('Required parameter orderBatch was null or undefined when calling createBatchOrder.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(orderBatch, \"OrderBatch\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  createOrder(order, options = {}) {\n    const localVarPath = this.basePath + '/orders/status';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (order === null || order === undefined) {\n      throw new Error('Required parameter order was null or undefined when calling createOrder.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(order, \"Order\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  createUpdateBatchCategory(createUpdateBatchCategory, options = {}) {\n    const localVarPath = this.basePath + '/categories/batch';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (createUpdateBatchCategory === null || createUpdateBatchCategory === undefined) {\n      throw new Error('Required parameter createUpdateBatchCategory was null or undefined when calling createUpdateBatchCategory.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(createUpdateBatchCategory, \"CreateUpdateBatchCategory\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"CreateUpdateBatchCategoryModel\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  createUpdateBatchProducts(createUpdateBatchProducts, options = {}) {\n    const localVarPath = this.basePath + '/products/batch';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (createUpdateBatchProducts === null || createUpdateBatchProducts === undefined) {\n      throw new Error('Required parameter createUpdateBatchProducts was null or undefined when calling createUpdateBatchProducts.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(createUpdateBatchProducts, \"CreateUpdateBatchProducts\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"CreateUpdateBatchProductsModel\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  createUpdateCategory(createUpdateCategory, options = {}) {\n    const localVarPath = this.basePath + '/categories';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (createUpdateCategory === null || createUpdateCategory === undefined) {\n      throw new Error('Required parameter createUpdateCategory was null or undefined when calling createUpdateCategory.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(createUpdateCategory, \"CreateUpdateCategory\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"CreateCategoryModel\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  createUpdateProduct(createUpdateProduct, options = {}) {\n    const localVarPath = this.basePath + '/products';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (createUpdateProduct === null || createUpdateProduct === undefined) {\n      throw new Error('Required parameter createUpdateProduct was null or undefined when calling createUpdateProduct.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(createUpdateProduct, \"CreateUpdateProduct\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"CreateProductModel\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  ecommerceActivatePost(options = {}) {\n    const localVarPath = this.basePath + '/ecommerce/activate';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getCategories(limit, offset, sort, ids, options = {}) {\n    const localVarPath = this.basePath + '/categories';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (limit !== undefined) {\n      localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, \"number\");\n    }\n    if (offset !== undefined) {\n      localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, \"number\");\n    }\n    if (sort !== undefined) {\n      localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, \"'asc' | 'desc'\");\n    }\n    if (ids !== undefined) {\n      localVarQueryParameters['ids'] = ObjectSerializer.serialize(ids, \"Array<string>\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetCategories\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getCategoryInfo(id, options = {}) {\n    const localVarPath = this.basePath + '/categories/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling getCategoryInfo.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetCategoryDetails\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getProductInfo(id, options = {}) {\n    const localVarPath = this.basePath + '/products/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling getProductInfo.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetProductDetails\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getProducts(limit, offset, sort, ids, options = {}) {\n    const localVarPath = this.basePath + '/products';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (limit !== undefined) {\n      localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, \"number\");\n    }\n    if (offset !== undefined) {\n      localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, \"number\");\n    }\n    if (sort !== undefined) {\n      localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, \"'asc' | 'desc'\");\n    }\n    if (ids !== undefined) {\n      localVarQueryParameters['ids'] = ObjectSerializer.serialize(ids, \"Array<string>\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetProducts\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n}\nexports.EcommerceApi = EcommerceApi;\nvar EmailCampaignsApiApiKeys;\n(function (EmailCampaignsApiApiKeys) {\n  EmailCampaignsApiApiKeys[EmailCampaignsApiApiKeys[\"apiKey\"] = 0] = \"apiKey\";\n  EmailCampaignsApiApiKeys[EmailCampaignsApiApiKeys[\"partnerKey\"] = 1] = \"partnerKey\";\n})(EmailCampaignsApiApiKeys = exports.EmailCampaignsApiApiKeys || (exports.EmailCampaignsApiApiKeys = {}));\nclass EmailCampaignsApi {\n  constructor(basePathOrUsername, password, basePath) {\n    this._basePath = defaultBasePath;\n    this.defaultHeaders = {\n      'user-agent': `sendinblue_clientAPI/v${version}/ts-node`\n    };\n    this._useQuerystring = false;\n    this.authentications = {\n      'default': new VoidAuth(),\n      'apiKey': new ApiKeyAuth('header', 'api-key'),\n      'partnerKey': new ApiKeyAuth('header', 'partner-key')\n    };\n    if (password) {\n      if (basePath) {\n        this.basePath = basePath;\n      }\n    } else {\n      if (basePathOrUsername) {\n        this.basePath = basePathOrUsername;\n      }\n    }\n  }\n  set useQuerystring(value) {\n    this._useQuerystring = value;\n  }\n  set basePath(basePath) {\n    this._basePath = basePath;\n  }\n  get basePath() {\n    return this._basePath;\n  }\n  setDefaultAuthentication(auth) {\n    this.authentications.default = auth;\n  }\n  setApiKey(key, value) {\n    this.authentications[EmailCampaignsApiApiKeys[key]].apiKey = value;\n  }\n  createEmailCampaign(emailCampaigns, options = {}) {\n    const localVarPath = this.basePath + '/emailCampaigns';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (emailCampaigns === null || emailCampaigns === undefined) {\n      throw new Error('Required parameter emailCampaigns was null or undefined when calling createEmailCampaign.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(emailCampaigns, \"CreateEmailCampaign\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"CreateModel\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  deleteEmailCampaign(campaignId, options = {}) {\n    const localVarPath = this.basePath + '/emailCampaigns/{campaignId}'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (campaignId === null || campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling deleteEmailCampaign.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'DELETE',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  emailExportRecipients(campaignId, recipientExport, options = {}) {\n    const localVarPath = this.basePath + '/emailCampaigns/{campaignId}/exportRecipients'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (campaignId === null || campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling emailExportRecipients.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(recipientExport, \"EmailExportRecipients\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"CreatedProcessId\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getAbTestCampaignResult(campaignId, options = {}) {\n    const localVarPath = this.basePath + '/emailCampaigns/{campaignId}/abTestCampaignResult'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (campaignId === null || campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling getAbTestCampaignResult.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"AbTestCampaignResult\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getEmailCampaign(campaignId, statistics, options = {}) {\n    const localVarPath = this.basePath + '/emailCampaigns/{campaignId}'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (campaignId === null || campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling getEmailCampaign.');\n    }\n    if (statistics !== undefined) {\n      localVarQueryParameters['statistics'] = ObjectSerializer.serialize(statistics, \"'globalStats' | 'linksStats' | 'statsByDomain' | 'statsByDevice' | 'statsByBrowser'\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetEmailCampaign\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getEmailCampaigns(type, status, statistics, startDate, endDate, limit, offset, sort, options = {}) {\n    const localVarPath = this.basePath + '/emailCampaigns';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (type !== undefined) {\n      localVarQueryParameters['type'] = ObjectSerializer.serialize(type, \"'classic' | 'trigger'\");\n    }\n    if (status !== undefined) {\n      localVarQueryParameters['status'] = ObjectSerializer.serialize(status, \"'suspended' | 'archive' | 'sent' | 'queued' | 'draft' | 'inProcess'\");\n    }\n    if (statistics !== undefined) {\n      localVarQueryParameters['statistics'] = ObjectSerializer.serialize(statistics, \"'globalStats' | 'linksStats' | 'statsByDomain'\");\n    }\n    if (startDate !== undefined) {\n      localVarQueryParameters['startDate'] = ObjectSerializer.serialize(startDate, \"string\");\n    }\n    if (endDate !== undefined) {\n      localVarQueryParameters['endDate'] = ObjectSerializer.serialize(endDate, \"string\");\n    }\n    if (limit !== undefined) {\n      localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, \"number\");\n    }\n    if (offset !== undefined) {\n      localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, \"number\");\n    }\n    if (sort !== undefined) {\n      localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, \"'asc' | 'desc'\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetEmailCampaigns\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getSharedTemplateUrl(campaignId, options = {}) {\n    const localVarPath = this.basePath + '/emailCampaigns/{campaignId}/sharedUrl'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (campaignId === null || campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling getSharedTemplateUrl.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetSharedTemplateUrl\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  sendEmailCampaignNow(campaignId, options = {}) {\n    const localVarPath = this.basePath + '/emailCampaigns/{campaignId}/sendNow'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (campaignId === null || campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling sendEmailCampaignNow.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  sendReport(campaignId, sendReport, options = {}) {\n    const localVarPath = this.basePath + '/emailCampaigns/{campaignId}/sendReport'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (campaignId === null || campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling sendReport.');\n    }\n    if (sendReport === null || sendReport === undefined) {\n      throw new Error('Required parameter sendReport was null or undefined when calling sendReport.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(sendReport, \"SendReport\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  sendTestEmail(campaignId, emailTo, options = {}) {\n    const localVarPath = this.basePath + '/emailCampaigns/{campaignId}/sendTest'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (campaignId === null || campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling sendTestEmail.');\n    }\n    if (emailTo === null || emailTo === undefined) {\n      throw new Error('Required parameter emailTo was null or undefined when calling sendTestEmail.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(emailTo, \"SendTestEmail\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  updateCampaignStatus(campaignId, status, options = {}) {\n    const localVarPath = this.basePath + '/emailCampaigns/{campaignId}/status'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (campaignId === null || campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling updateCampaignStatus.');\n    }\n    if (status === null || status === undefined) {\n      throw new Error('Required parameter status was null or undefined when calling updateCampaignStatus.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'PUT',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(status, \"UpdateCampaignStatus\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  updateEmailCampaign(campaignId, emailCampaign, options = {}) {\n    const localVarPath = this.basePath + '/emailCampaigns/{campaignId}'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (campaignId === null || campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling updateEmailCampaign.');\n    }\n    if (emailCampaign === null || emailCampaign === undefined) {\n      throw new Error('Required parameter emailCampaign was null or undefined when calling updateEmailCampaign.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'PUT',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(emailCampaign, \"UpdateEmailCampaign\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  uploadImageToGallery(uploadImage, options = {}) {\n    const localVarPath = this.basePath + '/emailCampaigns/images';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (uploadImage === null || uploadImage === undefined) {\n      throw new Error('Required parameter uploadImage was null or undefined when calling uploadImageToGallery.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(uploadImage, \"UploadImageToGallery\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"UploadImageModel\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n}\nexports.EmailCampaignsApi = EmailCampaignsApi;\nvar FilesApiApiKeys;\n(function (FilesApiApiKeys) {\n  FilesApiApiKeys[FilesApiApiKeys[\"apiKey\"] = 0] = \"apiKey\";\n  FilesApiApiKeys[FilesApiApiKeys[\"partnerKey\"] = 1] = \"partnerKey\";\n})(FilesApiApiKeys = exports.FilesApiApiKeys || (exports.FilesApiApiKeys = {}));\nclass FilesApi {\n  constructor(basePathOrUsername, password, basePath) {\n    this._basePath = defaultBasePath;\n    this.defaultHeaders = {\n      'user-agent': `sendinblue_clientAPI/v${version}/ts-node`\n    };\n    this._useQuerystring = false;\n    this.authentications = {\n      'default': new VoidAuth(),\n      'apiKey': new ApiKeyAuth('header', 'api-key'),\n      'partnerKey': new ApiKeyAuth('header', 'partner-key')\n    };\n    if (password) {\n      if (basePath) {\n        this.basePath = basePath;\n      }\n    } else {\n      if (basePathOrUsername) {\n        this.basePath = basePathOrUsername;\n      }\n    }\n  }\n  set useQuerystring(value) {\n    this._useQuerystring = value;\n  }\n  set basePath(basePath) {\n    this._basePath = basePath;\n  }\n  get basePath() {\n    return this._basePath;\n  }\n  setDefaultAuthentication(auth) {\n    this.authentications.default = auth;\n  }\n  setApiKey(key, value) {\n    this.authentications[FilesApiApiKeys[key]].apiKey = value;\n  }\n  crmFilesGet(entity, entityIds, dateFrom, dateTo, offset, limit, sort, options = {}) {\n    const localVarPath = this.basePath + '/crm/files';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (entity !== undefined) {\n      localVarQueryParameters['entity'] = ObjectSerializer.serialize(entity, \"'companies' | 'deals' | 'contacts'\");\n    }\n    if (entityIds !== undefined) {\n      localVarQueryParameters['entityIds'] = ObjectSerializer.serialize(entityIds, \"string\");\n    }\n    if (dateFrom !== undefined) {\n      localVarQueryParameters['dateFrom'] = ObjectSerializer.serialize(dateFrom, \"number\");\n    }\n    if (dateTo !== undefined) {\n      localVarQueryParameters['dateTo'] = ObjectSerializer.serialize(dateTo, \"number\");\n    }\n    if (offset !== undefined) {\n      localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, \"number\");\n    }\n    if (limit !== undefined) {\n      localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, \"number\");\n    }\n    if (sort !== undefined) {\n      localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, \"'asc' | 'desc'\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"FileList\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  crmFilesIdDataGet(id, options = {}) {\n    const localVarPath = this.basePath + '/crm/files/{id}/data'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling crmFilesIdDataGet.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"FileData\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  crmFilesIdDelete(id, options = {}) {\n    const localVarPath = this.basePath + '/crm/files/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling crmFilesIdDelete.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'DELETE',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  crmFilesIdGet(id, options = {}) {\n    const localVarPath = this.basePath + '/crm/files/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling crmFilesIdGet.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"FileDownloadableLink\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  crmFilesPost(file, dealId, contactId, companyId, options = {}) {\n    const localVarPath = this.basePath + '/crm/files';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (file === null || file === undefined) {\n      throw new Error('Required parameter file was null or undefined when calling crmFilesPost.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    let localVarUseFormData = false;\n    if (file !== undefined) {\n      localVarFormParams['file'] = file;\n    }\n    localVarUseFormData = true;\n    if (dealId !== undefined) {\n      localVarFormParams['dealId'] = ObjectSerializer.serialize(dealId, \"string\");\n    }\n    if (contactId !== undefined) {\n      localVarFormParams['contactId'] = ObjectSerializer.serialize(contactId, \"number\");\n    }\n    if (companyId !== undefined) {\n      localVarFormParams['companyId'] = ObjectSerializer.serialize(companyId, \"string\");\n    }\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"FileData\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n}\nexports.FilesApi = FilesApi;\nvar InboundParsingApiApiKeys;\n(function (InboundParsingApiApiKeys) {\n  InboundParsingApiApiKeys[InboundParsingApiApiKeys[\"apiKey\"] = 0] = \"apiKey\";\n  InboundParsingApiApiKeys[InboundParsingApiApiKeys[\"partnerKey\"] = 1] = \"partnerKey\";\n})(InboundParsingApiApiKeys = exports.InboundParsingApiApiKeys || (exports.InboundParsingApiApiKeys = {}));\nclass InboundParsingApi {\n  constructor(basePathOrUsername, password, basePath) {\n    this._basePath = defaultBasePath;\n    this.defaultHeaders = {\n      'user-agent': `sendinblue_clientAPI/v${version}/ts-node`\n    };\n    this._useQuerystring = false;\n    this.authentications = {\n      'default': new VoidAuth(),\n      'apiKey': new ApiKeyAuth('header', 'api-key'),\n      'partnerKey': new ApiKeyAuth('header', 'partner-key')\n    };\n    if (password) {\n      if (basePath) {\n        this.basePath = basePath;\n      }\n    } else {\n      if (basePathOrUsername) {\n        this.basePath = basePathOrUsername;\n      }\n    }\n  }\n  set useQuerystring(value) {\n    this._useQuerystring = value;\n  }\n  set basePath(basePath) {\n    this._basePath = basePath;\n  }\n  get basePath() {\n    return this._basePath;\n  }\n  setDefaultAuthentication(auth) {\n    this.authentications.default = auth;\n  }\n  setApiKey(key, value) {\n    this.authentications[InboundParsingApiApiKeys[key]].apiKey = value;\n  }\n  getInboundEmailAttachment(downloadToken, options = {}) {\n    const localVarPath = this.basePath + '/inbound/attachments/{downloadToken}'.replace('{' + 'downloadToken' + '}', encodeURIComponent(String(downloadToken)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (downloadToken === null || downloadToken === undefined) {\n      throw new Error('Required parameter downloadToken was null or undefined when calling getInboundEmailAttachment.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      encoding: null\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"Buffer\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getInboundEmailEvents(sender, startDate, endDate, limit, offset, sort, options = {}) {\n    const localVarPath = this.basePath + '/inbound/events';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (sender !== undefined) {\n      localVarQueryParameters['sender'] = ObjectSerializer.serialize(sender, \"string\");\n    }\n    if (startDate !== undefined) {\n      localVarQueryParameters['startDate'] = ObjectSerializer.serialize(startDate, \"string\");\n    }\n    if (endDate !== undefined) {\n      localVarQueryParameters['endDate'] = ObjectSerializer.serialize(endDate, \"string\");\n    }\n    if (limit !== undefined) {\n      localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, \"number\");\n    }\n    if (offset !== undefined) {\n      localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, \"number\");\n    }\n    if (sort !== undefined) {\n      localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, \"'asc' | 'desc'\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetInboundEmailEvents\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getInboundEmailEventsByUuid(uuid, options = {}) {\n    const localVarPath = this.basePath + '/inbound/events/{uuid}'.replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (uuid === null || uuid === undefined) {\n      throw new Error('Required parameter uuid was null or undefined when calling getInboundEmailEventsByUuid.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetInboundEmailEventsByUuid\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n}\nexports.InboundParsingApi = InboundParsingApi;\nvar MasterAccountApiApiKeys;\n(function (MasterAccountApiApiKeys) {\n  MasterAccountApiApiKeys[MasterAccountApiApiKeys[\"apiKey\"] = 0] = \"apiKey\";\n  MasterAccountApiApiKeys[MasterAccountApiApiKeys[\"partnerKey\"] = 1] = \"partnerKey\";\n})(MasterAccountApiApiKeys = exports.MasterAccountApiApiKeys || (exports.MasterAccountApiApiKeys = {}));\nclass MasterAccountApi {\n  constructor(basePathOrUsername, password, basePath) {\n    this._basePath = defaultBasePath;\n    this.defaultHeaders = {\n      'user-agent': `sendinblue_clientAPI/v${version}/ts-node`\n    };\n    this._useQuerystring = false;\n    this.authentications = {\n      'default': new VoidAuth(),\n      'apiKey': new ApiKeyAuth('header', 'api-key'),\n      'partnerKey': new ApiKeyAuth('header', 'partner-key')\n    };\n    if (password) {\n      if (basePath) {\n        this.basePath = basePath;\n      }\n    } else {\n      if (basePathOrUsername) {\n        this.basePath = basePathOrUsername;\n      }\n    }\n  }\n  set useQuerystring(value) {\n    this._useQuerystring = value;\n  }\n  set basePath(basePath) {\n    this._basePath = basePath;\n  }\n  get basePath() {\n    return this._basePath;\n  }\n  setDefaultAuthentication(auth) {\n    this.authentications.default = auth;\n  }\n  setApiKey(key, value) {\n    this.authentications[MasterAccountApiApiKeys[key]].apiKey = value;\n  }\n  corporateMasterAccountGet(options = {}) {\n    const localVarPath = this.basePath + '/corporate/masterAccount';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"MasterDetailsResponse\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  corporateSubAccountGet(offset, limit, options = {}) {\n    const localVarPath = this.basePath + '/corporate/subAccount';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (offset === null || offset === undefined) {\n      throw new Error('Required parameter offset was null or undefined when calling corporateSubAccountGet.');\n    }\n    if (limit === null || limit === undefined) {\n      throw new Error('Required parameter limit was null or undefined when calling corporateSubAccountGet.');\n    }\n    if (offset !== undefined) {\n      localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, \"number\");\n    }\n    if (limit !== undefined) {\n      localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, \"number\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"SubAccountsResponse\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  corporateSubAccountIdDelete(id, options = {}) {\n    const localVarPath = this.basePath + '/corporate/subAccount/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling corporateSubAccountIdDelete.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'DELETE',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  corporateSubAccountIdGet(id, options = {}) {\n    const localVarPath = this.basePath + '/corporate/subAccount/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling corporateSubAccountIdGet.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"SubAccountDetailsResponse\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  corporateSubAccountIdPlanPut(id, updatePlanDetails, options = {}) {\n    const localVarPath = this.basePath + '/corporate/subAccount/{id}/plan'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling corporateSubAccountIdPlanPut.');\n    }\n    if (updatePlanDetails === null || updatePlanDetails === undefined) {\n      throw new Error('Required parameter updatePlanDetails was null or undefined when calling corporateSubAccountIdPlanPut.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'PUT',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(updatePlanDetails, \"SubAccountUpdatePlanRequest\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  corporateSubAccountKeyPost(createApiKeyRequest, options = {}) {\n    const localVarPath = this.basePath + '/corporate/subAccount/key';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (createApiKeyRequest === null || createApiKeyRequest === undefined) {\n      throw new Error('Required parameter createApiKeyRequest was null or undefined when calling corporateSubAccountKeyPost.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(createApiKeyRequest, \"CreateApiKeyRequest\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"CreateApiKeyResponse\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  corporateSubAccountPost(subAccountCreate, options = {}) {\n    const localVarPath = this.basePath + '/corporate/subAccount';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (subAccountCreate === null || subAccountCreate === undefined) {\n      throw new Error('Required parameter subAccountCreate was null or undefined when calling corporateSubAccountPost.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(subAccountCreate, \"CreateSubAccount\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"CreateSubAccountResponse\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  corporateSubAccountSsoTokenPost(ssoTokenRequest, options = {}) {\n    const localVarPath = this.basePath + '/corporate/subAccount/ssoToken';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (ssoTokenRequest === null || ssoTokenRequest === undefined) {\n      throw new Error('Required parameter ssoTokenRequest was null or undefined when calling corporateSubAccountSsoTokenPost.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(ssoTokenRequest, \"SsoTokenRequest\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetSsoToken\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n}\nexports.MasterAccountApi = MasterAccountApi;\nvar NotesApiApiKeys;\n(function (NotesApiApiKeys) {\n  NotesApiApiKeys[NotesApiApiKeys[\"apiKey\"] = 0] = \"apiKey\";\n  NotesApiApiKeys[NotesApiApiKeys[\"partnerKey\"] = 1] = \"partnerKey\";\n})(NotesApiApiKeys = exports.NotesApiApiKeys || (exports.NotesApiApiKeys = {}));\nclass NotesApi {\n  constructor(basePathOrUsername, password, basePath) {\n    this._basePath = defaultBasePath;\n    this.defaultHeaders = {\n      'user-agent': `sendinblue_clientAPI/v${version}/ts-node`\n    };\n    this._useQuerystring = false;\n    this.authentications = {\n      'default': new VoidAuth(),\n      'apiKey': new ApiKeyAuth('header', 'api-key'),\n      'partnerKey': new ApiKeyAuth('header', 'partner-key')\n    };\n    if (password) {\n      if (basePath) {\n        this.basePath = basePath;\n      }\n    } else {\n      if (basePathOrUsername) {\n        this.basePath = basePathOrUsername;\n      }\n    }\n  }\n  set useQuerystring(value) {\n    this._useQuerystring = value;\n  }\n  set basePath(basePath) {\n    this._basePath = basePath;\n  }\n  get basePath() {\n    return this._basePath;\n  }\n  setDefaultAuthentication(auth) {\n    this.authentications.default = auth;\n  }\n  setApiKey(key, value) {\n    this.authentications[NotesApiApiKeys[key]].apiKey = value;\n  }\n  crmNotesGet(entity, entityIds, dateFrom, dateTo, offset, limit, sort, options = {}) {\n    const localVarPath = this.basePath + '/crm/notes';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (entity !== undefined) {\n      localVarQueryParameters['entity'] = ObjectSerializer.serialize(entity, \"'companies' | 'deals' | 'contacts'\");\n    }\n    if (entityIds !== undefined) {\n      localVarQueryParameters['entityIds'] = ObjectSerializer.serialize(entityIds, \"string\");\n    }\n    if (dateFrom !== undefined) {\n      localVarQueryParameters['dateFrom'] = ObjectSerializer.serialize(dateFrom, \"number\");\n    }\n    if (dateTo !== undefined) {\n      localVarQueryParameters['dateTo'] = ObjectSerializer.serialize(dateTo, \"number\");\n    }\n    if (offset !== undefined) {\n      localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, \"number\");\n    }\n    if (limit !== undefined) {\n      localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, \"number\");\n    }\n    if (sort !== undefined) {\n      localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, \"'asc' | 'desc'\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"NoteList\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  crmNotesIdDelete(id, options = {}) {\n    const localVarPath = this.basePath + '/crm/notes/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling crmNotesIdDelete.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'DELETE',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  crmNotesIdGet(id, options = {}) {\n    const localVarPath = this.basePath + '/crm/notes/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling crmNotesIdGet.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"Note\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  crmNotesIdPatch(id, body, options = {}) {\n    const localVarPath = this.basePath + '/crm/notes/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling crmNotesIdPatch.');\n    }\n    if (body === null || body === undefined) {\n      throw new Error('Required parameter body was null or undefined when calling crmNotesIdPatch.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'PATCH',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(body, \"NoteData\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  crmNotesPost(body, options = {}) {\n    const localVarPath = this.basePath + '/crm/notes';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (body === null || body === undefined) {\n      throw new Error('Required parameter body was null or undefined when calling crmNotesPost.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(body, \"NoteData\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"NoteId\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n}\nexports.NotesApi = NotesApi;\nvar ProcessApiApiKeys;\n(function (ProcessApiApiKeys) {\n  ProcessApiApiKeys[ProcessApiApiKeys[\"apiKey\"] = 0] = \"apiKey\";\n  ProcessApiApiKeys[ProcessApiApiKeys[\"partnerKey\"] = 1] = \"partnerKey\";\n})(ProcessApiApiKeys = exports.ProcessApiApiKeys || (exports.ProcessApiApiKeys = {}));\nclass ProcessApi {\n  constructor(basePathOrUsername, password, basePath) {\n    this._basePath = defaultBasePath;\n    this.defaultHeaders = {\n      'user-agent': `sendinblue_clientAPI/v${version}/ts-node`\n    };\n    this._useQuerystring = false;\n    this.authentications = {\n      'default': new VoidAuth(),\n      'apiKey': new ApiKeyAuth('header', 'api-key'),\n      'partnerKey': new ApiKeyAuth('header', 'partner-key')\n    };\n    if (password) {\n      if (basePath) {\n        this.basePath = basePath;\n      }\n    } else {\n      if (basePathOrUsername) {\n        this.basePath = basePathOrUsername;\n      }\n    }\n  }\n  set useQuerystring(value) {\n    this._useQuerystring = value;\n  }\n  set basePath(basePath) {\n    this._basePath = basePath;\n  }\n  get basePath() {\n    return this._basePath;\n  }\n  setDefaultAuthentication(auth) {\n    this.authentications.default = auth;\n  }\n  setApiKey(key, value) {\n    this.authentications[ProcessApiApiKeys[key]].apiKey = value;\n  }\n  getProcess(processId, options = {}) {\n    const localVarPath = this.basePath + '/processes/{processId}'.replace('{' + 'processId' + '}', encodeURIComponent(String(processId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (processId === null || processId === undefined) {\n      throw new Error('Required parameter processId was null or undefined when calling getProcess.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetProcess\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getProcesses(limit, offset, sort, options = {}) {\n    const localVarPath = this.basePath + '/processes';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (limit !== undefined) {\n      localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, \"number\");\n    }\n    if (offset !== undefined) {\n      localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, \"number\");\n    }\n    if (sort !== undefined) {\n      localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, \"'asc' | 'desc'\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetProcesses\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n}\nexports.ProcessApi = ProcessApi;\nvar ResellerApiApiKeys;\n(function (ResellerApiApiKeys) {\n  ResellerApiApiKeys[ResellerApiApiKeys[\"apiKey\"] = 0] = \"apiKey\";\n  ResellerApiApiKeys[ResellerApiApiKeys[\"partnerKey\"] = 1] = \"partnerKey\";\n})(ResellerApiApiKeys = exports.ResellerApiApiKeys || (exports.ResellerApiApiKeys = {}));\nclass ResellerApi {\n  constructor(basePathOrUsername, password, basePath) {\n    this._basePath = defaultBasePath;\n    this.defaultHeaders = {\n      'user-agent': `sendinblue_clientAPI/v${version}/ts-node`\n    };\n    this._useQuerystring = false;\n    this.authentications = {\n      'default': new VoidAuth(),\n      'apiKey': new ApiKeyAuth('header', 'api-key'),\n      'partnerKey': new ApiKeyAuth('header', 'partner-key')\n    };\n    if (password) {\n      if (basePath) {\n        this.basePath = basePath;\n      }\n    } else {\n      if (basePathOrUsername) {\n        this.basePath = basePathOrUsername;\n      }\n    }\n  }\n  set useQuerystring(value) {\n    this._useQuerystring = value;\n  }\n  set basePath(basePath) {\n    this._basePath = basePath;\n  }\n  get basePath() {\n    return this._basePath;\n  }\n  setDefaultAuthentication(auth) {\n    this.authentications.default = auth;\n  }\n  setApiKey(key, value) {\n    this.authentications[ResellerApiApiKeys[key]].apiKey = value;\n  }\n  addCredits(childIdentifier, addCredits, options = {}) {\n    const localVarPath = this.basePath + '/reseller/children/{childIdentifier}/credits/add'.replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (childIdentifier === null || childIdentifier === undefined) {\n      throw new Error('Required parameter childIdentifier was null or undefined when calling addCredits.');\n    }\n    if (addCredits === null || addCredits === undefined) {\n      throw new Error('Required parameter addCredits was null or undefined when calling addCredits.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(addCredits, \"AddCredits\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"RemainingCreditModel\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  associateIpToChild(childIdentifier, ip, options = {}) {\n    const localVarPath = this.basePath + '/reseller/children/{childIdentifier}/ips/associate'.replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (childIdentifier === null || childIdentifier === undefined) {\n      throw new Error('Required parameter childIdentifier was null or undefined when calling associateIpToChild.');\n    }\n    if (ip === null || ip === undefined) {\n      throw new Error('Required parameter ip was null or undefined when calling associateIpToChild.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(ip, \"ManageIp\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  createChildDomain(childIdentifier, addChildDomain, options = {}) {\n    const localVarPath = this.basePath + '/reseller/children/{childIdentifier}/domains'.replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (childIdentifier === null || childIdentifier === undefined) {\n      throw new Error('Required parameter childIdentifier was null or undefined when calling createChildDomain.');\n    }\n    if (addChildDomain === null || addChildDomain === undefined) {\n      throw new Error('Required parameter addChildDomain was null or undefined when calling createChildDomain.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(addChildDomain, \"AddChildDomain\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  createResellerChild(resellerChild, options = {}) {\n    const localVarPath = this.basePath + '/reseller/children';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(resellerChild, \"CreateChild\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"CreateReseller\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  deleteChildDomain(childIdentifier, domainName, options = {}) {\n    const localVarPath = this.basePath + '/reseller/children/{childIdentifier}/domains/{domainName}'.replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier))).replace('{' + 'domainName' + '}', encodeURIComponent(String(domainName)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (childIdentifier === null || childIdentifier === undefined) {\n      throw new Error('Required parameter childIdentifier was null or undefined when calling deleteChildDomain.');\n    }\n    if (domainName === null || domainName === undefined) {\n      throw new Error('Required parameter domainName was null or undefined when calling deleteChildDomain.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'DELETE',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  deleteResellerChild(childIdentifier, options = {}) {\n    const localVarPath = this.basePath + '/reseller/children/{childIdentifier}'.replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (childIdentifier === null || childIdentifier === undefined) {\n      throw new Error('Required parameter childIdentifier was null or undefined when calling deleteResellerChild.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'DELETE',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  dissociateIpFromChild(childIdentifier, ip, options = {}) {\n    const localVarPath = this.basePath + '/reseller/children/{childIdentifier}/ips/dissociate'.replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (childIdentifier === null || childIdentifier === undefined) {\n      throw new Error('Required parameter childIdentifier was null or undefined when calling dissociateIpFromChild.');\n    }\n    if (ip === null || ip === undefined) {\n      throw new Error('Required parameter ip was null or undefined when calling dissociateIpFromChild.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(ip, \"ManageIp\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getChildAccountCreationStatus(childIdentifier, options = {}) {\n    const localVarPath = this.basePath + '/reseller/children/{childIdentifier}/accountCreationStatus'.replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (childIdentifier === null || childIdentifier === undefined) {\n      throw new Error('Required parameter childIdentifier was null or undefined when calling getChildAccountCreationStatus.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetChildAccountCreationStatus\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getChildDomains(childIdentifier, options = {}) {\n    const localVarPath = this.basePath + '/reseller/children/{childIdentifier}/domains'.replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (childIdentifier === null || childIdentifier === undefined) {\n      throw new Error('Required parameter childIdentifier was null or undefined when calling getChildDomains.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetChildDomains\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getChildInfo(childIdentifier, options = {}) {\n    const localVarPath = this.basePath + '/reseller/children/{childIdentifier}'.replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (childIdentifier === null || childIdentifier === undefined) {\n      throw new Error('Required parameter childIdentifier was null or undefined when calling getChildInfo.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetChildInfo\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getResellerChilds(limit, offset, options = {}) {\n    const localVarPath = this.basePath + '/reseller/children';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (limit !== undefined) {\n      localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, \"number\");\n    }\n    if (offset !== undefined) {\n      localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, \"number\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetChildrenList\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getSsoToken(childIdentifier, options = {}) {\n    const localVarPath = this.basePath + '/reseller/children/{childIdentifier}/auth'.replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (childIdentifier === null || childIdentifier === undefined) {\n      throw new Error('Required parameter childIdentifier was null or undefined when calling getSsoToken.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetSsoToken\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  removeCredits(childIdentifier, removeCredits, options = {}) {\n    const localVarPath = this.basePath + '/reseller/children/{childIdentifier}/credits/remove'.replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (childIdentifier === null || childIdentifier === undefined) {\n      throw new Error('Required parameter childIdentifier was null or undefined when calling removeCredits.');\n    }\n    if (removeCredits === null || removeCredits === undefined) {\n      throw new Error('Required parameter removeCredits was null or undefined when calling removeCredits.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(removeCredits, \"RemoveCredits\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"RemainingCreditModel\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  updateChildAccountStatus(childIdentifier, updateChildAccountStatus, options = {}) {\n    const localVarPath = this.basePath + '/reseller/children/{childIdentifier}/accountStatus'.replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (childIdentifier === null || childIdentifier === undefined) {\n      throw new Error('Required parameter childIdentifier was null or undefined when calling updateChildAccountStatus.');\n    }\n    if (updateChildAccountStatus === null || updateChildAccountStatus === undefined) {\n      throw new Error('Required parameter updateChildAccountStatus was null or undefined when calling updateChildAccountStatus.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'PUT',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(updateChildAccountStatus, \"UpdateChildAccountStatus\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  updateChildDomain(childIdentifier, domainName, updateChildDomain, options = {}) {\n    const localVarPath = this.basePath + '/reseller/children/{childIdentifier}/domains/{domainName}'.replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier))).replace('{' + 'domainName' + '}', encodeURIComponent(String(domainName)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (childIdentifier === null || childIdentifier === undefined) {\n      throw new Error('Required parameter childIdentifier was null or undefined when calling updateChildDomain.');\n    }\n    if (domainName === null || domainName === undefined) {\n      throw new Error('Required parameter domainName was null or undefined when calling updateChildDomain.');\n    }\n    if (updateChildDomain === null || updateChildDomain === undefined) {\n      throw new Error('Required parameter updateChildDomain was null or undefined when calling updateChildDomain.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'PUT',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(updateChildDomain, \"UpdateChildDomain\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  updateResellerChild(childIdentifier, resellerChild, options = {}) {\n    const localVarPath = this.basePath + '/reseller/children/{childIdentifier}'.replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (childIdentifier === null || childIdentifier === undefined) {\n      throw new Error('Required parameter childIdentifier was null or undefined when calling updateResellerChild.');\n    }\n    if (resellerChild === null || resellerChild === undefined) {\n      throw new Error('Required parameter resellerChild was null or undefined when calling updateResellerChild.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'PUT',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(resellerChild, \"UpdateChild\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n}\nexports.ResellerApi = ResellerApi;\nvar SMSCampaignsApiApiKeys;\n(function (SMSCampaignsApiApiKeys) {\n  SMSCampaignsApiApiKeys[SMSCampaignsApiApiKeys[\"apiKey\"] = 0] = \"apiKey\";\n  SMSCampaignsApiApiKeys[SMSCampaignsApiApiKeys[\"partnerKey\"] = 1] = \"partnerKey\";\n})(SMSCampaignsApiApiKeys = exports.SMSCampaignsApiApiKeys || (exports.SMSCampaignsApiApiKeys = {}));\nclass SMSCampaignsApi {\n  constructor(basePathOrUsername, password, basePath) {\n    this._basePath = defaultBasePath;\n    this.defaultHeaders = {\n      'user-agent': `sendinblue_clientAPI/v${version}/ts-node`\n    };\n    this._useQuerystring = false;\n    this.authentications = {\n      'default': new VoidAuth(),\n      'apiKey': new ApiKeyAuth('header', 'api-key'),\n      'partnerKey': new ApiKeyAuth('header', 'partner-key')\n    };\n    if (password) {\n      if (basePath) {\n        this.basePath = basePath;\n      }\n    } else {\n      if (basePathOrUsername) {\n        this.basePath = basePathOrUsername;\n      }\n    }\n  }\n  set useQuerystring(value) {\n    this._useQuerystring = value;\n  }\n  set basePath(basePath) {\n    this._basePath = basePath;\n  }\n  get basePath() {\n    return this._basePath;\n  }\n  setDefaultAuthentication(auth) {\n    this.authentications.default = auth;\n  }\n  setApiKey(key, value) {\n    this.authentications[SMSCampaignsApiApiKeys[key]].apiKey = value;\n  }\n  createSmsCampaign(createSmsCampaign, options = {}) {\n    const localVarPath = this.basePath + '/smsCampaigns';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (createSmsCampaign === null || createSmsCampaign === undefined) {\n      throw new Error('Required parameter createSmsCampaign was null or undefined when calling createSmsCampaign.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(createSmsCampaign, \"CreateSmsCampaign\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"CreateModel\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  deleteSmsCampaign(campaignId, options = {}) {\n    const localVarPath = this.basePath + '/smsCampaigns/{campaignId}'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (campaignId === null || campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling deleteSmsCampaign.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'DELETE',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getSmsCampaign(campaignId, options = {}) {\n    const localVarPath = this.basePath + '/smsCampaigns/{campaignId}'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (campaignId === null || campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling getSmsCampaign.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetSmsCampaign\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getSmsCampaigns(status, startDate, endDate, limit, offset, sort, options = {}) {\n    const localVarPath = this.basePath + '/smsCampaigns';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (status !== undefined) {\n      localVarQueryParameters['status'] = ObjectSerializer.serialize(status, \"'suspended' | 'archive' | 'sent' | 'queued' | 'draft' | 'inProcess'\");\n    }\n    if (startDate !== undefined) {\n      localVarQueryParameters['startDate'] = ObjectSerializer.serialize(startDate, \"string\");\n    }\n    if (endDate !== undefined) {\n      localVarQueryParameters['endDate'] = ObjectSerializer.serialize(endDate, \"string\");\n    }\n    if (limit !== undefined) {\n      localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, \"number\");\n    }\n    if (offset !== undefined) {\n      localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, \"number\");\n    }\n    if (sort !== undefined) {\n      localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, \"'asc' | 'desc'\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetSmsCampaigns\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  requestSmsRecipientExport(campaignId, recipientExport, options = {}) {\n    const localVarPath = this.basePath + '/smsCampaigns/{campaignId}/exportRecipients'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (campaignId === null || campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling requestSmsRecipientExport.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(recipientExport, \"RequestSmsRecipientExport\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"CreatedProcessId\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  sendSmsCampaignNow(campaignId, options = {}) {\n    const localVarPath = this.basePath + '/smsCampaigns/{campaignId}/sendNow'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (campaignId === null || campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling sendSmsCampaignNow.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  sendSmsReport(campaignId, sendReport, options = {}) {\n    const localVarPath = this.basePath + '/smsCampaigns/{campaignId}/sendReport'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (campaignId === null || campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling sendSmsReport.');\n    }\n    if (sendReport === null || sendReport === undefined) {\n      throw new Error('Required parameter sendReport was null or undefined when calling sendSmsReport.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(sendReport, \"SendReport\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  sendTestSms(campaignId, phoneNumber, options = {}) {\n    const localVarPath = this.basePath + '/smsCampaigns/{campaignId}/sendTest'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (campaignId === null || campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling sendTestSms.');\n    }\n    if (phoneNumber === null || phoneNumber === undefined) {\n      throw new Error('Required parameter phoneNumber was null or undefined when calling sendTestSms.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(phoneNumber, \"SendTestSms\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  updateSmsCampaign(campaignId, updateSmsCampaign, options = {}) {\n    const localVarPath = this.basePath + '/smsCampaigns/{campaignId}'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (campaignId === null || campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling updateSmsCampaign.');\n    }\n    if (updateSmsCampaign === null || updateSmsCampaign === undefined) {\n      throw new Error('Required parameter updateSmsCampaign was null or undefined when calling updateSmsCampaign.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'PUT',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(updateSmsCampaign, \"UpdateSmsCampaign\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  updateSmsCampaignStatus(campaignId, status, options = {}) {\n    const localVarPath = this.basePath + '/smsCampaigns/{campaignId}/status'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (campaignId === null || campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling updateSmsCampaignStatus.');\n    }\n    if (status === null || status === undefined) {\n      throw new Error('Required parameter status was null or undefined when calling updateSmsCampaignStatus.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'PUT',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(status, \"UpdateCampaignStatus\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n}\nexports.SMSCampaignsApi = SMSCampaignsApi;\nvar SendersApiApiKeys;\n(function (SendersApiApiKeys) {\n  SendersApiApiKeys[SendersApiApiKeys[\"apiKey\"] = 0] = \"apiKey\";\n  SendersApiApiKeys[SendersApiApiKeys[\"partnerKey\"] = 1] = \"partnerKey\";\n})(SendersApiApiKeys = exports.SendersApiApiKeys || (exports.SendersApiApiKeys = {}));\nclass SendersApi {\n  constructor(basePathOrUsername, password, basePath) {\n    this._basePath = defaultBasePath;\n    this.defaultHeaders = {\n      'user-agent': `sendinblue_clientAPI/v${version}/ts-node`\n    };\n    this._useQuerystring = false;\n    this.authentications = {\n      'default': new VoidAuth(),\n      'apiKey': new ApiKeyAuth('header', 'api-key'),\n      'partnerKey': new ApiKeyAuth('header', 'partner-key')\n    };\n    if (password) {\n      if (basePath) {\n        this.basePath = basePath;\n      }\n    } else {\n      if (basePathOrUsername) {\n        this.basePath = basePathOrUsername;\n      }\n    }\n  }\n  set useQuerystring(value) {\n    this._useQuerystring = value;\n  }\n  set basePath(basePath) {\n    this._basePath = basePath;\n  }\n  get basePath() {\n    return this._basePath;\n  }\n  setDefaultAuthentication(auth) {\n    this.authentications.default = auth;\n  }\n  setApiKey(key, value) {\n    this.authentications[SendersApiApiKeys[key]].apiKey = value;\n  }\n  createSender(sender, options = {}) {\n    const localVarPath = this.basePath + '/senders';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(sender, \"CreateSender\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"CreateSenderModel\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  deleteSender(senderId, options = {}) {\n    const localVarPath = this.basePath + '/senders/{senderId}'.replace('{' + 'senderId' + '}', encodeURIComponent(String(senderId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (senderId === null || senderId === undefined) {\n      throw new Error('Required parameter senderId was null or undefined when calling deleteSender.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'DELETE',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getIps(options = {}) {\n    const localVarPath = this.basePath + '/senders/ips';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetIps\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getIpsFromSender(senderId, options = {}) {\n    const localVarPath = this.basePath + '/senders/{senderId}/ips'.replace('{' + 'senderId' + '}', encodeURIComponent(String(senderId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (senderId === null || senderId === undefined) {\n      throw new Error('Required parameter senderId was null or undefined when calling getIpsFromSender.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetIpsFromSender\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getSenders(ip, domain, options = {}) {\n    const localVarPath = this.basePath + '/senders';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (ip !== undefined) {\n      localVarQueryParameters['ip'] = ObjectSerializer.serialize(ip, \"string\");\n    }\n    if (domain !== undefined) {\n      localVarQueryParameters['domain'] = ObjectSerializer.serialize(domain, \"string\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetSendersList\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  updateSender(senderId, sender, options = {}) {\n    const localVarPath = this.basePath + '/senders/{senderId}'.replace('{' + 'senderId' + '}', encodeURIComponent(String(senderId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (senderId === null || senderId === undefined) {\n      throw new Error('Required parameter senderId was null or undefined when calling updateSender.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'PUT',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(sender, \"UpdateSender\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n}\nexports.SendersApi = SendersApi;\nvar TasksApiApiKeys;\n(function (TasksApiApiKeys) {\n  TasksApiApiKeys[TasksApiApiKeys[\"apiKey\"] = 0] = \"apiKey\";\n  TasksApiApiKeys[TasksApiApiKeys[\"partnerKey\"] = 1] = \"partnerKey\";\n})(TasksApiApiKeys = exports.TasksApiApiKeys || (exports.TasksApiApiKeys = {}));\nclass TasksApi {\n  constructor(basePathOrUsername, password, basePath) {\n    this._basePath = defaultBasePath;\n    this.defaultHeaders = {\n      'user-agent': `sendinblue_clientAPI/v${version}/ts-node`\n    };\n    this._useQuerystring = false;\n    this.authentications = {\n      'default': new VoidAuth(),\n      'apiKey': new ApiKeyAuth('header', 'api-key'),\n      'partnerKey': new ApiKeyAuth('header', 'partner-key')\n    };\n    if (password) {\n      if (basePath) {\n        this.basePath = basePath;\n      }\n    } else {\n      if (basePathOrUsername) {\n        this.basePath = basePathOrUsername;\n      }\n    }\n  }\n  set useQuerystring(value) {\n    this._useQuerystring = value;\n  }\n  set basePath(basePath) {\n    this._basePath = basePath;\n  }\n  get basePath() {\n    return this._basePath;\n  }\n  setDefaultAuthentication(auth) {\n    this.authentications.default = auth;\n  }\n  setApiKey(key, value) {\n    this.authentications[TasksApiApiKeys[key]].apiKey = value;\n  }\n  crmTasksGet(filterType, filterStatus, filterDate, filterAssignTo, filterContacts, filterDeals, filterCompanies, dateFrom, dateTo, offset, limit, sort, sortBy, options = {}) {\n    const localVarPath = this.basePath + '/crm/tasks';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (filterType !== undefined) {\n      localVarQueryParameters['filter[type]'] = ObjectSerializer.serialize(filterType, \"string\");\n    }\n    if (filterStatus !== undefined) {\n      localVarQueryParameters['filter[status]'] = ObjectSerializer.serialize(filterStatus, \"'done' | 'undone'\");\n    }\n    if (filterDate !== undefined) {\n      localVarQueryParameters['filter[date]'] = ObjectSerializer.serialize(filterDate, \"'overdue' | 'today' | 'tomorrow' | 'week' | 'range'\");\n    }\n    if (filterAssignTo !== undefined) {\n      localVarQueryParameters['filter[assignTo]'] = ObjectSerializer.serialize(filterAssignTo, \"string\");\n    }\n    if (filterContacts !== undefined) {\n      localVarQueryParameters['filter[contacts]'] = ObjectSerializer.serialize(filterContacts, \"string\");\n    }\n    if (filterDeals !== undefined) {\n      localVarQueryParameters['filter[deals]'] = ObjectSerializer.serialize(filterDeals, \"string\");\n    }\n    if (filterCompanies !== undefined) {\n      localVarQueryParameters['filter[companies]'] = ObjectSerializer.serialize(filterCompanies, \"string\");\n    }\n    if (dateFrom !== undefined) {\n      localVarQueryParameters['dateFrom'] = ObjectSerializer.serialize(dateFrom, \"number\");\n    }\n    if (dateTo !== undefined) {\n      localVarQueryParameters['dateTo'] = ObjectSerializer.serialize(dateTo, \"number\");\n    }\n    if (offset !== undefined) {\n      localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, \"number\");\n    }\n    if (limit !== undefined) {\n      localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, \"number\");\n    }\n    if (sort !== undefined) {\n      localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, \"'asc' | 'desc'\");\n    }\n    if (sortBy !== undefined) {\n      localVarQueryParameters['sortBy'] = ObjectSerializer.serialize(sortBy, \"string\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"TaskList\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  crmTasksIdDelete(id, options = {}) {\n    const localVarPath = this.basePath + '/crm/tasks/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling crmTasksIdDelete.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'DELETE',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  crmTasksIdGet(id, options = {}) {\n    const localVarPath = this.basePath + '/crm/tasks/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling crmTasksIdGet.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"Task\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  crmTasksIdPatch(id, body, options = {}) {\n    const localVarPath = this.basePath + '/crm/tasks/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling crmTasksIdPatch.');\n    }\n    if (body === null || body === undefined) {\n      throw new Error('Required parameter body was null or undefined when calling crmTasksIdPatch.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'PATCH',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(body, \"Body7\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  crmTasksPost(body, options = {}) {\n    const localVarPath = this.basePath + '/crm/tasks';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (body === null || body === undefined) {\n      throw new Error('Required parameter body was null or undefined when calling crmTasksPost.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(body, \"Body6\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"InlineResponse2011\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  crmTasktypesGet(options = {}) {\n    const localVarPath = this.basePath + '/crm/tasktypes';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"TaskTypes\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n}\nexports.TasksApi = TasksApi;\nvar TransactionalEmailsApiApiKeys;\n(function (TransactionalEmailsApiApiKeys) {\n  TransactionalEmailsApiApiKeys[TransactionalEmailsApiApiKeys[\"apiKey\"] = 0] = \"apiKey\";\n  TransactionalEmailsApiApiKeys[TransactionalEmailsApiApiKeys[\"partnerKey\"] = 1] = \"partnerKey\";\n})(TransactionalEmailsApiApiKeys = exports.TransactionalEmailsApiApiKeys || (exports.TransactionalEmailsApiApiKeys = {}));\nclass TransactionalEmailsApi {\n  constructor(basePathOrUsername, password, basePath) {\n    this._basePath = defaultBasePath;\n    this.defaultHeaders = {\n      'user-agent': `sendinblue_clientAPI/v${version}/ts-node`\n    };\n    this._useQuerystring = false;\n    this.authentications = {\n      'default': new VoidAuth(),\n      'apiKey': new ApiKeyAuth('header', 'api-key'),\n      'partnerKey': new ApiKeyAuth('header', 'partner-key')\n    };\n    if (password) {\n      if (basePath) {\n        this.basePath = basePath;\n      }\n    } else {\n      if (basePathOrUsername) {\n        this.basePath = basePathOrUsername;\n      }\n    }\n  }\n  set useQuerystring(value) {\n    this._useQuerystring = value;\n  }\n  set basePath(basePath) {\n    this._basePath = basePath;\n  }\n  get basePath() {\n    return this._basePath;\n  }\n  setDefaultAuthentication(auth) {\n    this.authentications.default = auth;\n  }\n  setApiKey(key, value) {\n    this.authentications[TransactionalEmailsApiApiKeys[key]].apiKey = value;\n  }\n  blockNewDomain(blockDomain, options = {}) {\n    const localVarPath = this.basePath + '/smtp/blockedDomains';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (blockDomain === null || blockDomain === undefined) {\n      throw new Error('Required parameter blockDomain was null or undefined when calling blockNewDomain.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(blockDomain, \"BlockDomain\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  createSmtpTemplate(smtpTemplate, options = {}) {\n    const localVarPath = this.basePath + '/smtp/templates';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (smtpTemplate === null || smtpTemplate === undefined) {\n      throw new Error('Required parameter smtpTemplate was null or undefined when calling createSmtpTemplate.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(smtpTemplate, \"CreateSmtpTemplate\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"CreateModel\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  deleteBlockedDomain(domain, options = {}) {\n    const localVarPath = this.basePath + '/smtp/blockedDomains/{domain}'.replace('{' + 'domain' + '}', encodeURIComponent(String(domain)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (domain === null || domain === undefined) {\n      throw new Error('Required parameter domain was null or undefined when calling deleteBlockedDomain.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'DELETE',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  deleteHardbounces(deleteHardbounces, options = {}) {\n    const localVarPath = this.basePath + '/smtp/deleteHardbounces';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(deleteHardbounces, \"DeleteHardbounces\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  deleteScheduledEmailById(identifier, options = {}) {\n    const localVarPath = this.basePath + '/smtp/email/{identifier}'.replace('{' + 'identifier' + '}', encodeURIComponent(String(identifier)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (identifier === null || identifier === undefined) {\n      throw new Error('Required parameter identifier was null or undefined when calling deleteScheduledEmailById.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'DELETE',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  deleteSmtpTemplate(templateId, options = {}) {\n    const localVarPath = this.basePath + '/smtp/templates/{templateId}'.replace('{' + 'templateId' + '}', encodeURIComponent(String(templateId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (templateId === null || templateId === undefined) {\n      throw new Error('Required parameter templateId was null or undefined when calling deleteSmtpTemplate.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'DELETE',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getAggregatedSmtpReport(startDate, endDate, days, tag, options = {}) {\n    const localVarPath = this.basePath + '/smtp/statistics/aggregatedReport';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (startDate !== undefined) {\n      localVarQueryParameters['startDate'] = ObjectSerializer.serialize(startDate, \"string\");\n    }\n    if (endDate !== undefined) {\n      localVarQueryParameters['endDate'] = ObjectSerializer.serialize(endDate, \"string\");\n    }\n    if (days !== undefined) {\n      localVarQueryParameters['days'] = ObjectSerializer.serialize(days, \"number\");\n    }\n    if (tag !== undefined) {\n      localVarQueryParameters['tag'] = ObjectSerializer.serialize(tag, \"string\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetAggregatedReport\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getBlockedDomains(options = {}) {\n    const localVarPath = this.basePath + '/smtp/blockedDomains';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetBlockedDomains\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getEmailEventReport(limit, offset, startDate, endDate, days, email, event, tags, messageId, templateId, sort, options = {}) {\n    const localVarPath = this.basePath + '/smtp/statistics/events';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (limit !== undefined) {\n      localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, \"number\");\n    }\n    if (offset !== undefined) {\n      localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, \"number\");\n    }\n    if (startDate !== undefined) {\n      localVarQueryParameters['startDate'] = ObjectSerializer.serialize(startDate, \"string\");\n    }\n    if (endDate !== undefined) {\n      localVarQueryParameters['endDate'] = ObjectSerializer.serialize(endDate, \"string\");\n    }\n    if (days !== undefined) {\n      localVarQueryParameters['days'] = ObjectSerializer.serialize(days, \"number\");\n    }\n    if (email !== undefined) {\n      localVarQueryParameters['email'] = ObjectSerializer.serialize(email, \"string\");\n    }\n    if (event !== undefined) {\n      localVarQueryParameters['event'] = ObjectSerializer.serialize(event, \"'bounces' | 'hardBounces' | 'softBounces' | 'delivered' | 'spam' | 'requests' | 'opened' | 'clicks' | 'invalid' | 'deferred' | 'blocked' | 'unsubscribed' | 'error' | 'loadedByProxy'\");\n    }\n    if (tags !== undefined) {\n      localVarQueryParameters['tags'] = ObjectSerializer.serialize(tags, \"string\");\n    }\n    if (messageId !== undefined) {\n      localVarQueryParameters['messageId'] = ObjectSerializer.serialize(messageId, \"string\");\n    }\n    if (templateId !== undefined) {\n      localVarQueryParameters['templateId'] = ObjectSerializer.serialize(templateId, \"number\");\n    }\n    if (sort !== undefined) {\n      localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, \"'asc' | 'desc'\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetEmailEventReport\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getScheduledEmailByBatchId(batchId, startDate, endDate, sort, status, limit, offset, options = {}) {\n    const localVarPath = this.basePath + '/smtp/emailStatus/{batchId}'.replace('{' + 'batchId' + '}', encodeURIComponent(String(batchId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (batchId === null || batchId === undefined) {\n      throw new Error('Required parameter batchId was null or undefined when calling getScheduledEmailByBatchId.');\n    }\n    if (startDate !== undefined) {\n      localVarQueryParameters['startDate'] = ObjectSerializer.serialize(startDate, \"string\");\n    }\n    if (endDate !== undefined) {\n      localVarQueryParameters['endDate'] = ObjectSerializer.serialize(endDate, \"string\");\n    }\n    if (sort !== undefined) {\n      localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, \"'asc' | 'desc'\");\n    }\n    if (status !== undefined) {\n      localVarQueryParameters['status'] = ObjectSerializer.serialize(status, \"'processed' | 'inProgress' | 'queued'\");\n    }\n    if (limit !== undefined) {\n      localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, \"number\");\n    }\n    if (offset !== undefined) {\n      localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, \"number\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetScheduledEmailByBatchId\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getScheduledEmailByMessageId(messageId, startDate, endDate, options = {}) {\n    const localVarPath = this.basePath + '/smtp/emailStatus/{messageId}'.replace('{' + 'messageId' + '}', encodeURIComponent(String(messageId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (messageId === null || messageId === undefined) {\n      throw new Error('Required parameter messageId was null or undefined when calling getScheduledEmailByMessageId.');\n    }\n    if (startDate !== undefined) {\n      localVarQueryParameters['startDate'] = ObjectSerializer.serialize(startDate, \"string\");\n    }\n    if (endDate !== undefined) {\n      localVarQueryParameters['endDate'] = ObjectSerializer.serialize(endDate, \"string\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetScheduledEmailByMessageId\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getSmtpReport(limit, offset, startDate, endDate, days, tag, sort, options = {}) {\n    const localVarPath = this.basePath + '/smtp/statistics/reports';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (limit !== undefined) {\n      localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, \"number\");\n    }\n    if (offset !== undefined) {\n      localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, \"number\");\n    }\n    if (startDate !== undefined) {\n      localVarQueryParameters['startDate'] = ObjectSerializer.serialize(startDate, \"string\");\n    }\n    if (endDate !== undefined) {\n      localVarQueryParameters['endDate'] = ObjectSerializer.serialize(endDate, \"string\");\n    }\n    if (days !== undefined) {\n      localVarQueryParameters['days'] = ObjectSerializer.serialize(days, \"number\");\n    }\n    if (tag !== undefined) {\n      localVarQueryParameters['tag'] = ObjectSerializer.serialize(tag, \"string\");\n    }\n    if (sort !== undefined) {\n      localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, \"'asc' | 'desc'\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetReports\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getSmtpTemplate(templateId, options = {}) {\n    const localVarPath = this.basePath + '/smtp/templates/{templateId}'.replace('{' + 'templateId' + '}', encodeURIComponent(String(templateId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (templateId === null || templateId === undefined) {\n      throw new Error('Required parameter templateId was null or undefined when calling getSmtpTemplate.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetSmtpTemplateOverview\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getSmtpTemplates(templateStatus, limit, offset, sort, options = {}) {\n    const localVarPath = this.basePath + '/smtp/templates';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (templateStatus !== undefined) {\n      localVarQueryParameters['templateStatus'] = ObjectSerializer.serialize(templateStatus, \"boolean\");\n    }\n    if (limit !== undefined) {\n      localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, \"number\");\n    }\n    if (offset !== undefined) {\n      localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, \"number\");\n    }\n    if (sort !== undefined) {\n      localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, \"'asc' | 'desc'\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetSmtpTemplates\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getTransacBlockedContacts(startDate, endDate, limit, offset, senders, sort, options = {}) {\n    const localVarPath = this.basePath + '/smtp/blockedContacts';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (startDate !== undefined) {\n      localVarQueryParameters['startDate'] = ObjectSerializer.serialize(startDate, \"string\");\n    }\n    if (endDate !== undefined) {\n      localVarQueryParameters['endDate'] = ObjectSerializer.serialize(endDate, \"string\");\n    }\n    if (limit !== undefined) {\n      localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, \"number\");\n    }\n    if (offset !== undefined) {\n      localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, \"number\");\n    }\n    if (senders !== undefined) {\n      localVarQueryParameters['senders'] = ObjectSerializer.serialize(senders, \"Array<string>\");\n    }\n    if (sort !== undefined) {\n      localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, \"'asc' | 'desc'\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetTransacBlockedContacts\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getTransacEmailContent(uuid, options = {}) {\n    const localVarPath = this.basePath + '/smtp/emails/{uuid}'.replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (uuid === null || uuid === undefined) {\n      throw new Error('Required parameter uuid was null or undefined when calling getTransacEmailContent.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetTransacEmailContent\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getTransacEmailsList(email, templateId, messageId, startDate, endDate, sort, limit, offset, options = {}) {\n    const localVarPath = this.basePath + '/smtp/emails';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (email !== undefined) {\n      localVarQueryParameters['email'] = ObjectSerializer.serialize(email, \"string\");\n    }\n    if (templateId !== undefined) {\n      localVarQueryParameters['templateId'] = ObjectSerializer.serialize(templateId, \"number\");\n    }\n    if (messageId !== undefined) {\n      localVarQueryParameters['messageId'] = ObjectSerializer.serialize(messageId, \"string\");\n    }\n    if (startDate !== undefined) {\n      localVarQueryParameters['startDate'] = ObjectSerializer.serialize(startDate, \"string\");\n    }\n    if (endDate !== undefined) {\n      localVarQueryParameters['endDate'] = ObjectSerializer.serialize(endDate, \"string\");\n    }\n    if (sort !== undefined) {\n      localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, \"'asc' | 'desc'\");\n    }\n    if (limit !== undefined) {\n      localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, \"number\");\n    }\n    if (offset !== undefined) {\n      localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, \"number\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetTransacEmailsList\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  sendTestTemplate(templateId, sendTestEmail, options = {}) {\n    const localVarPath = this.basePath + '/smtp/templates/{templateId}/sendTest'.replace('{' + 'templateId' + '}', encodeURIComponent(String(templateId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (templateId === null || templateId === undefined) {\n      throw new Error('Required parameter templateId was null or undefined when calling sendTestTemplate.');\n    }\n    if (sendTestEmail === null || sendTestEmail === undefined) {\n      throw new Error('Required parameter sendTestEmail was null or undefined when calling sendTestTemplate.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(sendTestEmail, \"SendTestEmail\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  sendTransacEmail(sendSmtpEmail, options = {}) {\n    const localVarPath = this.basePath + '/smtp/email';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (sendSmtpEmail === null || sendSmtpEmail === undefined) {\n      throw new Error('Required parameter sendSmtpEmail was null or undefined when calling sendTransacEmail.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(sendSmtpEmail, \"SendSmtpEmail\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"CreateSmtpEmail\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  smtpBlockedContactsEmailDelete(email, options = {}) {\n    const localVarPath = this.basePath + '/smtp/blockedContacts/{email}'.replace('{' + 'email' + '}', encodeURIComponent(String(email)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (email === null || email === undefined) {\n      throw new Error('Required parameter email was null or undefined when calling smtpBlockedContactsEmailDelete.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'DELETE',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  smtpLogMessageIdDelete(messageId, options = {}) {\n    const localVarPath = this.basePath + '/smtp/log/{messageId}'.replace('{' + 'messageId' + '}', encodeURIComponent(String(messageId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (messageId === null || messageId === undefined) {\n      throw new Error('Required parameter messageId was null or undefined when calling smtpLogMessageIdDelete.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'DELETE',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  updateSmtpTemplate(templateId, smtpTemplate, options = {}) {\n    const localVarPath = this.basePath + '/smtp/templates/{templateId}'.replace('{' + 'templateId' + '}', encodeURIComponent(String(templateId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (templateId === null || templateId === undefined) {\n      throw new Error('Required parameter templateId was null or undefined when calling updateSmtpTemplate.');\n    }\n    if (smtpTemplate === null || smtpTemplate === undefined) {\n      throw new Error('Required parameter smtpTemplate was null or undefined when calling updateSmtpTemplate.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'PUT',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(smtpTemplate, \"UpdateSmtpTemplate\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n}\nexports.TransactionalEmailsApi = TransactionalEmailsApi;\nvar TransactionalSMSApiApiKeys;\n(function (TransactionalSMSApiApiKeys) {\n  TransactionalSMSApiApiKeys[TransactionalSMSApiApiKeys[\"apiKey\"] = 0] = \"apiKey\";\n  TransactionalSMSApiApiKeys[TransactionalSMSApiApiKeys[\"partnerKey\"] = 1] = \"partnerKey\";\n})(TransactionalSMSApiApiKeys = exports.TransactionalSMSApiApiKeys || (exports.TransactionalSMSApiApiKeys = {}));\nclass TransactionalSMSApi {\n  constructor(basePathOrUsername, password, basePath) {\n    this._basePath = defaultBasePath;\n    this.defaultHeaders = {\n      'user-agent': `sendinblue_clientAPI/v${version}/ts-node`\n    };\n    this._useQuerystring = false;\n    this.authentications = {\n      'default': new VoidAuth(),\n      'apiKey': new ApiKeyAuth('header', 'api-key'),\n      'partnerKey': new ApiKeyAuth('header', 'partner-key')\n    };\n    if (password) {\n      if (basePath) {\n        this.basePath = basePath;\n      }\n    } else {\n      if (basePathOrUsername) {\n        this.basePath = basePathOrUsername;\n      }\n    }\n  }\n  set useQuerystring(value) {\n    this._useQuerystring = value;\n  }\n  set basePath(basePath) {\n    this._basePath = basePath;\n  }\n  get basePath() {\n    return this._basePath;\n  }\n  setDefaultAuthentication(auth) {\n    this.authentications.default = auth;\n  }\n  setApiKey(key, value) {\n    this.authentications[TransactionalSMSApiApiKeys[key]].apiKey = value;\n  }\n  getSmsEvents(limit, startDate, endDate, offset, days, phoneNumber, event, tags, sort, options = {}) {\n    const localVarPath = this.basePath + '/transactionalSMS/statistics/events';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (limit !== undefined) {\n      localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, \"number\");\n    }\n    if (startDate !== undefined) {\n      localVarQueryParameters['startDate'] = ObjectSerializer.serialize(startDate, \"string\");\n    }\n    if (endDate !== undefined) {\n      localVarQueryParameters['endDate'] = ObjectSerializer.serialize(endDate, \"string\");\n    }\n    if (offset !== undefined) {\n      localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, \"number\");\n    }\n    if (days !== undefined) {\n      localVarQueryParameters['days'] = ObjectSerializer.serialize(days, \"number\");\n    }\n    if (phoneNumber !== undefined) {\n      localVarQueryParameters['phoneNumber'] = ObjectSerializer.serialize(phoneNumber, \"string\");\n    }\n    if (event !== undefined) {\n      localVarQueryParameters['event'] = ObjectSerializer.serialize(event, \"'bounces' | 'hardBounces' | 'softBounces' | 'delivered' | 'sent' | 'accepted' | 'unsubscription' | 'replies' | 'blocked' | 'rejected'\");\n    }\n    if (tags !== undefined) {\n      localVarQueryParameters['tags'] = ObjectSerializer.serialize(tags, \"string\");\n    }\n    if (sort !== undefined) {\n      localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, \"'asc' | 'desc'\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetSmsEventReport\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getTransacAggregatedSmsReport(startDate, endDate, days, tag, options = {}) {\n    const localVarPath = this.basePath + '/transactionalSMS/statistics/aggregatedReport';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (startDate !== undefined) {\n      localVarQueryParameters['startDate'] = ObjectSerializer.serialize(startDate, \"string\");\n    }\n    if (endDate !== undefined) {\n      localVarQueryParameters['endDate'] = ObjectSerializer.serialize(endDate, \"string\");\n    }\n    if (days !== undefined) {\n      localVarQueryParameters['days'] = ObjectSerializer.serialize(days, \"number\");\n    }\n    if (tag !== undefined) {\n      localVarQueryParameters['tag'] = ObjectSerializer.serialize(tag, \"string\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetTransacAggregatedSmsReport\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getTransacSmsReport(startDate, endDate, days, tag, sort, options = {}) {\n    const localVarPath = this.basePath + '/transactionalSMS/statistics/reports';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (startDate !== undefined) {\n      localVarQueryParameters['startDate'] = ObjectSerializer.serialize(startDate, \"string\");\n    }\n    if (endDate !== undefined) {\n      localVarQueryParameters['endDate'] = ObjectSerializer.serialize(endDate, \"string\");\n    }\n    if (days !== undefined) {\n      localVarQueryParameters['days'] = ObjectSerializer.serialize(days, \"number\");\n    }\n    if (tag !== undefined) {\n      localVarQueryParameters['tag'] = ObjectSerializer.serialize(tag, \"string\");\n    }\n    if (sort !== undefined) {\n      localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, \"'asc' | 'desc'\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetTransacSmsReport\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  sendTransacSms(sendTransacSms, options = {}) {\n    const localVarPath = this.basePath + '/transactionalSMS/sms';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (sendTransacSms === null || sendTransacSms === undefined) {\n      throw new Error('Required parameter sendTransacSms was null or undefined when calling sendTransacSms.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(sendTransacSms, \"SendTransacSms\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"SendSms\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n}\nexports.TransactionalSMSApi = TransactionalSMSApi;\nvar WebhooksApiApiKeys;\n(function (WebhooksApiApiKeys) {\n  WebhooksApiApiKeys[WebhooksApiApiKeys[\"apiKey\"] = 0] = \"apiKey\";\n  WebhooksApiApiKeys[WebhooksApiApiKeys[\"partnerKey\"] = 1] = \"partnerKey\";\n})(WebhooksApiApiKeys = exports.WebhooksApiApiKeys || (exports.WebhooksApiApiKeys = {}));\nclass WebhooksApi {\n  constructor(basePathOrUsername, password, basePath) {\n    this._basePath = defaultBasePath;\n    this.defaultHeaders = {\n      'user-agent': `sendinblue_clientAPI/v${version}/ts-node`\n    };\n    this._useQuerystring = false;\n    this.authentications = {\n      'default': new VoidAuth(),\n      'apiKey': new ApiKeyAuth('header', 'api-key'),\n      'partnerKey': new ApiKeyAuth('header', 'partner-key')\n    };\n    if (password) {\n      if (basePath) {\n        this.basePath = basePath;\n      }\n    } else {\n      if (basePathOrUsername) {\n        this.basePath = basePathOrUsername;\n      }\n    }\n  }\n  set useQuerystring(value) {\n    this._useQuerystring = value;\n  }\n  set basePath(basePath) {\n    this._basePath = basePath;\n  }\n  get basePath() {\n    return this._basePath;\n  }\n  setDefaultAuthentication(auth) {\n    this.authentications.default = auth;\n  }\n  setApiKey(key, value) {\n    this.authentications[WebhooksApiApiKeys[key]].apiKey = value;\n  }\n  createWebhook(createWebhook, options = {}) {\n    const localVarPath = this.basePath + '/webhooks';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (createWebhook === null || createWebhook === undefined) {\n      throw new Error('Required parameter createWebhook was null or undefined when calling createWebhook.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'POST',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(createWebhook, \"CreateWebhook\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"CreateModel\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  deleteWebhook(webhookId, options = {}) {\n    const localVarPath = this.basePath + '/webhooks/{webhookId}'.replace('{' + 'webhookId' + '}', encodeURIComponent(String(webhookId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (webhookId === null || webhookId === undefined) {\n      throw new Error('Required parameter webhookId was null or undefined when calling deleteWebhook.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'DELETE',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getWebhook(webhookId, options = {}) {\n    const localVarPath = this.basePath + '/webhooks/{webhookId}'.replace('{' + 'webhookId' + '}', encodeURIComponent(String(webhookId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (webhookId === null || webhookId === undefined) {\n      throw new Error('Required parameter webhookId was null or undefined when calling getWebhook.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetWebhook\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getWebhooks(type, sort, options = {}) {\n    const localVarPath = this.basePath + '/webhooks';\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (type !== undefined) {\n      localVarQueryParameters['type'] = ObjectSerializer.serialize(type, \"'marketing' | 'transactional' | 'inbound'\");\n    }\n    if (sort !== undefined) {\n      localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, \"'asc' | 'desc'\");\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetWebhooks\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  updateWebhook(webhookId, updateWebhook, options = {}) {\n    const localVarPath = this.basePath + '/webhooks/{webhookId}'.replace('{' + 'webhookId' + '}', encodeURIComponent(String(webhookId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (webhookId === null || webhookId === undefined) {\n      throw new Error('Required parameter webhookId was null or undefined when calling updateWebhook.');\n    }\n    if (updateWebhook === null || updateWebhook === undefined) {\n      throw new Error('Required parameter updateWebhook was null or undefined when calling updateWebhook.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'PUT',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true,\n      body: ObjectSerializer.serialize(updateWebhook, \"UpdateWebhook\")\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n}\nexports.WebhooksApi = WebhooksApi;\nvar WhatsappCampaignsApiApiKeys;\n(function (WhatsappCampaignsApiApiKeys) {\n  WhatsappCampaignsApiApiKeys[WhatsappCampaignsApiApiKeys[\"apiKey\"] = 0] = \"apiKey\";\n  WhatsappCampaignsApiApiKeys[WhatsappCampaignsApiApiKeys[\"partnerKey\"] = 1] = \"partnerKey\";\n})(WhatsappCampaignsApiApiKeys = exports.WhatsappCampaignsApiApiKeys || (exports.WhatsappCampaignsApiApiKeys = {}));\nclass WhatsappCampaignsApi {\n  constructor(basePathOrUsername, password, basePath) {\n    this._basePath = defaultBasePath;\n    this.defaultHeaders = {\n      'user-agent': `sendinblue_clientAPI/v${version}/ts-node`\n    };\n    this._useQuerystring = false;\n    this.authentications = {\n      'default': new VoidAuth(),\n      'apiKey': new ApiKeyAuth('header', 'api-key'),\n      'partnerKey': new ApiKeyAuth('header', 'partner-key')\n    };\n    if (password) {\n      if (basePath) {\n        this.basePath = basePath;\n      }\n    } else {\n      if (basePathOrUsername) {\n        this.basePath = basePathOrUsername;\n      }\n    }\n  }\n  set useQuerystring(value) {\n    this._useQuerystring = value;\n  }\n  set basePath(basePath) {\n    this._basePath = basePath;\n  }\n  get basePath() {\n    return this._basePath;\n  }\n  setDefaultAuthentication(auth) {\n    this.authentications.default = auth;\n  }\n  setApiKey(key, value) {\n    this.authentications[WhatsappCampaignsApiApiKeys[key]].apiKey = value;\n  }\n  deleteWhatsappCampaign(campaignId, options = {}) {\n    const localVarPath = this.basePath + '/whatsappCampaigns/{campaignId}'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (campaignId === null || campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling deleteWhatsappCampaign.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'DELETE',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n  getWhatsappCampaign(campaignId, options = {}) {\n    const localVarPath = this.basePath + '/whatsappCampaigns/{campaignId}'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));\n    const localVarQueryParameters = {};\n    const localVarHeaderParams = Object.assign({}, this.defaultHeaders);\n    const localVarFormParams = {};\n    if (campaignId === null || campaignId === undefined) {\n      throw new Error('Required parameter campaignId was null or undefined when calling getWhatsappCampaign.');\n    }\n    Object.assign(localVarHeaderParams, options.headers);\n    const localVarUseFormData = false;\n    const localVarRequestOptions = {\n      method: 'GET',\n      qs: localVarQueryParameters,\n      headers: localVarHeaderParams,\n      uri: localVarPath,\n      useQuerystring: this._useQuerystring,\n      json: true\n    };\n    this.authentications.apiKey.applyToRequest(localVarRequestOptions);\n    this.authentications.partnerKey.applyToRequest(localVarRequestOptions);\n    this.authentications.default.applyToRequest(localVarRequestOptions);\n    if (Object.keys(localVarFormParams).length) {\n      if (localVarUseFormData) {\n        localVarRequestOptions.formData = localVarFormParams;\n      } else {\n        localVarRequestOptions.form = localVarFormParams;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      localVarRequest(localVarRequestOptions, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          body = ObjectSerializer.deserialize(body, \"GetWhatsappCampaignOverview\");\n          if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n            resolve({\n              response: response,\n              body: body\n            });\n          } else {\n            reject({\n              response: response,\n              body: body\n            });\n          }\n        }\n      });\n    });\n  }\n}\nexports.WhatsappCampaignsApi = WhatsappCampaignsApi;\n//# sourceMappingURL=api.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}